import treeToFlatArray from 'operation-tree-node/dist/treeToFlatArray.esm';
import treeEach from 'operation-tree-node/dist/treeEach.esm';
import treeMerge from 'operation-tree-node/dist/treeMerge.esm';
import treeCheck from 'operation-tree-node/dist/treeCheck.esm';

import paramToArray from '../utils/param-to-array';
import LayerManagement from './layer-management';
import { defaultLayerConfig } from '../config';

/**
 * Layer-Tree
 * @mixin LayerTree
 * @description
 * 图层树类
 */
export default class LayerTree {
  showLayers = [];
  treeNodes = [];
  treeLayers = [];
  treeLayersIds = [];
  _treeNodesFlat = [];
  _projection;
  _layerType;

  /**@type LayerManagement*/
  _layerManagement;

  /**
   * @param {Object} olMap
   */
  constructor(olMap) {
    this._projection = olMap.getView().getProjection();
    this._layerManagement = new LayerManagement(olMap);
    olMap.on('moveend', () => this._updateOlLayer());
  }

  /**
   * 节点的勾选切换
   * @param {Array<Number|Symbol>|Number|Symbol} nodeId 节点 ID
   * @param {Boolean} checked 节点勾选状态
   */
  checkChange(nodeId, checked) {
    const showLayers = this.showLayers;
    let needUpdate = false;
    let index;

    // 获取影响的所有节点 ID
    nodeId = paramToArray(nodeId);
    nodeId = treeCheck(this.treeNodes, nodeId).filter((item) =>
      this.treeLayersIds.includes(item)
    );

    nodeId.forEach((id) => {
      index = showLayers.indexOf(id);
      // 只有状态更改了才取更新树结构
      if (index !== -1) {
        if (!checked) {
          showLayers.splice(index, 1);
          needUpdate = true;
        }
      } else if (checked) {
        showLayers.push(id);
        needUpdate = true;
      }
    });

    if (needUpdate) {
      this.layerChange();
      this.eventHub.dispatch('checkChange', nodeId, checked);
    }
  }

  /**
   * 修改当前展示的图层，例如仅展示图层：X510183TDXZG2017XGQ
   * @param {Array|String} [showLayers] 需要展示的图层名称集合，默认全部展示
   */
  layerChange(showLayers) {
    if (showLayers) {
      this.showLayers = paramToArray(showLayers);
    }
    this._updateNodeChecked();
    this._updateLayersVisible();
    this.eventHub.dispatch('layerChange', this.showLayers);
  }

  /**
   * 为图层配置创建树结构
   * @param {Array} groupLayers mapConfig.groupLayers
   * @param {Array} showLayers 展示的图层名数组
   */
  createLayerTree(groupLayers = [], showLayers = []) {
    const treeNodes = [];

    // 为每一个组创建一棵树
    groupLayers.forEach((item) => treeNodes.push(this._createNode(item)));

    // 递归合并树的公共节点（根据 letter 参数）
    this.treeNodes = treeMerge(
      treeNodes,
      (curr, next) => curr.letter && curr.letter === next.letter
    );

    // 创建树节点对父级的引用
    treeEach(
      this.treeNodes,
      (node, index, arr, parent) => (node.parent = parent)
    );

    // 获取树结构的相关数据
    this._updateTreeData();

    // 初始化 zIndex（zIndex 取反）
    const nodeMaxIndex = this._treeNodesFlat.length - 1;
    this._treeNodesFlat.forEach(
      (item, index) => (item.zIndex = nodeMaxIndex - index)
    );

    // 更新 ol 图层
    this._updateOlLayer(true);

    // 初始化图层
    // 如果没有则默认选择最后一个
    showLayers = paramToArray(showLayers);
    if (!showLayers.length) {
      const lastNode = this.treeLayers.slice(-1)[0];
      showLayers.push(lastNode.id);
    }
    this.layerChange(showLayers);
  }

  /**
   * 设置图层的透明度
   * @param {String} layerId 图层 id，例如：X510183TDXZG2017XGQ
   * @param {Number} opacity 0 ～ 1
   */
  setLayerOpacity(layerId, opacity) {
    const layers = this.getOlLayer(layerId);
    layers.forEach((item) => item.setOpacity(opacity));
  }

  /**
   * 设置图层的排序
   * @param {String} layerId 图层 id，例如：X510183TDXZG2017XGQ
   * @param {String} type 排序方向 down 向下移动，up 向上移动
   */
  setLayerSort(layerId, type) {
    const direction = type === 'down' ? 1 : -1; // 数组向上移动 index 越小，所以 -1
    const node = this._treeNodesFlat.find((item) => item.id === layerId);
    const parentChildren = node.parent.children;
    const currIndex = parentChildren.indexOf(node);
    const nextIndex = currIndex + direction;
    const next = parentChildren[nextIndex];

    if (next) {
      const curr = parentChildren[currIndex];

      // replace sort and zIndex
      [curr.zIndex, next.zIndex] = [next.zIndex, curr.zIndex];
      parentChildren.splice(
        currIndex,
        0,
        parentChildren.splice(nextIndex, 1)[0]
      );

      // update layer zIndex
      this._updateLayersZIndex([curr, next]);

      this._updateTreeData();
    }
  }

  /**
   * 获取对应 id 的图层
   * @param {String|Array} layerId 图层 id，例如：X510183TDXZG2017XGQ
   * @return {Array} 返回 ol.Layer 实例
   */
  getOlLayer(layerId) {
    layerId = paramToArray(layerId);
    return this.treeLayers
      .filter((item) => layerId.includes(item.id))
      .map((item) => item.olLayer);
  }

  /**
   * 获取最上层展示的图层数据
   * @return {Object|null}
   */
  getTopVisibleLayer() {
    return this.treeLayers.find((item) => item.checked);
  }

  /**
   * 创建节点
   * @private
   */
  _createNode(configGroup) {
    /**@type {{land,landLetter,special,specialLetter,region,regionLetter,year,yearLetter}} */
    const alias = configGroup.alias;
    const layers = configGroup.layers;

    // 将 wmts 的 id 放在图层的父级节点上
    const parentId = configGroup.id;

    // 五级：图层
    const nodeLayer = layers.map((layer) => {
      return {
        id: layer.id,
        letter: layer.letter,
        name: layer.caption,
        config: layer,
        configGroup,
        nodeType: 'layer'
      };
    });

    return {
      // 一级：地类
      id: Symbol(),
      letter: alias.landLetter,
      name: alias.land,
      config: configGroup,
      nodeType: 'DL',
      children: [
        {
          // 二级：专题
          id: Symbol(),
          letter: alias.specialLetter,
          name: alias.special,
          config: configGroup,
          nodeType: 'ZT',
          children: [
            {
              // 三级：行政区
              id: Symbol(),
              letter: alias.regionLetter,
              name: alias.region,
              config: configGroup,
              nodeType: 'XZQ',
              children: [
                {
                  // 四级：年度
                  id: parentId,
                  letter: alias.yearLetter,
                  name: alias.year,
                  config: configGroup,
                  nodeType: 'ND',
                  children: nodeLayer
                }
              ]
            }
          ]
        }
      ]
    };
  }

  /**
   * 更新 ol 图层
   * @param {Boolean} [reload] 是否重新加载
   * @private
   */
  _updateOlLayer(reload = false) {
    // 判断是否需要更新图层
    const zoomThreshold = defaultLayerConfig.zoomThreshold;
    const layerType =
      !zoomThreshold || this.olView.getZoom() >= zoomThreshold ? 'wms' : 'wmts';
    if (!reload && layerType === this._layerType) {
      return;
    }
    this._layerType = layerType;

    const layerManagement = this._layerManagement;
    let layerConfig, layerConfigGroup, olLayer;
    this.treeLayers.forEach((item) => {
      layerConfig = item.config;
      layerConfigGroup = item.configGroup;
      olLayer = item.olLayer;

      // 移除旧的
      if (olLayer) {
        layerManagement.removeLayer(olLayer);
      }

      // 添加新的
      item.olLayer = layerManagement.addLayer(
        // 如果是 ImageServer，则会使用图片图层（image）
        layerConfig.type === 'MapServer' ? layerType : 'image',
        {
          serverId: layerConfig.serverId,
          serverType: layerConfig.type,
          serverIdWMS: layerConfig.serverIdWMS,
          serviceCode: layerConfig.serviceCode,
          extent: layerConfigGroup.extent,
          zIndex: item.zIndex,
          resolutions: layerConfigGroup.resolutions,
          tileInfo: layerConfigGroup.tileInfo,
          projection: layerConfigGroup.epsg,
          visible: item.checked
        }
      );
    });
  }

  /**
   * 获取树结构的相关数据
   * @private
   */
  _updateTreeData() {
    // 获取树节点的扁平数据
    this._treeNodesFlat = treeToFlatArray(this.treeNodes);
    this.treeLayers = this._treeNodesFlat.filter(
      (item) => item.nodeType === 'layer'
    );
    this.treeLayersIds = this.treeLayers.map((item) => item.id);
  }

  /**
   * 更新图层的展示状态
   * @private
   */
  _updateLayersVisible() {
    this.treeLayers.forEach((item) => {
      item.olLayer.setVisible(item.checked);
    });
  }

  /**
   * 更新节点勾选状态
   * @private
   */
  _updateNodeChecked() {
    const checkedIds = treeCheck(this.treeNodes, this.showLayers);
    this.treeLayers.forEach((node) => {
      node.checked = checkedIds.includes(node.id);
    });
  }

  /**
   * 更新图层的层级
   * @param {Object|Array} node 图层节点
   * @private
   */
  _updateLayersZIndex(node) {
    node.forEach((item) => {
      item.olLayer.setZIndex(item.zIndex);
    });
  }
}
