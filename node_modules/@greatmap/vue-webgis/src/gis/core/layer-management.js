import TileWMS from 'ol/source/TileWMS';
import Tile from 'ol/layer/Tile';
import XYZ from 'ol/source/XYZ';
import TileGrid from 'ol/tilegrid/TileGrid';
import ImageArcGISRest from 'ol/source/ImageArcGISRest';
import { default as OlImageLayer } from 'ol/layer/Image';

import { gisServerAuth } from '../utils/gis-server-auth';
import { SERVER_CONFIG } from '../config/server';

/**
 * @typedef {'wms'|'wmts'｜'image'} LayerType
 */

/**
 * 图层管理类
 */
export default class LayerManagement {
  _olMap;

  constructor(olMap) {
    this._olMap = olMap;
  }

  /**
   * @typedef {Object} LayerOptions 创建图层配置选项
   * @property {Number} [serverIdWMS] WMS 图层 ID
   * @property {String} serviceCode 服务 ID
   * @property {Number} zIndex 层级
   * @property {Boolean} [visible] 是否展示
   * @property {Array<Number>} [extent] 范围
   * @property {Array<Number>} resolutions
   * @property {Object} tileInfo 瓦片信息
   * @property {String} projection
   * @property {String} serverType MapServer/ImageServer
   */

  /**
   * 添加图层
   * @param {LayerType} type
   * @param {LayerOptions} options
   *
   * @return {TileLayer|ImageLayer}
   */
  addLayer(type, options) {
    // 获取图层实例
    let layer;
    switch (type) {
      case 'wms':
        layer = LayerManagement.createWMSLayer(options);
        break;
      case 'wmts':
        layer = LayerManagement.createWMTSLayer(options);
        break;
      case 'image':
        layer = LayerManagement.createImageLayer(options);
        break;
      default:
    }

    // 添加并返回
    this._olMap.addLayer(layer);

    return layer;
  }

  /**
   * 移除图层
   * @param {BaseLayer} olLayerRef
   */
  removeLayer(olLayerRef) {
    this._olMap.removeLayer(olLayerRef);
  }

  /**
   * 创建 WMS 图层
   * @param {LayerOptions}
   */
  static createWMSLayer({ serverIdWMS, serviceCode, zIndex, visible = false }) {
    const token = gisServerAuth.getToken();
    const source = new TileWMS({
      url: SERVER_CONFIG.arcgisService + serviceCode + '/MapServer/WMSServer',
      params: {
        LAYERS: serverIdWMS,
        token
      }
      // 解决 canvas 的污染问题（canvas 的跨域属性，此设置将不设置 CORS 请求的凭据标志）
      // 设置为空会导致 WMS 请求跨域
      // crossOrigin: ''
    });
    return new Tile({
      source,
      zIndex,
      visible
    });
  }

  /**
   * 创建 WMTS 图层
   * @param {LayerOptions}
   */
  static createWMTSLayer({
    serviceCode,
    extent,
    zIndex,
    visible = false,
    resolutions,
    tileInfo,
    projection
  }) {
    const token = gisServerAuth.getToken();
    const tileInfoOrigin = tileInfo.origin;
    const source = new XYZ({
      tileGrid: new TileGrid({
        extent,
        resolutions,
        tileSize: tileInfo.cols,
        origin: [tileInfoOrigin.x, tileInfoOrigin.y]
      }),
      projection,
      url: `${
        SERVER_CONFIG.arcgisRestService
      }${serviceCode}/ImageServer/tile/{z}/{y}/{x}?token=${token}`
    });
    return new Tile({
      source,
      zIndex,
      visible
    });
  }

  /**
   * 创建 image 图层
   * @param {LayerOptions}
   */
  static createImageLayer({
    serviceCode,
    serverType = 'MapServer',
    serverId = '',
    zIndex,
    visible
  }) {
    const source = new ImageArcGISRest({
      ratio: 1,
      params: {
        LAYERS: serverId,
        token: gisServerAuth.getToken()
      },
      url: `${
        SERVER_CONFIG.arcgis
      }/server/rest/services/${serviceCode}/${serverType}`
    });
    return new OlImageLayer({
      source,
      zIndex,
      visible
    });
  }
}
