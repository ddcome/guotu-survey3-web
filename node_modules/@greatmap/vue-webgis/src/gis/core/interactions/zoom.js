import { animateDuration } from '../../config/animate';
import { extend as olExtent } from 'ol/extent';

export default class Zoom {
  _defaultZoom;
  _defaultCenter;
  _mapView;
  _map;

  /**
   * @param map
   */
  constructor(map) {
    this._defaultZoom = map.mapConfig.zoom;
    this._defaultCenter = map.mapConfig.center;
    this._mapView = map.olView;
    this._map = map;
  }

  /**
   * 视图缩放
   * @param {String|Number} type 视图缩放类型
   * - String: zoom-in/zoom-out/revert
   * - Number: 直接更改 zoom 值
   * @api
   */
  change(type) {
    let center;
    let zoom = this._mapView.getZoom();
    if (typeof type === 'string') {
      switch (type) {
        case 'zoom-in':
          zoom++;
          break;
        case 'zoom-out':
          zoom--;
          break;
        case 'revert':
          zoom = this._defaultZoom;
          center = this._defaultCenter;
          break;
        default:
      }
    } else {
      zoom = type;
    }
    this.animate({ zoom, center });
  }

  /**
   * 同步多个地图
   * @param {Array<Map>|Map} maps Map 实例
   */
  syncMapsMove(maps) {
    const [center, zoom] = [this._mapView.getCenter(), this._mapView.getZoom()];
    maps.forEach((map) => {
      map.interactions.zoom.animate({ center, zoom });
    });
  }

  /**
   * 重置视图为当前展示的图层范围内
   */
  resetView(padding) {
    const treeLayers = this._map.treeLayers;
    const extents = treeLayers
      .filter((item) => item.checked)
      .map((item) => item.configGroup.extent);
    this.focusExtents(extents, padding);
  }

  /**
   * 动画缩放
   * @param {Array<Number>} center
   * @param {Number} zoom
   */
  animate({
    center = this._mapView.getCenter(),
    zoom = this._mapView.getZoom()
  }) {
    this._mapView.animate({ center, zoom, duration: animateDuration });
  }

  /**
   * 缩放至要素
   * @param {*[]} features 要素集合
   * @param {Array<Number>} [padding]
   */
  toFeatures(features = [], padding) {
    const extents = features.map((item) => item.getGeometry().getExtent());
    this.focusExtents(extents, padding);
  }

  /**
   * 聚焦范围内
   * @param {Array} extents 范围集合
   * @param {Array<Number>} padding
   */
  focusExtents(extents, padding = [0, 0, 0, 0]) {
    const extent = extents.reduce((prev, curr) => {
      return prev ? olExtent(prev, curr) : curr;
    }, null);
    this._mapView.fit(extent, {
      constrainResolution: true,
      nearest: true,
      duration: animateDuration,
      maxZoom: 2,
      padding
    });
  }
}
