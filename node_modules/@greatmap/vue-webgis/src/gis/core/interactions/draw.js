import Overlay from 'ol/Overlay.js';
import OlDraw from 'ol/interaction/Draw.js';

import ToggleActive from '../common/toggle-active';
import classMixin from '../../utils/class-mixin';
import GISEvent from '../common/gis-event';
import { errorMessage } from '../../../utils/error-handler';

/**
 * 测量（线/多边形）
 *
 * @extends GISEvent
 * @extends ToggleActive
 *
 * @typedef {{
 *   geometry: Geometry,
 *   length?: number,
 *   area?: number,
 *   extent: number[]
 * }} eventResult
 *
 * @event drawstart 绘制开始事件，返回 eventResult
 * @event drawend 绘制结束事件，返回 eventResult
 */
export default class Draw extends classMixin(GISEvent, ToggleActive) {
  _map;
  _olMap;
  _viewport;
  _vectorSource;
  _draw;
  _helpTooltipElement;
  _helpTooltip;
  _helpMsg = '点击开始绘制';
  _continueEndMsg = '再次点击结束绘制';
  _continuePolygonMsg = '点击继续绘制多边形';
  _continueLineMsg = '点击继续绘制线条';
  _supportTypes = ['Polygon', 'LineString', 'Circle', 'Point'];
  _helpMsgType;
  _showHelpTooltip;
  _features = [];

  constructor(map) {
    super('drawstart,drawend'); // 初始化 drawstart，drawend 监听事件

    this._map = map;
    this._olMap = map.olMap;
    this._viewport = map.olMap.getViewport();
    this._vectorSource = map.vectorSource;

    // `this` lose in event listener
    this._pointerMoveHandler = this._pointerMoveHandler.bind(this);
    this._hideHelpTooltipElement = this._hideHelpTooltipElement.bind(this);

    map.eventHub.on('clear', () => this.clear());
  }

  /**
   * Activate
   * @param {String} type LineString/Polygon
   * @param {Boolean} isFreehand 是否自由绘制
   */
  activateHandle(type, isFreehand) {
    // check type
    if (!this._supportTypes.includes(type)) {
      return errorMessage(
        `${type} 绘制类型不支持，支持的类型有 ${this._supportTypes}`
      );
    }

    // add element
    this._createHelpTooltip();

    // add listener
    this._olMap.on('pointermove', this._pointerMoveHandler);
    this._viewport.addEventListener('mouseout', this._hideHelpTooltipElement);

    // add interaction
    this._addInteraction(type, isFreehand);
  }

  /**
   * Deactivate
   */
  deactivateHandle() {
    // remove element
    this._removeHelpTooltip();

    // remove listener
    this._olMap.un('pointermove', this._pointerMoveHandler);
    this._viewport.removeEventListener(
      'mouseout',
      this._hideHelpTooltipElement
    );

    // remove interaction
    this._removeInteraction();
  }

  /**
   * 清理绘制的要素
   */
  clear() {
    this._map.removeFeature(this._features);
    this._features = [];
  }

  /**
   * Hide helpTooltipElement
   * @private
   */
  _hideHelpTooltipElement() {
    this._helpTooltipElement.classList.add('webgis-hidden');
  }

  /**
   * Handle pointer move.
   * @param {Object} evt ol/MapBrowserEvent
   * @private
   */
  _pointerMoveHandler(evt) {
    if (evt.dragging) {
      return;
    }

    let helpMsg = this._helpMsg;
    switch (this._helpMsgType) {
      case 'LineString':
        helpMsg = this._continueLineMsg;
        break;
      case 'Polygon':
        helpMsg = this._continuePolygonMsg;
        break;
      case 'Circle':
        helpMsg = this._continueEndMsg;
        break;
      default:
    }

    if (this._showHelpTooltip && helpMsg) {
      this._helpTooltip.setPosition(evt.coordinate);
      this._helpTooltipElement.innerHTML = helpMsg;
      this._helpTooltipElement.classList.remove('webgis-hidden');
    } else {
      this._helpTooltipElement.classList.add('webgis-hidden');
    }
  }

  /**
   * Add interaction
   * @param {String} type
   * @param {Boolean} isFreehand
   * @private
   */
  _addInteraction(type, isFreehand) {
    const map = this._map;

    this._showHelpTooltip = !isFreehand; // 如果自由绘制则不展示提示

    this._draw = new OlDraw({
      source: this._vectorSource,
      type: type,
      freehand: isFreehand
    });
    this._olMap.addInteraction(this._draw);

    this._draw.on('drawstart', (evt) => {
      map.toggleSelectInteraction(false);
      this.dispatch('drawstart', this._formatEventData(evt));
      this._helpMsgType = type;
    });
    this._draw.on('drawend', (evt) => {
      this._features.push(evt.feature);
      map.toggleSelectInteraction(true);
      // 防止在还未添加要素就移除的情况
      setTimeout(() => this.dispatch('drawend', this._formatEventData(evt)), 0);
      this._helpMsgType = '';
    });
  }

  /**
   * Remove
   * @private
   */
  _removeInteraction() {
    this._olMap.removeInteraction(this._draw);
    this._draw = null;
  }

  /**
   * Creates a new help tooltip
   * @private
   */
  _createHelpTooltip() {
    this._helpTooltipElement = document.createElement('div');
    this._helpTooltipElement.className = 'webgis-measure-tooltip webgis-hidden';
    this._helpTooltip = new Overlay({
      element: this._helpTooltipElement,
      offset: [15, 0],
      positioning: 'center-left'
    });
    this._olMap.addOverlay(this._helpTooltip);
  }

  /**
   * Remove helpTooltip
   * @private
   */
  _removeHelpTooltip() {
    this._helpTooltipElement = null;
    this._olMap.removeOverlay(this._helpTooltip);
    this._helpTooltip = null;
  }

  /**
   * 格式化监听事件的数据
   * @return {eventResult}
   */
  _formatEventData(evt) {
    const geometry = evt.feature.getGeometry();
    const type = geometry.getType();
    const extent =
      type === 'Polygon'
        ? this._map.formatEsriJSON.writeGeometry(geometry)
        : geometry.getExtent();
    return {
      geometry,
      type,
      extent
    };
  }
}
