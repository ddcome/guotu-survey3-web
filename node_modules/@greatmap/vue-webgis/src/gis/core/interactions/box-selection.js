import DragBox from 'ol/interaction/DragBox';
import OlFeature from 'ol/Feature';

import GISEvent from '../common/gis-event';
import classMixin from '../../utils/class-mixin';
import ToggleActive from '../common/toggle-active';

/**
 * 框选操作基类
 */
export default class BoxSelection extends classMixin(GISEvent, ToggleActive) {
  _map;
  _olMap;
  _vectorSource;
  _dragBox;
  _feature;

  constructor(map) {
    super('boxstart,boxend');

    this._map = map;
    this._olMap = map.olMap;
    this._vectorSource = map.vectorSource;

    map.eventHub.on('clear', () => this.removeBoxFeature());
  }

  // 激活 extends ToggleActive
  activateHandle() {
    const map = this._map;

    // 切换光标样式
    map.toggleCursorStyle('crosshair');

    // 添加图层与交互
    this._dragBox = new DragBox({
      minArea: 0
    });
    this._olMap.addInteraction(this._dragBox);

    // 绑定事件
    this._dragBox.on('boxstart', () => {
      map.toggleSelectInteraction(false);

      this.dispatch('boxstart');
    });
    this._dragBox.on('boxend', () => {
      map.toggleSelectInteraction(true);

      // 获取框选范围
      const geometry = this._dragBox.getGeometry();
      const extent = geometry.getExtent();

      // 清理旧的框选
      this.removeBoxFeature();

      // 添加新的框选要素
      this.addBoxFeature(
        new OlFeature({
          geometry
        })
      );

      // 执行 onBoxEnd 事件
      this.dispatch('boxend', extent);
    });
  }

  // 关闭 extends ToggleActive
  deactivateHandle() {
    // 切换光标样式
    this._map.toggleCursorStyle();

    // 移除图层与交互
    this._olMap.removeInteraction(this._dragBox);
    this._dragBox = null;

    // 清理旧的框选（暂不清理）
    // this.removeBoxFeature();
  }

  /**
   * 展示框选本身的 feature
   */
  addBoxFeature(feature) {
    this._feature = feature;
    this._map.addFeature(this._feature);
  }

  /**
   * 移除框选本身的 feature
   */
  removeBoxFeature() {
    this._map.removeFeature(this._feature);
    this._feature = null;
  }
}
