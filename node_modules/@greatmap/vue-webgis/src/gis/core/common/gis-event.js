import paramToArray from '../../utils/param-to-array';
import { warnMessage } from '../../../utils/error-handler';

/**
 * 事件管理
 */
export default class GISEvent {
  listenerGroup = {
    // eventName = listeners
    // eventName = []
  };

  /**
   * 初始化事件
   * @param {String|Array<String>} eventName 事件名
   */
  constructor(eventName) {
    const eventNames = paramToArray(eventName);
    eventNames.forEach((key) => (this.listenerGroup[key] = []));
  }

  /**
   * 触发事件
   * @param {String|Array<String>} eventName 事件名
   * @param {*} params
   */
  dispatch(eventName, ...params) {
    const eventNames = paramToArray(eventName);
    eventNames.forEach((name) =>
      this.listenerGroup[name].forEach((fn) => fn(...params))
    );
  }

  /**
   * 事件监听
   * @param {String} eventName 事件名称
   * @param {Function} callback 回调函数
   */
  on(eventName, callback) {
    if (this.listenerGroup.hasOwnProperty(eventName)) {
      this.listenerGroup[eventName].push(callback);
    } else {
      GISEvent.eventNameError(eventName);
    }
  }

  /**
   * 事件监听
   * @param {String|Array<String>} eventName 事件名
   * @param {Function} callback 回调函数
   */
  off(eventName, callback) {
    const eventNames = paramToArray(eventName);
    eventNames.forEach((eventName) => {
      if (this.listenerGroup.hasOwnProperty(eventName)) {
        const listeners = this.listenerGroup[eventName];
        const index = listeners.indexOf(callback);
        if (index >= 0) {
          listeners.splice(index, 1);
        }
      } else {
        GISEvent.eventNameError(eventName);
      }
    });
  }

  /**
   * 取消所有监听
   */
  offAll() {
    Object.keys(this.listenerGroup).forEach((key) => {
      this.listenerGroup[key] = [];
    });
  }

  /**
   * 事件名错误提示
   * @param eventName
   * @private
   */
  static eventNameError(eventName) {
    warnMessage(`不存在 ${eventName} 事件，事件是否已经注册，事件名是否正确？`);
  }
}
