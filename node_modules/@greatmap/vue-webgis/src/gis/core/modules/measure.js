import { unByKey } from 'ol/Observable.js';
import Overlay from 'ol/Overlay.js';
import LineString from 'ol/geom/LineString';
import Polygon from 'ol/geom/Polygon';

import ToggleActive from '../common/toggle-active';

/**
 * 测量（线/多边形）
 */
export default class Measure extends ToggleActive {
  _map;
  _olMap;
  _drawInteraction;
  _measureTooltips = []; // all tooltips

  constructor(map) {
    super();

    this._map = map;
    this._olMap = map.olMap;
    this._drawInteraction = map.interactions.draw;
  }

  /**
   * Activate
   * @param {String} type line/area
   */
  activateHandle(type) {
    // 在绘制开始时添加
    // this._createMeasureTooltip();

    this._addInteraction(type);
  }

  /**
   * Deactivate
   */
  deactivateHandle() {
    // remove element（不清理）
    // this._removeMeasureTooltip();

    this._removeInteraction();
  }

  /**
   * Add interaction
   * @param {String} type LineString/Polygon
   * @private
   */
  _addInteraction(type) {
    // 激活交互
    this._drawInteraction.toggleActive(true, type);

    let listener; // 监听事件
    let measureTooltip;
    let measureTooltipElement;

    this._drawInteraction.on('drawstart', (resultData) => {
      const measureTooltipObj = this._createMeasureTooltip();
      measureTooltip = measureTooltipObj.measureTooltip;
      measureTooltipElement = measureTooltipObj.measureTooltipElement;

      // 监听 geometry 的变化
      let tooltipCoordinate;
      listener = resultData.geometry.on('change', (evt) => {
        const geom = evt.target;
        let output = this._map.formatGeometrySize(geom).str;
        if (geom instanceof Polygon) {
          tooltipCoordinate = geom.getInteriorPoint().getCoordinates();
        } else if (geom instanceof LineString) {
          tooltipCoordinate = geom.getLastCoordinate();
        }
        measureTooltipElement.innerHTML = output;
        measureTooltip.setPosition(tooltipCoordinate);
      });
    });
    this._drawInteraction.on('drawend', () => {
      measureTooltip.setOffset([0, -7]);

      // 销毁引用与监听
      measureTooltip = null;
      measureTooltipElement = null;
      unByKey(listener);
    });
  }

  /**
   * Remove
   * @private
   */
  _removeInteraction() {
    // 关闭交互
    this._drawInteraction.toggleActive(false);

    // 取消监听事件
    this._drawInteraction.offAll();
  }

  /**
   * Creates a new measure tooltip
   * @private
   */
  _createMeasureTooltip() {
    const measureTooltipElement = document.createElement('div');
    measureTooltipElement.className =
      'webgis-measure-tooltip webgis-measure-tooltip-measure';
    const measureTooltip = new Overlay({
      element: measureTooltipElement,
      offset: [0, -15],
      positioning: 'bottom-center'
    });

    // save measure record
    this._measureTooltips.push(measureTooltip);

    this._olMap.addOverlay(measureTooltip);

    return {
      measureTooltip,
      measureTooltipElement
    };
  }

  /**
   * Remove helpTooltip
   * @private
   */
  _removeMeasureTooltip() {
    this._measureTooltips.forEach((item) => this._olMap.removeOverlay(item));
    this._measureTooltips = [];
  }
}
