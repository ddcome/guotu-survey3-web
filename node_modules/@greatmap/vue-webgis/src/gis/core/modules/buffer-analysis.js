import classMixin from '../../utils/class-mixin';
import ToggleActive from '../common/toggle-active';
import {
  createBuffersAnalysis,
  createAnalysisService,
  getAnalysisResult
} from '../../api/analysis-service';
import {
  createOverlayAnalysis,
  createSummaryAnalysis
} from '../../api/modules/buffer-analysis';
import BaseAnalysis from '../common/base-analysis';

/**
 * 缓冲区分析
 *
 * @extends {BufferAnalysis,ToggleActive}
 *
 * @events 支持的事件
 * - next 分析进度 +1 回调，返回进度消息
 */
export default class BufferAnalysis extends classMixin(
  BaseAnalysis,
  ToggleActive
) {
  _wkid;
  _map;

  constructor(map) {
    super(map);

    this._wkid = map.mapConfig.wkid;
    this._map = map;
  }

  /**
   * 执行分析
   * @param {Array} extent 分析范围
   * @param {Number} distance 缓冲距离
   * @returns {Promise}
   */
  doAnalysis(extent, distance) {
    const dateId = Date.now();
    const bufferName = 'buffer_cs' + dateId;
    const overlayName = 'overlay_cs' + dateId;
    const summaryName = 'summary_cs' + dateId;
    const serviceCode = this._map.getTopVisibleLayer().id;

    // 执行缓冲与叠加分析
    return this._bufferAnalysis(serviceCode, bufferName, extent, distance).then(
      () => {
        return this._overlayAnalysis(serviceCode, overlayName, bufferName).then(
          () => {
            return this._summaryAnalysis(
              serviceCode,
              summaryName,
              overlayName
            ).then(() => {
              return getAnalysisResult(summaryName, this._wkid).then((res) => {
                this._map.interactions.zoom.toFeatures(
                  this._map.renderFeatureData(res)
                );
                return res;
              });
            });
          }
        );
      }
    );
  }

  /**
   * 缓冲分析
   * @param {String} serviceCode 图层服务 ID
   * @param {String} bufferName 缓冲分析名称
   * @param {Array} extent 分析范围
   * @param {Number} distance 缓冲距离
   * @returns {Promise}
   * @private
   */
  _bufferAnalysis(serviceCode, bufferName, extent, distance) {
    return createAnalysisService(bufferName).then((res) => {
      return createBuffersAnalysis({
        serviceUrl: res.serviceurl,
        serviceId: res.itemId,
        extent,
        wkid: this._wkid,
        distance,
        name: bufferName,
        serviceCode
      }).then(
        /** @param {Object<string, *>} res */ (res) => {
          return this.getProgress('CreateBuffers', res.jobId);
        }
      );
    });
  }

  /**
   * 叠加分析
   * @description
   * 根据缓冲分析进行叠加分析
   * @param {String} serviceCode 图层服务 ID
   * @param {String} overlayName 叠加分析名称
   * @param {String} bufferName 缓冲分析的名称
   * @returns {Promise}
   * @private
   */
  _overlayAnalysis(serviceCode, overlayName, bufferName) {
    return createAnalysisService(overlayName).then((res) => {
      return createOverlayAnalysis({
        serviceUrl: res.serviceurl,
        serviceId: res.itemId,
        name: overlayName,
        bufferName: bufferName,
        serviceCode
      }).then((res) => {
        return this.getProgress('OverlayLayers', res.jobId);
      });
    });
  }

  /**
   * 汇总分析
   * @param {String} serviceCode 图层服务 ID
   * @param {String} summaryName 汇总分析名称
   * @param {String} overlayName 叠加分析名称
   * @return {Promise}
   * @private
   */
  _summaryAnalysis(serviceCode, summaryName, overlayName) {
    return createAnalysisService(summaryName).then((res) => {
      return createSummaryAnalysis({
        name: summaryName,
        serviceUrl: res.serviceurl,
        serviceId: res.itemId,
        overlayName,
        serviceCode
      }).then((res) => {
        return this.getProgress('SummarizeAttributes', res.jobId);
      });
    });
  }
}
