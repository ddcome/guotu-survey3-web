import BoxSelection from '../../../gis/core/interactions/box-selection';
import classMixin from '../../utils/class-mixin';
import GISEvent from '../common/gis-event';
import ToggleActive from '../common/toggle-active';
import { unByKey } from 'ol/Observable';

export default class FeatureSelect extends classMixin(GISEvent, ToggleActive) {
  _map;
  _boxSelection;
  _features = [];
  _listener = {
    select: null
  };

  constructor(map) {
    super('start,select,end');

    this._map = map;
    this._boxSelection = new BoxSelection(map);

    this.toggleFeatureSelectListener();
    this._onBoxEnd = this._onBoxEnd.bind(this);
  }

  // 激活 extends ToggleActive
  activateHandle() {
    // bosSelect start/end 事件
    this._boxSelection.on('boxend', this._onBoxEnd);

    // 激活框选
    this._boxSelection.activate();
  }

  // 关闭 extends ToggleActive
  deactivateHandle() {
    this._boxSelection.offAll();

    // 关闭框选
    this._boxSelection.deactivate();
  }

  // listener select event
  toggleFeatureSelectListener(state = !this._listener.select) {
    const listenerKey = this._listener.select;
    if (state) {
      if (listenerKey) {
        this.toggleFeatureSelectListener();
      }
      this._listener.select = this._map.selectInteraction.on('select', (e) => {
        const selectedFeature = e.selected;
        if (selectedFeature.length) {
          this.dispatch('select', selectedFeature[0].get('BSM'));
        }
      });
    } else {
      unByKey(listenerKey);
      this._listener.select = null;
    }
  }

  /**
   * 更新要素列表
   * @param {Array} features
   */
  updateFeatures(features) {
    this._features = features;
  }

  /**
   * 点选要素
   * @param {String} BSM
   * @return {Object} 返回该 feature 对象
   */
  selectFeature(BSM) {
    const map = this._map;
    const feature = this._features.find((item) => BSM === item.get('BSM'));

    feature && setTimeout(() => map.selectFeature(feature), 300);
  }

  /**
   * 框选结束时
   * @param {Array} extent 框选范围
   * @private
   */
  _onBoxEnd(extent) {
    this.dispatch('start', extent);
    this._map.searchFeature({ extent }).then(
      (res) => {
        this.updateFeatures(res.features);
        this.dispatch('end', {
          state: true,
          data: res.data
        });
      },
      (error) => {
        this.dispatch('end', {
          state: false,
          message: error
        });
      }
    );
  }
}
