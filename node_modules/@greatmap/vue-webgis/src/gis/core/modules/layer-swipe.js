/**
 * 卷帘功能
 */
import ToggleActive from '../common/toggle-active';
import { unByKey } from 'ol/Observable';

export default class LayerSwipe extends ToggleActive {
  _value = 50;
  _map;
  _olMap;
  _layer;
  _type; // vertical/horizontal
  _listener = {
    precompose: null,
    postcompose: null
  };
  _eventHub;

  constructor(map) {
    super();

    this._map = map;
    this._olMap = map.olMap;
    this._eventHub = map.eventHub;

    this._restart = this._restart.bind(this);
    this._rectangleClip = this._rectangleClip.bind(this);
  }

  changeType(type) {
    this._type = type;
    this._restart();
  }

  // 修改卷帘值 0 - 100
  changeValue(value) {
    if (value < 0 || value > 100) {
      value = value < 0 ? 0 : 100;
    }
    this._value = value;
    this._olMap.render();
  }

  // 激活
  activateHandle(type = this._type || 'vertical') {
    this._type = type;

    this._updateLayer();

    // 监听 precompose/postcompose 事件
    this._listener.precompose = this._layer.on(
      'precompose',
      this._rectangleClip
    );
    this._listener.postcompose = this._layer.on('postcompose', (event) => {
      const ctx = event.context;
      ctx.restore();
    });

    this._eventHub.on('layerChange', this._restart);
  }

  // 关闭
  deactivateHandle() {
    this._layer = null; // unset

    // 销毁事件
    const listener = this._listener;
    Object.keys(listener).forEach((key) => {
      unByKey(listener[key]);
      listener[key] = null;
    });

    // 重置地图的渲染
    this._olMap.render();

    this._eventHub.off('layerChange', this._restart);
  }

  /**
   * 更新卷帘的图层
   * @private
   */
  _updateLayer = () => {
    const map = this._map;
    const firstLayer = map.getTopVisibleLayer();
    if (firstLayer) {
      this._layer = map.getOlLayer(firstLayer.id)[0];
    }
  };

  /**
   * 重置视图
   * @private
   */
  _restart() {
    this.toggleActive(true);
  }

  /**
   * 创建卷帘形状
   * @param event 图层渲染事件 precompose 的 event 对象
   * @private
   */
  _rectangleClip(event) {
    const type = this._type;
    const ctx = event.context;
    const canvas = ctx.canvas;
    const { width: canvasWidth, height: canvasHeight } = canvas;
    const percent = this._value / 100;
    let x = 0,
      y = 0,
      width = 0,
      height = 0;
    if (type === 'vertical') {
      width = canvasWidth * percent;
      height = canvasHeight;
    } else if (type === 'horizontal') {
      width = canvasWidth;
      height = canvasHeight * percent;
      y = canvasHeight - height;
    }

    ctx.save();
    ctx.beginPath();
    ctx.rect(x, y, width, height);
    ctx.clip();
  }
}
