import OlMap from 'ol/Map';
import * as olProj from 'ol/proj';
import * as olControl from 'ol/control';
import * as olInteraction from 'ol/interaction';
import OlView from 'ol/View';
import camelCase from 'lodash/camelCase';
import Select from 'ol/interaction/Select';
import VectorSource from 'ol/source/Vector';
import VectorLayer from 'ol/layer/Vector';

import getModule from './modules/index';
import LayerTree from './layer-tree';
import GISConfig from './gis-config';

import Zoom from './interactions/zoom';
import DragPan from './interactions/drag-pan';
import BoxSelection from './interactions/box-selection';
import classMixin from '../utils/class-mixin';
import GISUtils from './gis-utils';
import Draw from './interactions/draw';
import DragZoom from './interactions/drag-zoom';
import { setAliasMap } from '../config/alias';
import { setDefaultLayerConfig, setDefaultVisibleService } from '../config';
import { registerEPSG } from '../config/proj4';
import GISEvent from './common/gis-event';
import { errorMessage } from '../../utils/error-handler';
import promiseQueue from '../../utils/promise-queue';
import { checkValidArray } from '../../utils/check-array';

// 生成实例的唯一 ID (递增)
let mapId = 1;

/**
 * Map
 * @mixes LayerTree,GISUtils
 * @description
 * 用于地图的初始化
 */
export default class Map extends classMixin(LayerTree, GISUtils) {
  id = mapId++;
  olMap;
  olView;
  mapConfig;
  interactions = {}; // 内置交互功能集
  controls = {}; // 地图控件集
  eventHub = new GISEvent('layerChange,checkChange,clear');

  /** @type {Modules} 内置或者按需加载的模块功能集 */
  modules = {};

  // 全局共用
  selectInteraction = new Select();
  vectorSource = new VectorSource();
  vectorLayer = new VectorLayer({
    source: this.vectorSource,
    zIndex: 99999 // 防止矢量图层在基础图层下面
  });
  selectedFeatures;

  constructor({ olMap, showControls, controls }) {
    super(olMap);

    this.olMap = olMap;

    // 全局共用
    olMap.addInteraction(this.selectInteraction);
    olMap.addLayer(this.vectorLayer);
    this.selectedFeatures = this.selectInteraction.getFeatures();

    // 初始化控件
    this.toggleControls(showControls, controls);
  }

  init({ serviceCode, showLayers, modules }) {
    return GISConfig.create(serviceCode)
      .then((mapConfig) => {
        this.mapConfig = mapConfig;

        // 1. 创建视图
        this.initView();
        // 2. 创建图层
        this.createLayerTree(mapConfig.groupLayers, showLayers);
        // 3. 创建内置交互功能集
        this.interactions = {
          zoom: new Zoom(this),
          dragPan: new DragPan(this),
          boxSelection: new BoxSelection(this),
          draw: new Draw(this),
          dragZoom: new DragZoom(this)
        };
        // 4. 创建功能模块
        return this.initModules(modules).then(() => this);
      })
      .catch(errorMessage);
  }

  // 初始化视图
  initView() {
    const mapConfig = this.mapConfig;

    // 设置参照系范围
    const projection = new olProj.Projection({
      code: mapConfig.epsg,
      axisOrientation: 'neu'
    });
    projection.setExtent(mapConfig.extent);

    this.olMap.setView(
      (this.olView = new OlView({
        center: mapConfig.center,
        extent: mapConfig.extent,
        zoom: mapConfig.zoom,
        projection,
        resolutions: mapConfig.resolutions
      }))
    );
  }

  /**
   * 初始化功能模块
   * @param {Array} modules
   * @return {Promise<*[]>}
   */
  initModules(modules) {
    this.modules = {};
    return Promise.all(
      Array.from(modules).map((moduleName) => {
        return getModule(moduleName).then((module) => {
          this.modules[camelCase(moduleName)] = new module(this);
        });
      })
    );
  }

  /**
   * 创建地图
   * @description
   * 这里主要的作用：
   * 1. 创建 ol/Map 实例
   * 2. 创建 Map 实例
   * 3. 执行地图初始化（异步）
   *
   * @param {Element|*} target 创建地图的目标 DOM 元素
   * @param {String|Array} [serviceCode] gis 服务 ID
   * @param {{land, region, scale, special, year, layer}} [aliasMap] 图层的中文别名对照表
   * @param {Array|String} [showLayers] 需要展示的图层名称集合
   * @param {Array<String>|Set<String>} [modules] 所需的功能模块集合
   * @param {Boolean?} [showControls] 是否展示控件
   * @param {Array<String>} [controls] 所需的控件
   * @param {{ land, region, special, layer, year }} [defaultVisibleService] 默认的服务地址对象
   * @param {Object} [epsgConfig] EPSG 配置，例如：{ 'EPSG:4490': '+proj=longlat +ellps=GRS80 +no_defs' }
   * @param {{ zoomThreshold }} [defaultLayerConfig] 默认图层配置
   *
   * @returns {Promise<Map>}
   */
  static create({
    target,
    serviceCode = [],
    aliasMap = {},
    showLayers = [],
    modules = [],
    showControls = true,
    controls = [],
    defaultVisibleService = {},
    epsgConfig = {},
    defaultLayerConfig = {}
  }) {
    if (!target) {
      return Promise.reject('[target] is null!');
    }

    // 防止同时执行多次
    return promiseQueue(target, () => {
      const viewport = target.querySelectorAll('.ol-viewport');
      if (checkValidArray(viewport)) {
        viewport.forEach((item) => item.remove());
      }

      // 更新图层的中文别名对照表
      setAliasMap(aliasMap);

      // 设置默认的行政区代码（地图首次展示的图层）
      setDefaultVisibleService(defaultVisibleService);

      // 注册参考系
      registerEPSG(epsgConfig);

      // 设置图层配置
      setDefaultLayerConfig(defaultLayerConfig);

      const olMap = new OlMap({
        target: target,
        controls: olControl.defaults({
          attribution: false,
          zoom: false
        }),
        interactions: olInteraction.defaults(
          /** @type {DefaultsOptions} */ {
            dragPan: false
          }
        )
      });
      const map = new Map({ olMap, showControls, controls });
      return map.init({ serviceCode, showLayers, modules });
    });
  }
}
