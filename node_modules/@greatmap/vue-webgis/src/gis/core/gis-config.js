import { getServiceConfig, getServiceList } from '../api/service';
import { errorMessage, warnMessage } from '../../utils/error-handler';
import { aliasMap } from '../config/alias';
import { defaultVisibleService } from '../config';
import paramToArray from '../utils/param-to-array';
import { extend as olExtent } from 'ol/extent';
import { checkValidArray } from '../../utils/check-array';

/**
 * 服务 ID 校验规则与转译规则
 * [地类] - [行政区] - [专题] - [年度] - [比例尺] - [图层]
 *
 * @example
 * 'X621122TDXZ2019GXZQ' => {
 *   land: 'X',
 *   region: '621122',
 *   special: 'TDXZ',
 *   year: '2019',
 *   scale: 'G',
 *   layer: 'XZQ'
 * }
 */
const parseCheckReg = /^[A-Z]\d{6}[A-Z]{2,}\d{4}[A-Z_](YX|$)/;
const parseRules = {
  // 一级：地类
  land: (code) => code.slice(0, 1),
  // 二级：专题
  special: (code) =>
    code.replace(/^[A-Z]\d{6}/, '').replace(/\d{4}[A-Z_]+$/, ''),
  // 三级：行政区
  region: (code) => code.slice(1, 7),
  // 四级：年份
  year: (code) => code.replace(/^[A-Z]\d{6}[A-Z]+/, '').replace(/[A-Z_]+$/, ''),
  // （暂不展示）比例尺
  // scale: (code) => code.slice(-1),
  // 五层：图层
  layer: (code) => code.replace(/.*\d/g, '').slice(1)
};

/**
 * GIS-Config
 * @description
 * 地图配置类
 * @returns {Promise<Array>}
 */
export default class GISConfig {
  constructor() {}

  /**
   * 创建地图配置
   * @param {String|Array?} serviceCode
   * @returns {Promise}
   */
  static create(serviceCode = 'default') {
    // 兼容无效数据
    if (!serviceCode || !serviceCode.length) {
      serviceCode = 'default';
    }

    const gisConfig = new GISConfig();

    // 判断是否默认配置
    let promise;
    if (serviceCode === 'default') {
      promise = gisConfig.getMapConfig();
    } else {
      const services = paramToArray(serviceCode);
      promise = gisConfig.getMultiService(services);
    }

    return promise.then((res) => {
      if (res.length) {
        // 进行排序
        GISConfig.sortServiceList(res);

        // 合并配置，取最后一个作为默认配置
        const defaultItem = res[res.length - 1];
        return {
          zoom: defaultItem.zoom,
          wkid: defaultItem.wkid,
          epsg: defaultItem.epsg,
          extent: defaultItem.extent,
          center: defaultItem.center,
          resolutions: defaultItem.resolutions,
          groupLayers: res
        };
      } else {
        return Promise.reject('未获取到有效的服务地址');
      }
    });
  }

  /**
   * 进行默认配置的排序
   * **根据相似度得分 score 参数来进行排序**
   * @param {Array<{
   *  alias: {
   *    landLetter,regionLetter,specialLetter,
   *    yearLetter,layerLetter,scaleLetter
   *  }
   * }>} serviceList 初始化后的配置
   */
  static sortServiceList(serviceList) {
    const defaultLetterConfig = {};
    let compareKeys = Object.keys(defaultVisibleService);

    // 创建相同的数据结果（项为数组类型）
    compareKeys.forEach((key) => {
      defaultLetterConfig[key + 'Letter'] = paramToArray(
        defaultVisibleService[key]
      );
    });
    compareKeys = compareKeys.map((item) => item + 'Letter');

    // 进行评分，数组最后一个最高分（高分在底部）
    let letterItem, defaultLetterItem, findIndex;
    const compareConfig = (item) => {
      const itemAlias = item.alias;
      let score = 0;
      compareKeys.forEach((key) => {
        letterItem = itemAlias[key];
        defaultLetterItem = defaultLetterConfig[key];
        findIndex = defaultLetterItem.indexOf(letterItem);
        score += findIndex === -1 ? 0 : findIndex + 1;
      });
      return score;
    };
    serviceList.sort((a, b) => {
      return compareConfig(a) - compareConfig(b);
    });
  }

  /**
   * 获取服务列表
   * @returns {Promise<Array>}
   */
  getMapConfig() {
    return Promise.all([
      getServiceList('Image Service'),
      getServiceList()
    ]).then((res) => {
      const results = res.reduce(
        (curr, next) => [...curr, ...next.results],
        []
      );
      if (checkValidArray(results)) {
        const services = results
          .filter((item) => parseCheckReg.test(item.title))
          .map((item) => ({
            id: item.title,
            type: item.type === 'Map Service' ? 'MapServer' : 'ImageServer'
          }));
        if (services.length) {
          return this.getMultiService(services);
        } else {
          errorMessage('获取地图配置数据全部无效');
          return Promise.reject(res);
        }
      } else {
        errorMessage(`获取地图配置为空`);
        return Promise.reject(res);
      }
    });
  }

  /**
   * 获取多个服务配置
   * @param {Array<Object>} services
   * @returns {Promise<Array>}
   */
  getMultiService(services) {
    return Promise.all(
      services.map((item) => {
        if (typeof item === 'string') {
          item = { id: item, type: 'MapServer' };
        }
        const { id, type } = item;

        return getServiceConfig(id, type).then((restRes) => {
          const result = [];
          if (restRes) {
            // 兼容 ImageServer 图层
            if (!restRes.layers && type === 'ImageServer') {
              restRes.layers = [{ id: '', name: id }];
            }
            if (restRes.layers instanceof Array) {
              restRes.layers.forEach((layer, index, arr) => {
                layer.layerLength = arr.length; // 存储所在 layers 的数量，用于计算 serverIdWMS
                result.push(
                  this._formatConfig(id, layer.name, {
                    ...restRes,
                    type,
                    layers: [layer]
                  })
                );
              });
            }
          }
          return result;
        });
      })
    ).then((res) => {
      return res
        .filter((item) => item instanceof Array)
        .reduce((current, next) => [...current, ...next], [])
        .filter((item) => {
          if (item && checkValidArray(item.resolutions)) {
            return true;
          } else {
            warnMessage(`${item.serviceCode} resolutions 为空`);
          }
        });
    });
  }

  /**
   * 获取对应的别名（layer 为数组，所以不在其中）
   * @param {String} serviceCode 服务 ID
   * @private
   */
  _parseAlias(serviceCode) {
    const words = Object.keys(parseRules);
    const result = {};
    words.forEach((item) => {
      const parseResult = parseRules[item](serviceCode);
      result[item + 'Letter'] = parseResult;
      result[item] = aliasMap[item][parseResult] || parseResult;
    });
    return result;
  }

  /**
   * 格式化 serverConfig
   * @param {String} serviceCode 服务 ID 例如：E652324LQSJ2019G
   * @param {String} serviceCodeLayer 服务 ID (带图层代码）例如：E652324LQSJ2019GZDJBXX
   * @param {{
   *  initialExtent: number[], tileInfo: {lods: []|undefined}|undefined,
   *  fullExtent: number[], layers: Object[], type: string
   * }} response restService 服务返回的结果
   * @returns {{
   *  extent: *[], epsg: string, center: number[], wkid: Number,
   *  zoom: number, resolutions: Array, groupLayer: *
   * }}
   * @private
   */
  _formatConfig(serviceCode, serviceCodeLayer, response) {
    const alias = this._parseAlias(serviceCodeLayer);
    const layers = this._formatLayers(
      serviceCode,
      response.layers,
      response.type
    );
    const fullExtent = olExtent(response.fullExtent, response.initialExtent);
    const extent = [
      fullExtent.xmin,
      fullExtent.ymin,
      fullExtent.xmax,
      fullExtent.ymax
    ];
    const center = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
    const wkid = fullExtent.spatialReference.wkid;
    const tileInfo = response.tileInfo;
    const resolutions = [];

    tileInfo &&
      tileInfo.lods &&
      tileInfo.lods.forEach((lod) => {
        resolutions.push(lod.resolution);
      });

    return {
      id: Symbol(),
      extent,
      zoom: 0,
      epsg: 'EPSG:' + wkid,
      wkid,
      center,
      resolutions,
      serviceCode,
      tileInfo,
      alias,
      viewZoom: {
        wfs: [-1, -1],
        wms: [0, tileInfo && tileInfo.lods.length],
        wmts: [-1, -1]
      },
      layers
    };
  }

  /**
   * 格式化 layers
   * @param {String} serviceCode 服务 ID
   * @param {Array} layers rest/services 返回的 layers
   * @param {String} type 服务类型（MapServer/ImageServer)
   * @private
   */
  _formatLayers(serviceCode, layers, type) {
    return layers.map((layer) => {
      const layerNameKey = parseRules.layer(layer.name);
      return {
        caption: aliasMap.layer[layerNameKey] || layerNameKey,
        serviceCode,
        type,
        id: layer.name, // id 在多个树节点中不唯一，使用 name 作为 id 使用
        serverId: layer.id, // serverId 作为请求服务的 id 使用
        serverIdWMS: layer.layerLength - 1 - layer.id, // 作为 WMS 服务请求的 id（WMS 的 id 是颠倒的）
        name: layer.name,
        letter: parseRules.layer(layer.name),
        label: 'BSM',
        permission: '1=1'
      };
    });
  }
}
