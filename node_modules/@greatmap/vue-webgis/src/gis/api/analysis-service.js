import request from '../utils/request';
import { SERVER_CONFIG } from '../config/server';

const superDataPath = SERVER_CONFIG.superDataPath;

/**
 * 创建服务
 * @param {String} name 服务名称
 * @returns {Promise}
 */
export function createAnalysisService(name) {
  return request({
    url: `/portal/sharing/rest/content/users/admin/createService`,
    method: 'post',
    data: {
      f: 'json',
      createParameters: JSON.stringify({
        currentVersion: 10.2,
        serviceDescription: '',
        hasVersionedData: false,
        supportsDisconnectedEditing: false,
        hasStaticData: true,
        maxRecordCount: 2000,
        supportedQueryFormats: 'JSON',
        capabilities: 'Query',
        description: '',
        copyrightText: '',
        allowGeometryUpdates: false,
        syncEnabled: false,
        editorTrackingInfo: {
          enableEditorTracking: false,
          enableOwnershipAccessControl: false,
          allowOthersToUpdate: true,
          allowOthersToDelete: true
        },
        xssPreventionInfo: {
          xssPreventionEnabled: true,
          xssPreventionRule: 'InputOnly',
          xssInputRule: 'rejectInvalid'
        },
        tables: [],
        name,
        options: { dataSourceType: 'spatiotemporal' }
      }),
      outputType: 'featureService'
    },
    analysisToken: true
  });
}

/**
 * 创建缓冲区分析
 * @param {String} serviceUrl 服务 URL，创建服务返回
 * @param {String} serviceId 服务 ID，创建服务返回
 * @param {Array} extent 范围
 * @param {Number} wkid 参考系 ID
 * @param {Number} distance 缓冲距离
 * @param {String} name buffer 服务名称
 * @param {String} serviceCode 服务代码，例如 X620100DC2019GXZQ
 * @returns {Promise}
 */
export function createBuffersAnalysis({
  serviceUrl,
  serviceId,
  extent,
  wkid,
  distance,
  name,
  serviceCode
}) {
  return request({
    url: `/server/rest/services/System/GeoAnalyticsTools/GPServer/CreateBuffers/submitJob`,
    method: 'post',
    data: {
      f: 'json',
      inputLayer: JSON.stringify({
        url: `${
          SERVER_CONFIG.arcgisOrigin
        }/server/rest/services/DataStoreCatalogs/${superDataPath}/BigDataCatalogServer/${serviceCode}`,
        name: `${superDataPath}-${serviceCode}`
      }),
      distance: distance || 10,
      distanceUnit: 'Meters',
      method: 'Geodesic',
      dissolveOption: 'None',
      OutputName: JSON.stringify({
        serviceProperties: {
          name: name,
          serviceUrl,
          itemProperties: {
            itemId: serviceId
          }
        }
      }),
      context: JSON.stringify({
        extent: {
          xmin: extent[0],
          ymin: extent[1],
          xmax: extent[2],
          ymax: extent[3],
          spatialReference: {
            wkid,
            latestWkid: wkid
          }
        },
        outSR: {
          spatialReference: {
            wkid
          }
        }
      })
    },
    analysisToken: true
  });
}

/**
 * 创建叠加分析
 * @param {String} serviceUrl 服务 URL，创建服务返回
 * @param {String} serviceId 服务 ID，创建服务返回
 * @param {String} name overlay 服务名称
 * @param {Object} inputLayer 输入图层
 * @param {Object} overlayLayer 叠加图层
 * @param {String} [overlayType] 叠加图层
 * @returns {Promise}
 */
export function createOverlayAnalysis({
  serviceUrl,
  serviceId,
  name,
  inputLayer,
  overlayLayer,
  overlayType = 'Intersect'
}) {
  return request({
    url: `/server/rest/services/System/GeoAnalyticsTools/GPServer/OverlayLayers/submitJob`,
    method: 'post',
    data: {
      f: 'json',
      inputLayer: JSON.stringify(inputLayer),
      overlayLayer: JSON.stringify(overlayLayer),
      overlayType,
      dissolveOption: 'None',
      OutputName: JSON.stringify({
        serviceProperties: {
          name: name,
          serviceUrl,
          itemProperties: {
            itemId: serviceId
          }
        }
      })
    },
    analysisToken: true
  });
}

/**
 * 创建汇总分析
 * @param {String} serviceUrl 服务 URL，创建服务返回
 * @param {String} serviceId 服务 ID，创建服务返回
 * @param {String} name summary 服务名称
 * @param {Object} inputLayer 输入图层
 * @return {Promise}
 */
export function createSummaryAnalysis({
  serviceUrl,
  serviceId,
  name,
  inputLayer
}) {
  return request({
    url:
      '/server/rest/services/System/GeoAnalyticsTools/getAnalysisProgress/SummarizeAttributes/submitJob',
    method: 'post',
    data: {
      f: 'json',
      inputLayer: JSON.stringify(inputLayer),
      fields: 'DLBM_overlay,DLMC_overlay,ZLDWDM_overlay,ZLDWMC_overlay',
      summaryFields: JSON.stringify([
        {
          statisticType: 'SUM',
          onStatisticField: 'TBDLMJ_overlay'
        }
      ]),
      OutputName: JSON.stringify({
        serviceProperties: {
          name,
          serviceUrl,
          itemProperties: {
            itemId: serviceId
          }
        }
      })
    },
    analysisToken: true
  });
}

/**
 * 获取分析进度
 * @param {String} name 服务名称
 * @param {String} id jobID
 * @returns {Promise}
 */
export function getAnalysisProgress(name, id) {
  return request({
    url: `/server/rest/services/System/GeoAnalyticsTools/GPServer/${name}/jobs/${id}`,
    params: {
      f: 'json'
    },
    analysisToken: true
  });
}

/**
 * 获取分析结果（features）
 * @param {String} name 服务名称
 * @param {String} id 参考系 ID
 * @returns {Promise}
 */
export function getAnalysisResult(name, id) {
  return request({
    url: `/server/rest/services/Hosted/${name}/FeatureServer/0/query`,
    method: 'post',
    data: {
      where: '1=1',
      returnGeometry: true,
      outFields: '*',
      outSR: id,
      f: 'json',
      objectIds: '',
      returnDistinctValues: '',
      orderByFields: ''
    }
  });
}
