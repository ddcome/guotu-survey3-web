import axios from 'axios';
import stringify from 'qs/lib/stringify';

import { analysisAuth, gisServerAuth } from './gis-server-auth';
import { getAnalysisToken, getToken } from '../api/token';
import { SERVER_CONFIG } from '../config/server';
import { errorMessage } from '../../utils/error-handler';

export default commonRequest;

/**
 * 创建 axios 服务实例
 * @description
 * 该方法所需的参数如下：
 * @param {String} url 请求的 url
 * @param {String} method 请求方式 `get/post`
 * @param {Object} data post 请求的参数
 * @param {Object} params get 请求的参数
 * @param {Boolean} analysisToken 是否需要分析用的 token，否则为普通的 token
 */
const axiosInstance = axios.create({
  // withCredentials: true,
  timeout: 20000
});

// 请求拦截
axiosInstance.interceptors.request.use(
  (config) => {
    // 设置 baseURL
    if (!config.baseURL) {
      config.baseURL = SERVER_CONFIG.arcgis;
    }

    // 设置 token
    if (!config.url.includes('/generateToken')) {
      config = addToken(config);
    } else {
      config = postDataTransform(config);
    }

    return config;
  },
  (error) => {
    errorMessage(error);
    return Promise.reject(error);
  }
);

// 响应拦截
axiosInstance.interceptors.response.use(
  (response) => {
    const data = response.data;
    if (!data || data.error) {
      if (data.error === 'TOKEN INVALID') {
        return autoGetToken(response.config.analysisToken);
      } else {
        return Promise.reject(data);
      }
    } else {
      return data;
    }
  },
  (error) => {
    errorMessage(error);
    return Promise.reject(error);
  }
);

/**
 * 通用的请求服务
 * @param {AxiosRequestConfig} config
 * @return {Promise<AxiosResponse>}
 */
function commonRequest(config) {
  return axiosInstance(config).catch((error) => {
    errorMessage(error);
    return Promise.reject(error);
  });
}

/**
 * 将 token 添加到请求参数中
 * @param {Object} config 请求配置
 * @returns {Promise}
 */
function addToken(config) {
  return autoGetToken(config.analysisToken).then((token) => {
    if (config.method === 'post') {
      config.data = config.data || {};
      config.data.token = token;
      postDataTransform(config);
    } else if (config.method === 'get') {
      config.params = config.params || {};
      config.params.token = token;
    }
    return config;
  });
}

/**
 * post 参数转换
 * @param {Object} config 请求配置
 */
function postDataTransform(config) {
  if (config.method === 'post') {
    config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    config.data = stringify(config.data);
  }
  return config;
}

// 自动获取 token
function autoGetToken(analysisToken) {
  // 是否为分析用的 token
  const isAnalysisToken = analysisToken === true;
  const token = (isAnalysisToken ? analysisAuth : gisServerAuth).getToken();

  // 判断 token 是否存在，不存在发送获取 token 的请求
  if (token) {
    return Promise.resolve(token);
  } else {
    return (isAnalysisToken ? getAnalysisToken() : getToken()).then(() =>
      autoGetToken(analysisToken)
    );
  }
}
