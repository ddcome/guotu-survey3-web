/**
 * 1. 要素拾取的激活状态切换
 * 2. 监听要素拾取的结果并传递给 modal 进行展示信息（逻辑在 afterInitWebgis 中）
 * @example
 * ```
 * import controlsFeatureSelect from './controls-feature-select';
 *
 * export default {
 *   mixins: [controlsFeatureSelect], // 加入
 *   methods: {
 *     doSomeThing() {
 *       this.featureSelectToggle(true); // 激活要素拾取
 *       this.featureSelectToggle(false); // 关闭要素拾取
 *     }
 *   }
 * }
 * ```
 */
import { privateEventHubInject } from './private-event-hub';
import { webgisInject } from './webgis-init';
import { errorMessage } from '../utils/error-handler';

export default {
  mixins: [privateEventHubInject, webgisInject],
  data() {
    return {
      featureSelectActive: false
    };
  },
  methods: {
    featureSelectToggle(state = !this.featureSelectActive) {
      this.featureSelectActive = state;
      this.$webgis.modules.featureSelect.toggleActive(state);
    },
    /**
     * 这里监听要素拾取事件
     */
    afterInitWebgis() {
      const featureSelect = this.$webgis.modules.featureSelect;
      featureSelect.on('end', (res) => {
        if (res.state) {
          const featureData = res.data;
          if (featureData.length) {
            this.featureSelectToggle(false);
            this.$eventHub.$emit('changeModal', 'attribute-info', featureData);
          } else {
            this.$message.info('暂无数据');
            this.$eventHub.$emit('changeModal');
          }
        } else {
          errorMessage(res.message);
          this.$eventHub.$emit('changeModal');
        }
      });
      featureSelect.on('select', (BSM) =>
        this.$eventHub.$emit('featureSelectItem', BSM)
      );
    }
  },
  created() {
    this.$eventHub.$on('featureSelectToggle', this.featureSelectToggle);
  },
  beforeDestroy() {
    this.$eventHub.$off('featureSelectToggle', this.featureSelectToggle);

    // off listener
    if (this.$webgis) {
      const featureSelect = this.$webgis.modules.featureSelect;
      featureSelect.offAll();
    }
  }
};
