/**
 * 1. 主组件的 props 配置
 * 2. 组件的 props 以 webgisConfig 进行传递（webgisPropsProvide）
 * 3. 后代通过 `webgisPropsInject` 注入 `webgisConfig` 使用 props 参数
 */
import { modules } from '../gis/core/modules';
import { warnMessage } from '../utils/error-handler';

// 通用 props
const props = {
  // 模块配置
  modules: {
    type: Array,
    default() {
      return [];
    },
    validator(val) {
      let isNotFound = false;
      let module;
      for (let i = 0; i < val.length; i++) {
        module = val[i];
        if (!modules.hasOwnProperty(module)) {
          isNotFound = true;
          break;
        }
      }
      if (isNotFound) {
        warnMessage(`module ${module} is not found.`);
        return false;
      } else {
        return true;
      }
    }
  },
  // 是否展示控件
  showControls: {
    type: Boolean,
    default: true
  },
  // 是否展示侧边栏
  showAside: Boolean,
  // 选项配置
  options: {
    type: Object,
    default() {
      return {};
    }
  },
  // 控制模块
  controls: {
    type: Array || String,
    default() {
      return ['mousePosition', 'scaleLine'];
    }
  },
  // 分屏状态
  splitScreen: Boolean
};

export const webgisProps = {
  props
};

// 注册用混入对象
export const webgisPropsProvide = {
  props,
  provide() {
    return {
      $_webgisPropsProvide: this
    };
  },
  computed: {
    webgisConfig() {
      return {
        modules: this.modules,
        showControls: this.showControls,
        showAside: this.showAside,
        options: this.options,
        controls: this.controls
      };
    }
  }
};

// 注入用混入对象
export const webgisPropsInject = {
  inject: ['$_webgisPropsProvide'],
  data() {
    return {
      webgisConfig: {}
    };
  },
  created() {
    this.webgisConfig = this.$_webgisPropsProvide.webgisConfig;
    this.$_webgisPropsProvide.$watch('webgisConfig', (newVal) => {
      this.webgisConfig = newVal;
    });
  }
};
