/*!
 * vue-webgis v0.7.3
 */

import 'core-js/modules/web.dom.iterable';
import 'core-js/library/fn/object/define-property';
import { a as _classCallCheck, b as _defineProperty, _ as _createClass } from './chunk-82f2c815.js';
import 'core-js/library/fn/symbol/iterator';
import { _ as _inherits, a as _possibleConstructorReturn, b as _getPrototypeOf, c as _assertThisInitialized } from './chunk-537b1685.js';
import 'core-js/library/fn/symbol';
import 'core-js/library/fn/object/get-prototype-of';
import 'core-js/library/fn/object/set-prototype-of';
import 'core-js/library/fn/object/create';
import { T as ToggleActive } from './chunk-dd3bd2eb.js';
import Overlay from 'ol/Overlay.js';
import { unByKey } from 'ol/Observable.js';
import LineString from 'ol/geom/LineString';
import Polygon from 'ol/geom/Polygon';

var Measure =
/*#__PURE__*/
function (_ToggleActive) {
  _inherits(Measure, _ToggleActive);

  function Measure(map) {
    var _this;

    _classCallCheck(this, Measure);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Measure).call(this));

    _defineProperty(_assertThisInitialized(_this), "_map", void 0);

    _defineProperty(_assertThisInitialized(_this), "_olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "_drawInteraction", void 0);

    _defineProperty(_assertThisInitialized(_this), "_measureTooltips", []);

    _this._map = map;
    _this._olMap = map.olMap;
    _this._drawInteraction = map.interactions.draw;
    return _this;
  }

  _createClass(Measure, [{
    key: "activateHandle",
    value: function activateHandle(type) {
      this._addInteraction(type);
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._removeInteraction();
    }
  }, {
    key: "_addInteraction",
    value: function _addInteraction(type) {
      var _this2 = this;

      this._drawInteraction.toggleActive(true, type);

      var listener;
      var measureTooltip;
      var measureTooltipElement;

      this._drawInteraction.on('drawstart', function (resultData) {
        var measureTooltipObj = _this2._createMeasureTooltip();

        measureTooltip = measureTooltipObj.measureTooltip;
        measureTooltipElement = measureTooltipObj.measureTooltipElement;
        var tooltipCoordinate;
        listener = resultData.geometry.on('change', function (evt) {
          var geom = evt.target;

          var output = _this2._map.formatGeometrySize(geom).str;

          if (geom instanceof Polygon) {
            tooltipCoordinate = geom.getInteriorPoint().getCoordinates();
          } else if (geom instanceof LineString) {
            tooltipCoordinate = geom.getLastCoordinate();
          }

          measureTooltipElement.innerHTML = output;
          measureTooltip.setPosition(tooltipCoordinate);
        });
      });

      this._drawInteraction.on('drawend', function () {
        measureTooltip.setOffset([0, -7]);
        measureTooltip = null;
        measureTooltipElement = null;
        unByKey(listener);
      });
    }
  }, {
    key: "_removeInteraction",
    value: function _removeInteraction() {
      this._drawInteraction.toggleActive(false);

      this._drawInteraction.offAll();
    }
  }, {
    key: "_createMeasureTooltip",
    value: function _createMeasureTooltip() {
      var measureTooltipElement = document.createElement('div');
      measureTooltipElement.className = 'webgis-measure-tooltip webgis-measure-tooltip-measure';
      var measureTooltip = new Overlay({
        element: measureTooltipElement,
        offset: [0, -15],
        positioning: 'bottom-center'
      });

      this._measureTooltips.push(measureTooltip);

      this._olMap.addOverlay(measureTooltip);

      return {
        measureTooltip: measureTooltip,
        measureTooltipElement: measureTooltipElement
      };
    }
  }, {
    key: "_removeMeasureTooltip",
    value: function _removeMeasureTooltip() {
      var _this3 = this;

      this._measureTooltips.forEach(function (item) {
        return _this3._olMap.removeOverlay(item);
      });

      this._measureTooltips = [];
    }
  }]);

  return Measure;
}(ToggleActive);

export default Measure;
//# sourceMappingURL=measure-0e5368de.js.map
