/*!
 * vue-webgis v0.7.3
 */

import 'core-js/modules/es6.function.name';
import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.string.includes';
import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.object.keys';
import { w as warnMessage } from './chunk-8430f437.js';
import isArray$1 from 'core-js/library/fn/array/is-array';
import from from 'core-js/library/fn/array/from';
import isIterable$1 from 'core-js/library/fn/is-iterable';
import { _ as _createClass, a as _classCallCheck, b as _defineProperty } from './chunk-82f2c815.js';
import 'core-js/modules/es6.regexp.split';

var isArray = isArray$1;

function _arrayWithoutHoles(arr) {
  if (isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var from_1 = from;

var isIterable = isIterable$1;

function _iterableToArray(iter) {
  if (isIterable(Object(iter)) || Object.prototype.toString.call(iter) === "[object Arguments]") return from_1(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function paramToArray(param) {
  if (!Array.isArray(param)) {
    if (typeof param === 'string' && param.includes(',')) {
      param = param.split(',').map(function (item) {
        return item.trim();
      });
    } else if (param || param === 0) {
      param = [param];
    } else {
      param = [];
    }
  } else {
    param = _toConsumableArray(param);
  }

  return param;
}

var GISEvent =
/*#__PURE__*/
function () {
  function GISEvent(eventName) {
    var _this = this;

    _classCallCheck(this, GISEvent);

    _defineProperty(this, "listenerGroup", {});

    var eventNames = paramToArray(eventName);
    eventNames.forEach(function (key) {
      return _this.listenerGroup[key] = [];
    });
  }

  _createClass(GISEvent, [{
    key: "dispatch",
    value: function dispatch(eventName) {
      var _this2 = this;

      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      var eventNames = paramToArray(eventName);
      eventNames.forEach(function (name) {
        return _this2.listenerGroup[name].forEach(function (fn) {
          return fn.apply(void 0, params);
        });
      });
    }
  }, {
    key: "on",
    value: function on(eventName, callback) {
      if (this.listenerGroup.hasOwnProperty(eventName)) {
        this.listenerGroup[eventName].push(callback);
      } else {
        GISEvent.eventNameError(eventName);
      }
    }
  }, {
    key: "off",
    value: function off(eventName, callback) {
      var _this3 = this;

      var eventNames = paramToArray(eventName);
      eventNames.forEach(function (eventName) {
        if (_this3.listenerGroup.hasOwnProperty(eventName)) {
          var listeners = _this3.listenerGroup[eventName];
          var index = listeners.indexOf(callback);

          if (index >= 0) {
            listeners.splice(index, 1);
          }
        } else {
          GISEvent.eventNameError(eventName);
        }
      });
    }
  }, {
    key: "offAll",
    value: function offAll() {
      var _this4 = this;

      Object.keys(this.listenerGroup).forEach(function (key) {
        _this4.listenerGroup[key] = [];
      });
    }
  }], [{
    key: "eventNameError",
    value: function eventNameError(eventName) {
      warnMessage("\u4E0D\u5B58\u5728 ".concat(eventName, " \u4E8B\u4EF6\uFF0C\u4E8B\u4EF6\u662F\u5426\u5DF2\u7ECF\u6CE8\u518C\uFF0C\u4E8B\u4EF6\u540D\u662F\u5426\u6B63\u786E\uFF1F"));
    }
  }]);

  return GISEvent;
}();

export { GISEvent as G, _toConsumableArray as _, paramToArray as p };
//# sourceMappingURL=chunk-2f41c7fa.js.map
