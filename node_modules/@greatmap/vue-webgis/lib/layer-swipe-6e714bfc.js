/*!
 * vue-webgis v0.7.3
 */

import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.object.keys';
import 'core-js/library/fn/object/define-property';
import { a as _classCallCheck, b as _defineProperty, _ as _createClass } from './chunk-82f2c815.js';
import 'core-js/library/fn/symbol/iterator';
import { _ as _inherits, a as _possibleConstructorReturn, b as _getPrototypeOf, c as _assertThisInitialized } from './chunk-537b1685.js';
import 'core-js/library/fn/symbol';
import 'core-js/library/fn/object/get-prototype-of';
import 'core-js/library/fn/object/set-prototype-of';
import 'core-js/library/fn/object/create';
import { T as ToggleActive } from './chunk-dd3bd2eb.js';
import { unByKey } from 'ol/Observable';

var LayerSwipe =
/*#__PURE__*/
function (_ToggleActive) {
  _inherits(LayerSwipe, _ToggleActive);

  function LayerSwipe(_map) {
    var _this;

    _classCallCheck(this, LayerSwipe);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerSwipe).call(this));

    _defineProperty(_assertThisInitialized(_this), "_value", 50);

    _defineProperty(_assertThisInitialized(_this), "_map", void 0);

    _defineProperty(_assertThisInitialized(_this), "_olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "_layer", void 0);

    _defineProperty(_assertThisInitialized(_this), "_type", void 0);

    _defineProperty(_assertThisInitialized(_this), "_listener", {
      precompose: null,
      postcompose: null
    });

    _defineProperty(_assertThisInitialized(_this), "_eventHub", void 0);

    _defineProperty(_assertThisInitialized(_this), "_updateLayer", function () {
      var map = _this._map;
      var firstLayer = map.getTopVisibleLayer();

      if (firstLayer) {
        _this._layer = map.getOlLayer(firstLayer.id)[0];
      }
    });

    _this._map = _map;
    _this._olMap = _map.olMap;
    _this._eventHub = _map.eventHub;
    _this._restart = _this._restart.bind(_assertThisInitialized(_this));
    _this._rectangleClip = _this._rectangleClip.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(LayerSwipe, [{
    key: "changeType",
    value: function changeType(type) {
      this._type = type;

      this._restart();
    }
  }, {
    key: "changeValue",
    value: function changeValue(value) {
      if (value < 0 || value > 100) {
        value = value < 0 ? 0 : 100;
      }

      this._value = value;

      this._olMap.render();
    }
  }, {
    key: "activateHandle",
    value: function activateHandle() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._type || 'vertical';
      this._type = type;

      this._updateLayer();

      this._listener.precompose = this._layer.on('precompose', this._rectangleClip);
      this._listener.postcompose = this._layer.on('postcompose', function (event) {
        var ctx = event.context;
        ctx.restore();
      });

      this._eventHub.on('layerChange', this._restart);
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._layer = null;
      var listener = this._listener;
      Object.keys(listener).forEach(function (key) {
        unByKey(listener[key]);
        listener[key] = null;
      });

      this._olMap.render();

      this._eventHub.off('layerChange', this._restart);
    }
  }, {
    key: "_restart",
    value: function _restart() {
      this.toggleActive(true);
    }
  }, {
    key: "_rectangleClip",
    value: function _rectangleClip(event) {
      var type = this._type;
      var ctx = event.context;
      var canvas = ctx.canvas;
      var canvasWidth = canvas.width,
          canvasHeight = canvas.height;
      var percent = this._value / 100;
      var x = 0,
          y = 0,
          width = 0,
          height = 0;

      if (type === 'vertical') {
        width = canvasWidth * percent;
        height = canvasHeight;
      } else if (type === 'horizontal') {
        width = canvasWidth;
        height = canvasHeight * percent;
        y = canvasHeight - height;
      }

      ctx.save();
      ctx.beginPath();
      ctx.rect(x, y, width, height);
      ctx.clip();
    }
  }]);

  return LayerSwipe;
}(ToggleActive);

export default LayerSwipe;
//# sourceMappingURL=layer-swipe-6e714bfc.js.map
