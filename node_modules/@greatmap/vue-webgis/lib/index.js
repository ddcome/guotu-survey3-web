/*!
 * vue-webgis v0.7.3
 */

import Vue from 'vue';
import 'core-js/modules/es6.function.name';
import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.string.includes';
import 'core-js/modules/es6.array.find';
import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.object.keys';
import { w as warnMessage, e as errorMessage } from './chunk-8430f437.js';
import 'core-js/library/fn/array/is-array';
import { p as paramToArray, _ as _toConsumableArray, G as GISEvent } from './chunk-2f41c7fa.js';
import 'core-js/library/fn/array/from';
import 'core-js/library/fn/is-iterable';
import 'core-js/modules/es6.string.iterator';
import 'core-js/modules/es6.set';
import 'core-js/library/fn/object/get-own-property-descriptor';
import { _ as _objectSpread } from './chunk-786165bb.js';
import 'core-js/library/fn/object/get-own-property-symbols';
import 'core-js/library/fn/object/keys';
import 'core-js/library/fn/object/define-property';
import { _ as _createClass, a as _classCallCheck, b as _defineProperty } from './chunk-82f2c815.js';
import 'core-js/modules/es7.object.entries';
import { register } from 'ol/proj/proj4';
import proj4 from 'proj4';
import 'ol/ol.css';
import 'core-js/modules/es6.array.from';
import 'core-js/library/fn/symbol/iterator';
import { _ as _inherits, a as _possibleConstructorReturn, b as _getPrototypeOf, c as _assertThisInitialized, d as _typeof } from './chunk-537b1685.js';
import 'core-js/library/fn/symbol';
import 'core-js/library/fn/object/get-prototype-of';
import 'core-js/library/fn/object/set-prototype-of';
import 'core-js/library/fn/object/create';
import OlMap from 'ol/Map';
import { Projection } from 'ol/proj';
import { defaults } from 'ol/control';
import { defaults as defaults$1 } from 'ol/interaction';
import OlView from 'ol/View';
import camelCase from 'lodash/camelCase';
import Select from 'ol/interaction/Select';
import VectorSource from 'ol/source/Vector';
import VectorLayer from 'ol/layer/Vector';
import 'core-js/modules/es7.symbol.async-iterator';
import 'core-js/modules/es6.symbol';
import treeToFlatArray from 'operation-tree-node/dist/treeToFlatArray.esm';
import treeEach from 'operation-tree-node/dist/treeEach.esm';
import treeMerge from 'operation-tree-node/dist/treeMerge.esm';
import treeCheck from 'operation-tree-node/dist/treeCheck.esm';
import 'core-js/modules/es6.regexp.split';
import 'ol/source/TileWMS';
import 'ol/layer/Tile';
import 'ol/source/XYZ';
import 'ol/tilegrid/TileGrid';
import 'ol/source/ImageArcGISRest';
import 'ol/layer/Image';
import { S as SERVER_CONFIG } from './chunk-bc626433.js';
export { u as updateServerAPI } from './chunk-bc626433.js';
import { L as LayerManagement } from './chunk-2b89b3e5.js';
import 'core-js/modules/es6.array.sort';
import 'core-js/modules/es6.regexp.replace';
import 'axios';
import 'qs/lib/stringify';
import { r as request, c as checkValidArray } from './chunk-81d749a9.js';
import { extend } from 'ol/extent';
import OlDragPan from 'ol/interaction/DragPan';
import { T as ToggleActive } from './chunk-dd3bd2eb.js';
import 'ol/interaction/DragBox';
import 'ol/Feature';
import 'core-js/modules/es6.reflect.own-keys';
import 'core-js/library/fn/reflect/construct';
import { c as classMixin } from './chunk-cda7b711.js';
import { B as BoxSelection } from './chunk-03adc81b.js';
import Style from 'ol/style/Style';
import Fill from 'ol/style/Fill';
import Stroke from 'ol/style/Stroke';
import EsriJSON from 'ol/format/EsriJSON';
import { getArea, getLength } from 'ol/sphere';
import { saveAs } from 'file-saver';
import OlMousePosition from 'ol/control/MousePosition';
import { format } from 'ol/coordinate';
import OlScaleLine from 'ol/control/ScaleLine';
import Overlay from 'ol/Overlay.js';
import OlDraw from 'ol/interaction/Draw.js';
import OlDragZoom from 'ol/interaction/DragZoom';
import { mouseOnly } from 'ol/events/condition';
import 'core-js/modules/es6.number.constructor';
import SvgIcon from 'vue-awesome/components/Icon';
import 'vue-awesome/icons/arrows-alt';
import 'vue-awesome/icons/long-arrow-alt-left';
import 'vue-awesome/icons/long-arrow-alt-right';
import 'vue-awesome/icons/search-plus';
import 'vue-awesome/icons/search-minus';
import 'vue-awesome/icons/globe-americas';
import 'vue-awesome/icons/lock';
import 'vue-awesome/icons/layer-group';
import ElSelectTree from 'el-select-tree';
import 'core-js/modules/es7.object.values';
import chunk from 'lodash/chunk';

var modules = {
  BufferAnalysis: function BufferAnalysis() {
    return import('./buffer-analysis-8c02bea6.js');
  },
  HistoryRecord: function HistoryRecord() {
    return import('./history-record-cc57ce41.js');
  },
  FeatureSelect: function FeatureSelect() {
    return import('./feature-select-4964532a.js');
  },
  ImageLayer: function ImageLayer() {
    return import('./image-layer-ad3ffee6.js');
  },
  Measure: function Measure() {
    return import('./measure-0e5368de.js');
  },
  LayerSwipe: function LayerSwipe() {
    return import('./layer-swipe-6e714bfc.js');
  },
  DiffAnalysis: function DiffAnalysis() {
    return import('./diff-analysis-e4426044.js');
  },
  IntersectAnalysis: function IntersectAnalysis() {
    return import('./intersect-analysis-760289f0.js');
  }
};
function getModule(name) {
  if (modules.hasOwnProperty(name)) {
    return modules[name]().then(function (module) {
      return module.default;
    });
  } else {
    var msg = "".concat(name, " \u6A21\u5757\u4E0D\u5B58\u5728\uFF0C\u662F\u5426\u5DF2\u7ECF\u6CE8\u518C\uFF1F");
    return Promise.reject(msg);
  }
}

var props = {
  modules: {
    type: Array,
    default: function _default() {
      return [];
    },
    validator: function validator(val) {
      var isNotFound = false;
      var module;

      for (var i = 0; i < val.length; i++) {
        module = val[i];

        if (!modules.hasOwnProperty(module)) {
          isNotFound = true;
          break;
        }
      }

      if (isNotFound) {
        warnMessage("module ".concat(module, " is not found."));
        return false;
      } else {
        return true;
      }
    }
  },
  showControls: {
    type: Boolean,
    default: true
  },
  showAside: Boolean,
  options: {
    type: Object,
    default: function _default() {
      return {};
    }
  },
  controls: {
    type: Array || String,
    default: function _default() {
      return ['mousePosition', 'scaleLine'];
    }
  },
  splitScreen: Boolean
};
var webgisProps = {
  props: props
};
var webgisPropsProvide = {
  props: props,
  provide: function provide() {
    return {
      $_webgisPropsProvide: this
    };
  },
  computed: {
    webgisConfig: function webgisConfig() {
      return {
        modules: this.modules,
        showControls: this.showControls,
        showAside: this.showAside,
        options: this.options,
        controls: this.controls
      };
    }
  }
};
var webgisPropsInject = {
  inject: ['$_webgisPropsProvide'],
  data: function data() {
    return {
      webgisConfig: {}
    };
  },
  created: function created() {
    var _this = this;

    this.webgisConfig = this.$_webgisPropsProvide.webgisConfig;
    this.$_webgisPropsProvide.$watch('webgisConfig', function (newVal) {
      _this.webgisConfig = newVal;
    });
  }
};

var defaultEpsg = {
  'EPSG:4490': '+proj=longlat +ellps=GRS80 +no_defs',
  'EPSG:4610': '+proj=longlat +a=6378140 +b=6356755.288157528 +no_defs'
};
function registerEPSG(epsgConfig) {
  var epsg = _objectSpread({}, defaultEpsg, epsgConfig);

  proj4.defs(Object.entries(epsg));
  register(proj4);
}

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".ol-mouse-position{top:auto;right:8px;bottom:8px;left:auto;background:rgba(0,60,136,.3);font-size:13px;color:#fff;border-radius:4px}.ol-mouse-position>p{padding:2px 6px}.webgis-measure-tooltip{position:relative;background:rgba(0,0,0,.5);border-radius:4px;color:#fff;padding:4px 8px;opacity:.7;white-space:nowrap;font-size:13px}.webgis-measure-tooltip-measure{opacity:1;font-weight:700}.webgis-measure-tooltip-measure:before{border-top:6px solid rgba(0,0,0,.5);border-right:6px solid transparent;border-left:6px solid transparent;content:\"\";position:absolute;bottom:-6px;margin-left:-7px;left:50%}.webgis-hidden{display:none}";
styleInject(css);

function mergeConfig(source, config) {
  if (config instanceof Object) {
    var item, sourceItem;

    for (var key in config) {
      if (config.hasOwnProperty(key)) {
        item = config[key];
        sourceItem = source[key];

        if (item || item === 0) {
          if (item instanceof Object) {
            if (!sourceItem) {
              source[key] = item;
            } else {
              mergeConfig(sourceItem, item);
            }
          } else {
            source[key] = item;
          }
        }
      }
    }
  }
}

var defaultVisibleService = {
  land: '',
  region: '',
  special: '',
  year: '',
  scale: '',
  layer: ''
};
var defaultLayerConfig = {
  zoomThreshold: 0
};
function setDefaultLayerConfig(config) {
  mergeConfig(defaultLayerConfig, config);
}
function setDefaultVisibleService(config) {
  mergeConfig(defaultVisibleService, config);
}

var LayerTree =
/*#__PURE__*/
function () {
  function LayerTree(olMap) {
    var _this = this;

    _classCallCheck(this, LayerTree);

    _defineProperty(this, "showLayers", []);

    _defineProperty(this, "treeNodes", []);

    _defineProperty(this, "treeLayers", []);

    _defineProperty(this, "treeLayersIds", []);

    _defineProperty(this, "_treeNodesFlat", []);

    _defineProperty(this, "_projection", void 0);

    _defineProperty(this, "_layerType", void 0);

    _defineProperty(this, "_layerManagement", void 0);

    this._projection = olMap.getView().getProjection();
    this._layerManagement = new LayerManagement(olMap);
    olMap.on('moveend', function () {
      return _this._updateOlLayer();
    });
  }

  _createClass(LayerTree, [{
    key: "checkChange",
    value: function checkChange(nodeId, checked) {
      var _this2 = this;

      var showLayers = this.showLayers;
      var needUpdate = false;
      var index;
      nodeId = paramToArray(nodeId);
      nodeId = treeCheck(this.treeNodes, nodeId).filter(function (item) {
        return _this2.treeLayersIds.includes(item);
      });
      nodeId.forEach(function (id) {
        index = showLayers.indexOf(id);

        if (index !== -1) {
          if (!checked) {
            showLayers.splice(index, 1);
            needUpdate = true;
          }
        } else if (checked) {
          showLayers.push(id);
          needUpdate = true;
        }
      });

      if (needUpdate) {
        this.layerChange();
        this.eventHub.dispatch('checkChange', nodeId, checked);
      }
    }
  }, {
    key: "layerChange",
    value: function layerChange(showLayers) {
      if (showLayers) {
        this.showLayers = paramToArray(showLayers);
      }

      this._updateNodeChecked();

      this._updateLayersVisible();

      this.eventHub.dispatch('layerChange', this.showLayers);
    }
  }, {
    key: "createLayerTree",
    value: function createLayerTree() {
      var _this3 = this;

      var groupLayers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var showLayers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var treeNodes = [];
      groupLayers.forEach(function (item) {
        return treeNodes.push(_this3._createNode(item));
      });
      this.treeNodes = treeMerge(treeNodes, function (curr, next) {
        return curr.letter && curr.letter === next.letter;
      });
      treeEach(this.treeNodes, function (node, index, arr, parent) {
        return node.parent = parent;
      });

      this._updateTreeData();

      var nodeMaxIndex = this._treeNodesFlat.length - 1;

      this._treeNodesFlat.forEach(function (item, index) {
        return item.zIndex = nodeMaxIndex - index;
      });

      this._updateOlLayer(true);

      showLayers = paramToArray(showLayers);

      if (!showLayers.length) {
        var lastNode = this.treeLayers.slice(-1)[0];
        showLayers.push(lastNode.id);
      }

      this.layerChange(showLayers);
    }
  }, {
    key: "setLayerOpacity",
    value: function setLayerOpacity(layerId, opacity) {
      var layers = this.getOlLayer(layerId);
      layers.forEach(function (item) {
        return item.setOpacity(opacity);
      });
    }
  }, {
    key: "setLayerSort",
    value: function setLayerSort(layerId, type) {
      var direction = type === 'down' ? 1 : -1;

      var node = this._treeNodesFlat.find(function (item) {
        return item.id === layerId;
      });

      var parentChildren = node.parent.children;
      var currIndex = parentChildren.indexOf(node);
      var nextIndex = currIndex + direction;
      var next = parentChildren[nextIndex];

      if (next) {
        var curr = parentChildren[currIndex];
        var _ref = [next.zIndex, curr.zIndex];
        curr.zIndex = _ref[0];
        next.zIndex = _ref[1];
        parentChildren.splice(currIndex, 0, parentChildren.splice(nextIndex, 1)[0]);

        this._updateLayersZIndex([curr, next]);

        this._updateTreeData();
      }
    }
  }, {
    key: "getOlLayer",
    value: function getOlLayer(layerId) {
      layerId = paramToArray(layerId);
      return this.treeLayers.filter(function (item) {
        return layerId.includes(item.id);
      }).map(function (item) {
        return item.olLayer;
      });
    }
  }, {
    key: "getTopVisibleLayer",
    value: function getTopVisibleLayer() {
      return this.treeLayers.find(function (item) {
        return item.checked;
      });
    }
  }, {
    key: "_createNode",
    value: function _createNode(configGroup) {
      var alias = configGroup.alias;
      var layers = configGroup.layers;
      var parentId = configGroup.id;
      var nodeLayer = layers.map(function (layer) {
        return {
          id: layer.id,
          letter: layer.letter,
          name: layer.caption,
          config: layer,
          configGroup: configGroup,
          nodeType: 'layer'
        };
      });
      return {
        id: Symbol(),
        letter: alias.landLetter,
        name: alias.land,
        config: configGroup,
        nodeType: 'DL',
        children: [{
          id: Symbol(),
          letter: alias.specialLetter,
          name: alias.special,
          config: configGroup,
          nodeType: 'ZT',
          children: [{
            id: Symbol(),
            letter: alias.regionLetter,
            name: alias.region,
            config: configGroup,
            nodeType: 'XZQ',
            children: [{
              id: parentId,
              letter: alias.yearLetter,
              name: alias.year,
              config: configGroup,
              nodeType: 'ND',
              children: nodeLayer
            }]
          }]
        }]
      };
    }
  }, {
    key: "_updateOlLayer",
    value: function _updateOlLayer() {
      var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var zoomThreshold = defaultLayerConfig.zoomThreshold;
      var layerType = !zoomThreshold || this.olView.getZoom() >= zoomThreshold ? 'wms' : 'wmts';

      if (!reload && layerType === this._layerType) {
        return;
      }

      this._layerType = layerType;
      var layerManagement = this._layerManagement;
      var layerConfig, layerConfigGroup, olLayer;
      this.treeLayers.forEach(function (item) {
        layerConfig = item.config;
        layerConfigGroup = item.configGroup;
        olLayer = item.olLayer;

        if (olLayer) {
          layerManagement.removeLayer(olLayer);
        }

        item.olLayer = layerManagement.addLayer(layerConfig.type === 'MapServer' ? layerType : 'image', {
          serverId: layerConfig.serverId,
          serverType: layerConfig.type,
          serverIdWMS: layerConfig.serverIdWMS,
          serviceCode: layerConfig.serviceCode,
          extent: layerConfigGroup.extent,
          zIndex: item.zIndex,
          resolutions: layerConfigGroup.resolutions,
          tileInfo: layerConfigGroup.tileInfo,
          projection: layerConfigGroup.epsg,
          visible: item.checked
        });
      });
    }
  }, {
    key: "_updateTreeData",
    value: function _updateTreeData() {
      this._treeNodesFlat = treeToFlatArray(this.treeNodes);
      this.treeLayers = this._treeNodesFlat.filter(function (item) {
        return item.nodeType === 'layer';
      });
      this.treeLayersIds = this.treeLayers.map(function (item) {
        return item.id;
      });
    }
  }, {
    key: "_updateLayersVisible",
    value: function _updateLayersVisible() {
      this.treeLayers.forEach(function (item) {
        item.olLayer.setVisible(item.checked);
      });
    }
  }, {
    key: "_updateNodeChecked",
    value: function _updateNodeChecked() {
      var checkedIds = treeCheck(this.treeNodes, this.showLayers);
      this.treeLayers.forEach(function (node) {
        node.checked = checkedIds.includes(node.id);
      });
    }
  }, {
    key: "_updateLayersZIndex",
    value: function _updateLayersZIndex(node) {
      node.forEach(function (item) {
        item.olLayer.setZIndex(item.zIndex);
      });
    }
  }]);

  return LayerTree;
}();

function getServiceList() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Map Service';
  return request({
    url: SERVER_CONFIG.arcgisServiceList,
    method: 'post',
    data: {
      q: "owner:".concat(SERVER_CONFIG.arcgisUsername, " orgid:0123456789ABCDEF (type:(\"").concat(type, "\")\n      -typekeywords:(\"Tiled\" OR \"Hosted\") -type:(\"Web Map\" OR \"Web Mapping Application\" OR \"Shapefile\"))\n      ownerfolder:root -type:(\"Code Attachment\" OR \"Featured Items\")\n      -typekeywords:(\"MapAreaPackage\") -type:(\"Map Area\")"),
      f: 'json',
      num: 999
    },
    analysisToken: true
  });
}
function getServiceConfig(code) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MapServer';
  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return request({
    baseURL: SERVER_CONFIG.arcgisQuery,
    url: "/arcgis/rest/services/".concat(code, "/").concat(type, "/").concat(id),
    method: 'post',
    data: {
      f: 'json'
    }
  });
}
function getServiceDetail(_ref) {
  var serviceCode = _ref.serviceCode,
      layerId = _ref.layerId,
      epsgNum = _ref.epsgNum,
      geometry = _ref.geometry,
      geometryType = _ref.geometryType,
      _ref$where = _ref.where,
      where = _ref$where === void 0 ? '1=1' : _ref$where,
      _ref$outFields = _ref.outFields,
      outFields = _ref$outFields === void 0 ? '*' : _ref$outFields,
      _ref$returnGeometry = _ref.returnGeometry,
      returnGeometry = _ref$returnGeometry === void 0 ? true : _ref$returnGeometry,
      _ref$groupByFieldsFor = _ref.groupByFieldsForStatistics,
      groupByFieldsForStatistics = _ref$groupByFieldsFor === void 0 ? '' : _ref$groupByFieldsFor,
      outStatistics = _ref.outStatistics;
  return request({
    baseURL: SERVER_CONFIG.arcgisQuery,
    url: "/arcgis/rest/services/".concat(serviceCode, "/MapServer/").concat(layerId, "/query"),
    method: 'post',
    data: {
      f: 'json',
      returnGeometry: returnGeometry,
      spatialRel: 'esriSpatialRelIntersects',
      geometry: geometry,
      geometryType: geometryType,
      outFields: outFields,
      inSR: epsgNum,
      outSR: epsgNum,
      groupByFieldsForStatistics: groupByFieldsForStatistics,
      outStatistics: outStatistics,
      where: where
    }
  });
}

var aliasMap = {
  land: {
    X: '现状',
    B: '基础地理',
    G: '规划',
    M: '管理',
    S: '社会经济'
  },
  region: {
    '621122': '陇西县',
    '510183': '邛崃市',
    '620102': '城关区',
    '620103': '七里河',
    '620100': '兰州市',
    '620104': '西固区',
    '620922': '瓜州县',
    '620923': '肃北区',
    '620000': '甘肃省'
  },
  scale: {
    G: '1:10000'
  },
  special: {
    TDLYXZ: '土地利用现状',
    TDGY: '土地供应',
    JCDL: '基础地理',
    JSYDXM: '建设用地项目'
  },
  year: {},
  layer: {
    PZWJSTD: '批准未建设土地',
    TDXZ: '土地利用现状',
    XZQ: '行政区',
    XJXZQ: '县级行政区',
    CJDCQ: '村级调查区',
    DLTB: '地类图斑',
    YJJBNTTB: '永久基本农田图斑',
    CZCDYD: '城镇村等用地',
    TDGY: '土地供应',
    YDBP: '用地报批'
  }
};
function setAliasMap(config) {
  mergeConfig(aliasMap, config);
}

var parseCheckReg = /^[A-Z]\d{6}[A-Z]{2,}\d{4}[A-Z_](YX|$)/;
var parseRules = {
  land: function land(code) {
    return code.slice(0, 1);
  },
  special: function special(code) {
    return code.replace(/^[A-Z]\d{6}/, '').replace(/\d{4}[A-Z_]+$/, '');
  },
  region: function region(code) {
    return code.slice(1, 7);
  },
  year: function year(code) {
    return code.replace(/^[A-Z]\d{6}[A-Z]+/, '').replace(/[A-Z_]+$/, '');
  },
  layer: function layer(code) {
    return code.replace(/.*\d/g, '').slice(1);
  }
};

var GISConfig =
/*#__PURE__*/
function () {
  function GISConfig() {
    _classCallCheck(this, GISConfig);
  }

  _createClass(GISConfig, [{
    key: "getMapConfig",
    value: function getMapConfig() {
      var _this = this;

      return Promise.all([getServiceList('Image Service'), getServiceList()]).then(function (res) {
        var results = res.reduce(function (curr, next) {
          return [].concat(_toConsumableArray(curr), _toConsumableArray(next.results));
        }, []);

        if (checkValidArray(results)) {
          var services = results.filter(function (item) {
            return parseCheckReg.test(item.title);
          }).map(function (item) {
            return {
              id: item.title,
              type: item.type === 'Map Service' ? 'MapServer' : 'ImageServer'
            };
          });

          if (services.length) {
            return _this.getMultiService(services);
          } else {
            errorMessage('获取地图配置数据全部无效');
            return Promise.reject(res);
          }
        } else {
          errorMessage("\u83B7\u53D6\u5730\u56FE\u914D\u7F6E\u4E3A\u7A7A");
          return Promise.reject(res);
        }
      });
    }
  }, {
    key: "getMultiService",
    value: function getMultiService(services) {
      var _this2 = this;

      return Promise.all(services.map(function (item) {
        if (typeof item === 'string') {
          item = {
            id: item,
            type: 'MapServer'
          };
        }

        var _item = item,
            id = _item.id,
            type = _item.type;
        return getServiceConfig(id, type).then(function (restRes) {
          var result = [];

          if (restRes) {
            if (!restRes.layers && type === 'ImageServer') {
              restRes.layers = [{
                id: '',
                name: id
              }];
            }

            if (restRes.layers instanceof Array) {
              restRes.layers.forEach(function (layer, index, arr) {
                layer.layerLength = arr.length;
                result.push(_this2._formatConfig(id, layer.name, _objectSpread({}, restRes, {
                  type: type,
                  layers: [layer]
                })));
              });
            }
          }

          return result;
        });
      })).then(function (res) {
        return res.filter(function (item) {
          return item instanceof Array;
        }).reduce(function (current, next) {
          return [].concat(_toConsumableArray(current), _toConsumableArray(next));
        }, []).filter(function (item) {
          if (item && checkValidArray(item.resolutions)) {
            return true;
          } else {
            warnMessage("".concat(item.serviceCode, " resolutions \u4E3A\u7A7A"));
          }
        });
      });
    }
  }, {
    key: "_parseAlias",
    value: function _parseAlias(serviceCode) {
      var words = Object.keys(parseRules);
      var result = {};
      words.forEach(function (item) {
        var parseResult = parseRules[item](serviceCode);
        result[item + 'Letter'] = parseResult;
        result[item] = aliasMap[item][parseResult] || parseResult;
      });
      return result;
    }
  }, {
    key: "_formatConfig",
    value: function _formatConfig(serviceCode, serviceCodeLayer, response) {
      var alias = this._parseAlias(serviceCodeLayer);

      var layers = this._formatLayers(serviceCode, response.layers, response.type);

      var fullExtent = extend(response.fullExtent, response.initialExtent);
      var extent = [fullExtent.xmin, fullExtent.ymin, fullExtent.xmax, fullExtent.ymax];
      var center = [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
      var wkid = fullExtent.spatialReference.wkid;
      var tileInfo = response.tileInfo;
      var resolutions = [];
      tileInfo && tileInfo.lods && tileInfo.lods.forEach(function (lod) {
        resolutions.push(lod.resolution);
      });
      return {
        id: Symbol(),
        extent: extent,
        zoom: 0,
        epsg: 'EPSG:' + wkid,
        wkid: wkid,
        center: center,
        resolutions: resolutions,
        serviceCode: serviceCode,
        tileInfo: tileInfo,
        alias: alias,
        viewZoom: {
          wfs: [-1, -1],
          wms: [0, tileInfo && tileInfo.lods.length],
          wmts: [-1, -1]
        },
        layers: layers
      };
    }
  }, {
    key: "_formatLayers",
    value: function _formatLayers(serviceCode, layers, type) {
      return layers.map(function (layer) {
        var layerNameKey = parseRules.layer(layer.name);
        return {
          caption: aliasMap.layer[layerNameKey] || layerNameKey,
          serviceCode: serviceCode,
          type: type,
          id: layer.name,
          serverId: layer.id,
          serverIdWMS: layer.layerLength - 1 - layer.id,
          name: layer.name,
          letter: parseRules.layer(layer.name),
          label: 'BSM',
          permission: '1=1'
        };
      });
    }
  }], [{
    key: "create",
    value: function create() {
      var serviceCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

      if (!serviceCode || !serviceCode.length) {
        serviceCode = 'default';
      }

      var gisConfig = new GISConfig();
      var promise;

      if (serviceCode === 'default') {
        promise = gisConfig.getMapConfig();
      } else {
        var services = paramToArray(serviceCode);
        promise = gisConfig.getMultiService(services);
      }

      return promise.then(function (res) {
        if (res.length) {
          GISConfig.sortServiceList(res);
          var defaultItem = res[res.length - 1];
          return {
            zoom: defaultItem.zoom,
            wkid: defaultItem.wkid,
            epsg: defaultItem.epsg,
            extent: defaultItem.extent,
            center: defaultItem.center,
            resolutions: defaultItem.resolutions,
            groupLayers: res
          };
        } else {
          return Promise.reject('未获取到有效的服务地址');
        }
      });
    }
  }, {
    key: "sortServiceList",
    value: function sortServiceList(serviceList) {
      var defaultLetterConfig = {};
      var compareKeys = Object.keys(defaultVisibleService);
      compareKeys.forEach(function (key) {
        defaultLetterConfig[key + 'Letter'] = paramToArray(defaultVisibleService[key]);
      });
      compareKeys = compareKeys.map(function (item) {
        return item + 'Letter';
      });
      var letterItem, defaultLetterItem, findIndex;

      var compareConfig = function compareConfig(item) {
        var itemAlias = item.alias;
        var score = 0;
        compareKeys.forEach(function (key) {
          letterItem = itemAlias[key];
          defaultLetterItem = defaultLetterConfig[key];
          findIndex = defaultLetterItem.indexOf(letterItem);
          score += findIndex === -1 ? 0 : findIndex + 1;
        });
        return score;
      };

      serviceList.sort(function (a, b) {
        return compareConfig(a) - compareConfig(b);
      });
    }
  }]);

  return GISConfig;
}();

var animateDuration = 500;

var Zoom =
/*#__PURE__*/
function () {
  function Zoom(map) {
    _classCallCheck(this, Zoom);

    _defineProperty(this, "_defaultZoom", void 0);

    _defineProperty(this, "_defaultCenter", void 0);

    _defineProperty(this, "_mapView", void 0);

    _defineProperty(this, "_map", void 0);

    this._defaultZoom = map.mapConfig.zoom;
    this._defaultCenter = map.mapConfig.center;
    this._mapView = map.olView;
    this._map = map;
  }

  _createClass(Zoom, [{
    key: "change",
    value: function change(type) {
      var center;

      var zoom = this._mapView.getZoom();

      if (typeof type === 'string') {
        switch (type) {
          case 'zoom-in':
            zoom++;
            break;

          case 'zoom-out':
            zoom--;
            break;

          case 'revert':
            zoom = this._defaultZoom;
            center = this._defaultCenter;
            break;

          default:
        }
      } else {
        zoom = type;
      }

      this.animate({
        zoom: zoom,
        center: center
      });
    }
  }, {
    key: "syncMapsMove",
    value: function syncMapsMove(maps) {
      var _ref = [this._mapView.getCenter(), this._mapView.getZoom()],
          center = _ref[0],
          zoom = _ref[1];
      maps.forEach(function (map) {
        map.interactions.zoom.animate({
          center: center,
          zoom: zoom
        });
      });
    }
  }, {
    key: "resetView",
    value: function resetView(padding) {
      var treeLayers = this._map.treeLayers;
      var extents = treeLayers.filter(function (item) {
        return item.checked;
      }).map(function (item) {
        return item.configGroup.extent;
      });
      this.focusExtents(extents, padding);
    }
  }, {
    key: "animate",
    value: function animate(_ref2) {
      var _ref2$center = _ref2.center,
          center = _ref2$center === void 0 ? this._mapView.getCenter() : _ref2$center,
          _ref2$zoom = _ref2.zoom,
          zoom = _ref2$zoom === void 0 ? this._mapView.getZoom() : _ref2$zoom;

      this._mapView.animate({
        center: center,
        zoom: zoom,
        duration: animateDuration
      });
    }
  }, {
    key: "toFeatures",
    value: function toFeatures() {
      var features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var padding = arguments.length > 1 ? arguments[1] : undefined;
      var extents = features.map(function (item) {
        return item.getGeometry().getExtent();
      });
      this.focusExtents(extents, padding);
    }
  }, {
    key: "focusExtents",
    value: function focusExtents(extents) {
      var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0];
      var extent = extents.reduce(function (prev, curr) {
        return prev ? extend(prev, curr) : curr;
      }, null);

      this._mapView.fit(extent, {
        constrainResolution: true,
        nearest: true,
        duration: animateDuration,
        maxZoom: 2,
        padding: padding
      });
    }
  }]);

  return Zoom;
}();

var DragPan =
/*#__PURE__*/
function (_ToggleActive) {
  _inherits(DragPan, _ToggleActive);

  function DragPan(_ref) {
    var _this;

    var olMap = _ref.olMap;

    _classCallCheck(this, DragPan);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragPan).call(this));

    _defineProperty(_assertThisInitialized(_this), "_olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "_dragPan", new OlDragPan());

    _this._olMap = olMap;

    _this.toggleActive();

    return _this;
  }

  _createClass(DragPan, [{
    key: "activateHandle",
    value: function activateHandle() {
      this._olMap.addInteraction(this._dragPan);
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._olMap.removeInteraction(this._dragPan);
    }
  }]);

  return DragPan;
}(ToggleActive);

function saveCanvas(canvas) {
  var filename = 'map.png';

  try {
    if (navigator.msSaveBlob) {
      navigator.msSaveBlob(canvas.msToBlob(), filename);
    } else {
      canvas.toBlob(function (blob) {
        return saveAs(blob, filename);
      });
    }
  } catch (e) {
    errorMessage(e, false);
  }
}

var controls = {
  mousePosition: function mousePosition() {
    return new OlMousePosition({
      undefinedHTML: '',
      coordinateFormat: function coordinateFormat(coordinate) {
        var text = format(coordinate, '当前鼠标位置 X:{x}, Y:{y}', 4);
        return "<p>".concat(text, "</p>");
      }
    });
  },
  scaleLine: function scaleLine() {
    return new OlScaleLine();
  }
};
function getControls(controlNames) {
  var result = [];
  controlNames = paramToArray(controlNames);
  controlNames.forEach(function (name) {
    if (controls.hasOwnProperty(name)) {
      result.push(controls[name]());
    } else {
      errorMessage("\u63A7\u4EF6\u5217\u8868\u4E2D\u65E0\u6CD5\u627E\u5230 ".concat(name));
    }
  });
  return result;
}

var allowedTypes = ['boolean', 'string', 'number'];
function formatObjectSimple(obj) {
  var result = {};
  var item;

  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      item = obj[key];

      if (allowedTypes.includes(_typeof(item))) {
        result[key] = item;
      }
    }
  }

  return result;
}

function formatLengthToStr(length) {
  var output;

  if (length > 999) {
    output = Math.round(length / 1000 * 100) / 100 + ' ' + 'km';
  } else {
    output = Math.round(length * 100) / 100 + ' ' + 'm';
  }

  return output;
}
function formatAreaToString(area) {
  var output;

  if (area > 99999) {
    output = Math.round(area / 1000000 * 100) / 100 + ' ' + 'k㎡';
  } else {
    output = Math.round(area * 100) / 100 + ' ' + '㎡';
  }

  return output;
}

var GISUtils =
/*#__PURE__*/
function () {
  function GISUtils(olMap) {
    _classCallCheck(this, GISUtils);

    _defineProperty(this, "formatEsriJSON", new EsriJSON());

    _defineProperty(this, "_mapCursorStyle", void 0);

    _defineProperty(this, "_defaultCursor", 'default');

    _defineProperty(this, "_updateSizeTimeId", 0);

    _defineProperty(this, "_selectInteractionState", true);

    this._mapCursorStyle = olMap.getTarget().style;
  }

  _createClass(GISUtils, [{
    key: "updateSize",
    value: function updateSize() {
      var _this = this;

      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var olMap = this.olMap;
      if (this._updateSizeTimeId) cancelAnimationFrame(this._updateSizeTimeId);
      this._updateSizeTimeId = setTimeout(function () {
        _this._updateSizeTimeId = 0;
      }, duration);

      var animationCallback = function animationCallback() {
        if (_this._updateSizeTimeId) {
          olMap.updateSize();
          requestAnimationFrame(animationCallback);
        }
      };

      requestAnimationFrame(animationCallback);
    }
  }, {
    key: "exportImage",
    value: function exportImage() {
      this.olMap.once('rendercomplete', function (event) {
        return saveCanvas(event.context.canvas);
      });
      this.olMap.renderSync();
    }
  }, {
    key: "toggleCursorStyle",
    value: function toggleCursorStyle() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._defaultCursor;
      this._defaultCursor = this._mapCursorStyle.cursor;
      this._mapCursorStyle.cursor = type;
    }
  }, {
    key: "toggleControls",
    value: function toggleControls(state, controlsName) {
      var _this2 = this;

      if (state) {
        var controls = getControls(controlsName);
        controls.forEach(function (item, index) {
          _this2.olMap.addControl(item);

          _this2.controls[controlsName[index]] = item;
        });
      } else {
        if (!controlsName || !controlsName.length) {
          controlsName = Object.keys(this.controls);
        }

        controlsName.forEach(function (item) {
          if (_this2.controls.hasOwnProperty(item)) {
            _this2.olMap.removeControl(_this2.controls[item]);

            delete _this2.controls[item];
          }
        });
      }
    }
  }, {
    key: "toggleSelectInteraction",
    value: function toggleSelectInteraction() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this._selectInteractionState;
      this._selectInteractionState = state;
      this.selectInteraction.setActive(state);
    }
  }, {
    key: "getLayerInfo",
    value: function getLayerInfo(param) {
      var newParam = _objectSpread({}, param);

      var _this$formatGeometryO = this.formatGeometryObject(newParam.extent),
          geometry = _this$formatGeometryO.geometry,
          geometryType = _this$formatGeometryO.geometryType;

      newParam.geometry = JSON.stringify(geometry);
      newParam.geometryType = geometryType;
      delete newParam.extent;
      return getServiceDetail(newParam);
    }
  }, {
    key: "getLayerInfoParams",
    value: function getLayerInfoParams(layerId) {
      var elseParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var node = this.treeLayers.find(function (item) {
        return item.id === layerId;
      });

      if (node) {
        var nodeConfig = node.config;
        var nodeConfigGroup = node.configGroup;
        return _objectSpread({
          serviceCode: nodeConfig.serviceCode,
          layerId: nodeConfig.serverId,
          epsgNum: nodeConfigGroup.wkid,
          extent: nodeConfigGroup.extent
        }, elseParams);
      } else {
        warnMessage("\u672A\u627E\u5230\u8BE5\u56FE\u5C42 ".concat(layerId));
        return null;
      }
    }
  }, {
    key: "getLayerField",
    value: function getLayerField(layerId) {
      return this.getLayerInfo(this.getLayerInfoParams(layerId, {
        returnGeometry: false
      })).then(function (res) {
        return res.fields.map(function (item) {
          return {
            value: item.name,
            label: item.alias
          };
        }).filter(function (res) {
          return res.value;
        });
      });
    }
  }, {
    key: "getLayerFieldValue",
    value: function getLayerFieldValue(layerId, field) {
      return this.getLayerInfo(this.getLayerInfoParams(layerId, {
        outFields: field,
        returnGeometry: false
      })).then(function (res) {
        var result = new Set();
        var features = res.features;
        var fieldValue;
        features.forEach(function (item) {
          fieldValue = String(item.attributes[field]).trim();
          fieldValue && result.add(fieldValue);
        });
        return Array.from(result).map(function (item) {
          return {
            value: item,
            label: item
          };
        });
      });
    }
  }, {
    key: "resolveFeatureData",
    value: function resolveFeatureData(featureData) {
      return this.formatEsriJSON.readFeatures(featureData);
    }
  }, {
    key: "renderFeatureData",
    value: function renderFeatureData(featureData) {
      var features = this.resolveFeatureData(featureData);
      this.addFeature(features);
      return features;
    }
  }, {
    key: "addFeature",
    value: function addFeature(feature) {
      var vectorSource = this.vectorSource;
      feature = paramToArray(feature);
      feature.forEach(function (item) {
        if (item && !vectorSource.hasFeature(item)) {
          vectorSource.addFeature(item);
        }
      });
    }
  }, {
    key: "removeFeature",
    value: function removeFeature(feature) {
      var vectorSource = this.vectorSource;
      feature = paramToArray(feature);
      feature.forEach(function (item) {
        if (item && vectorSource.hasFeature(item)) {
          vectorSource.removeFeature(item);
        }
      });
    }
  }, {
    key: "focusFeature",
    value: function focusFeature(feature) {
      this.setFeatureStyle(feature);
      this.addFeature(feature);
      this.interactions.zoom.toFeatures([feature]);
      return feature;
    }
  }, {
    key: "searchFeature",
    value: function searchFeature() {
      var _this3 = this;

      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var layerIds = params.layerIds;

      var filterCallback = function filterCallback(layer) {
        return layer.checked;
      };

      if (checkValidArray(layerIds)) {
        this.checkChange(layerIds, true);

        filterCallback = function filterCallback(layer) {
          return layerIds.includes(layer.id);
        };
      }

      var config, configGroup;
      var promiseArr = this.treeLayers.filter(filterCallback).map(function (layer) {
        config = layer.config;
        configGroup = layer.configGroup;
        return _this3.getLayerInfo({
          serviceCode: config.serviceCode,
          layerId: config.serverId,
          epsgNum: configGroup.wkid,
          extent: params.extent || configGroup.extent,
          where: params.where
        }).then(function (res) {
          if (res && !res.error) {
            var features = _this3.resolveFeatureData(res);

            var properties, BSM;
            return {
              id: layer.id,
              name: layer.name,
              children: features.map(function (feature) {
                properties = formatObjectSimple(feature.getProperties());
                BSM = properties.BSM;

                if (!BSM && BSM !== 0) {
                  warnMessage('找不到该数据 BSM 值，将使用 OBJECTID', properties);
                  BSM = properties.BSM = properties.OBJECTID;
                  feature.set('BSM', BSM);
                }

                return {
                  id: BSM,
                  name: BSM,
                  properties: properties
                };
              }),
              features: features
            };
          } else {
            return Promise.reject(res);
          }
        });
      });
      return Promise.all(promiseArr).then(function (data) {
        var features = [];
        data = data.filter(function (item) {
          return checkValidArray(item.children);
        });

        if (data.length) {
          features = data.reduce(function (prev, next) {
            return [].concat(_toConsumableArray(prev), _toConsumableArray(next.features));
          }, []);

          _this3.clearFeature();

          _this3.addFeature(features);

          _this3.interactions.zoom.toFeatures(features);
        }

        return {
          features: features,
          data: data
        };
      }, function (error) {
        return Promise.reject(error);
      });
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(feature) {
      var _this4 = this;

      this.clearSelectFeature();
      var features = paramToArray(feature);
      features.forEach(function (item) {
        return _this4.selectedFeatures.push(item);
      });
    }
  }, {
    key: "setFeatureStyle",
    value: function setFeatureStyle(feature) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var features = paramToArray(feature);
      mergeConfig({
        fillStyle: {
          color: 'rgba(255,255,255,0.7)'
        },
        strokeStyle: {
          color: '#3399CC',
          width: 3
        }
      }, options);
      features.forEach(function (feature) {
        return feature.setStyle(new Style({
          fill: new Fill(options.fillStyle),
          stroke: new Stroke(options.strokeStyle)
        }));
      });
    }
  }, {
    key: "clearSelectFeature",
    value: function clearSelectFeature() {
      this.selectedFeatures.clear();
    }
  }, {
    key: "clearFeature",
    value: function clearFeature() {
      this.clearSelectFeature();
      this.vectorSource.clear();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.olMap.getOverlays().clear();
      this.clearFeature();
      this.eventHub.dispatch('clear');
    }
  }, {
    key: "formatGeometryObject",
    value: function formatGeometryObject(geometryLike) {
      var geometry = {};
      var geometryType = '';

      if (Array.isArray(geometryLike)) {
        geometryType = 'esriGeometryEnvelope';
        geometry = {
          xmin: geometryLike[0],
          ymin: geometryLike[1],
          xmax: geometryLike[2],
          ymax: geometryLike[3]
        };
      } else {
        var type = geometryLike.getType();
        geometryType = type === 'Polygon' ? 'esriGeometryPolygon' : type === 'Point' ? 'esriGeometryPoint' : 'esriGeometryPolyline';
        geometry = this.formatEsriJSON.writeGeometryObject(geometryLike);
      }

      geometry.spatialReference = {
        wkid: this.mapConfig.wkid
      };
      return {
        geometryType: geometryType,
        geometry: geometry
      };
    }
  }, {
    key: "formatGeometrySize",
    value: function formatGeometrySize(geometry) {
      var type = geometry.getType();
      var params = {
        projection: this.mapConfig.epsg
      };
      var str = '',
          num = 0;

      switch (type) {
        case 'Polygon':
          num = getArea(geometry, params);
          str = formatAreaToString(num);
          break;

        case 'LineString':
          num = getLength(geometry, params);
          str = formatLengthToStr(num);
          break;

        default:
      }

      return {
        str: str,
        num: num
      };
    }
  }]);

  return GISUtils;
}();

var Draw =
/*#__PURE__*/
function (_classMixin) {
  _inherits(Draw, _classMixin);

  function Draw(map) {
    var _this;

    _classCallCheck(this, Draw);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Draw).call(this, 'drawstart,drawend'));

    _defineProperty(_assertThisInitialized(_this), "_map", void 0);

    _defineProperty(_assertThisInitialized(_this), "_olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "_viewport", void 0);

    _defineProperty(_assertThisInitialized(_this), "_vectorSource", void 0);

    _defineProperty(_assertThisInitialized(_this), "_draw", void 0);

    _defineProperty(_assertThisInitialized(_this), "_helpTooltipElement", void 0);

    _defineProperty(_assertThisInitialized(_this), "_helpTooltip", void 0);

    _defineProperty(_assertThisInitialized(_this), "_helpMsg", '点击开始绘制');

    _defineProperty(_assertThisInitialized(_this), "_continueEndMsg", '再次点击结束绘制');

    _defineProperty(_assertThisInitialized(_this), "_continuePolygonMsg", '点击继续绘制多边形');

    _defineProperty(_assertThisInitialized(_this), "_continueLineMsg", '点击继续绘制线条');

    _defineProperty(_assertThisInitialized(_this), "_supportTypes", ['Polygon', 'LineString', 'Circle', 'Point']);

    _defineProperty(_assertThisInitialized(_this), "_helpMsgType", void 0);

    _defineProperty(_assertThisInitialized(_this), "_showHelpTooltip", void 0);

    _defineProperty(_assertThisInitialized(_this), "_features", []);

    _this._map = map;
    _this._olMap = map.olMap;
    _this._viewport = map.olMap.getViewport();
    _this._vectorSource = map.vectorSource;
    _this._pointerMoveHandler = _this._pointerMoveHandler.bind(_assertThisInitialized(_this));
    _this._hideHelpTooltipElement = _this._hideHelpTooltipElement.bind(_assertThisInitialized(_this));
    map.eventHub.on('clear', function () {
      return _this.clear();
    });
    return _this;
  }

  _createClass(Draw, [{
    key: "activateHandle",
    value: function activateHandle(type, isFreehand) {
      if (!this._supportTypes.includes(type)) {
        return errorMessage("".concat(type, " \u7ED8\u5236\u7C7B\u578B\u4E0D\u652F\u6301\uFF0C\u652F\u6301\u7684\u7C7B\u578B\u6709 ").concat(this._supportTypes));
      }

      this._createHelpTooltip();

      this._olMap.on('pointermove', this._pointerMoveHandler);

      this._viewport.addEventListener('mouseout', this._hideHelpTooltipElement);

      this._addInteraction(type, isFreehand);
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._removeHelpTooltip();

      this._olMap.un('pointermove', this._pointerMoveHandler);

      this._viewport.removeEventListener('mouseout', this._hideHelpTooltipElement);

      this._removeInteraction();
    }
  }, {
    key: "clear",
    value: function clear() {
      this._map.removeFeature(this._features);

      this._features = [];
    }
  }, {
    key: "_hideHelpTooltipElement",
    value: function _hideHelpTooltipElement() {
      this._helpTooltipElement.classList.add('webgis-hidden');
    }
  }, {
    key: "_pointerMoveHandler",
    value: function _pointerMoveHandler(evt) {
      if (evt.dragging) {
        return;
      }

      var helpMsg = this._helpMsg;

      switch (this._helpMsgType) {
        case 'LineString':
          helpMsg = this._continueLineMsg;
          break;

        case 'Polygon':
          helpMsg = this._continuePolygonMsg;
          break;

        case 'Circle':
          helpMsg = this._continueEndMsg;
          break;

        default:
      }

      if (this._showHelpTooltip && helpMsg) {
        this._helpTooltip.setPosition(evt.coordinate);

        this._helpTooltipElement.innerHTML = helpMsg;

        this._helpTooltipElement.classList.remove('webgis-hidden');
      } else {
        this._helpTooltipElement.classList.add('webgis-hidden');
      }
    }
  }, {
    key: "_addInteraction",
    value: function _addInteraction(type, isFreehand) {
      var _this2 = this;

      var map = this._map;
      this._showHelpTooltip = !isFreehand;
      this._draw = new OlDraw({
        source: this._vectorSource,
        type: type,
        freehand: isFreehand
      });

      this._olMap.addInteraction(this._draw);

      this._draw.on('drawstart', function (evt) {
        map.toggleSelectInteraction(false);

        _this2.dispatch('drawstart', _this2._formatEventData(evt));

        _this2._helpMsgType = type;
      });

      this._draw.on('drawend', function (evt) {
        _this2._features.push(evt.feature);

        map.toggleSelectInteraction(true);
        setTimeout(function () {
          return _this2.dispatch('drawend', _this2._formatEventData(evt));
        }, 0);
        _this2._helpMsgType = '';
      });
    }
  }, {
    key: "_removeInteraction",
    value: function _removeInteraction() {
      this._olMap.removeInteraction(this._draw);

      this._draw = null;
    }
  }, {
    key: "_createHelpTooltip",
    value: function _createHelpTooltip() {
      this._helpTooltipElement = document.createElement('div');
      this._helpTooltipElement.className = 'webgis-measure-tooltip webgis-hidden';
      this._helpTooltip = new Overlay({
        element: this._helpTooltipElement,
        offset: [15, 0],
        positioning: 'center-left'
      });

      this._olMap.addOverlay(this._helpTooltip);
    }
  }, {
    key: "_removeHelpTooltip",
    value: function _removeHelpTooltip() {
      this._helpTooltipElement = null;

      this._olMap.removeOverlay(this._helpTooltip);

      this._helpTooltip = null;
    }
  }, {
    key: "_formatEventData",
    value: function _formatEventData(evt) {
      var geometry = evt.feature.getGeometry();
      var type = geometry.getType();
      var extent = type === 'Polygon' ? this._map.formatEsriJSON.writeGeometry(geometry) : geometry.getExtent();
      return {
        geometry: geometry,
        type: type,
        extent: extent
      };
    }
  }]);

  return Draw;
}(classMixin(GISEvent, ToggleActive));

var DragZoom =
/*#__PURE__*/
function (_classMixin) {
  _inherits(DragZoom, _classMixin);

  function DragZoom(map) {
    var _this;

    _classCallCheck(this, DragZoom);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragZoom).call(this, 'boxstart,boxend'));

    _defineProperty(_assertThisInitialized(_this), "_map", void 0);

    _defineProperty(_assertThisInitialized(_this), "_olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "_options", {
      out: null,
      active: false,
      condition: mouseOnly
    });

    _this._map = map;
    _this._olMap = map.olMap;
    return _this;
  }

  _createClass(DragZoom, [{
    key: "toggleActive",
    value: function toggleActive(state, type) {
      var out = type !== 'zoom-in';

      if (state) {
        this.activate(out);
      } else {
        this.deactivate();
      }
    }
  }, {
    key: "activateHandle",
    value: function activateHandle(out) {
      var _this2 = this;

      this._options.out = out;

      this._olMap.addInteraction(this._dragZoom = new OlDragZoom(this._options));

      this._dragZoom.on('boxstart', function (e) {
        return _this2.dispatch('boxstart', e);
      });

      this._dragZoom.on('boxend', function (e) {
        return _this2.dispatch('boxend', e);
      });

      this._map.toggleCursorStyle(out ? 'zoom-out' : 'zoom-in');
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._options.out = null;

      this._olMap.removeInteraction(this._dragZoom);

      this._map.toggleCursorStyle();
    }
  }]);

  return DragZoom;
}(classMixin(GISEvent, ToggleActive));

function promiseQueue(context, promiseFunction) {
  context._promiseQueue = context._promiseQueue || Promise.resolve();
  return (context._promiseQueue = context._promiseQueue.then(function () {
    return promiseFunction();
  })).then(function (res) {
    context._promiseQueue = Promise.resolve();
    return res;
  });
}

var mapId = 1;

var Map =
/*#__PURE__*/
function (_classMixin) {
  _inherits(Map, _classMixin);

  function Map(_ref) {
    var _this;

    var olMap = _ref.olMap,
        showControls = _ref.showControls,
        controls = _ref.controls;

    _classCallCheck(this, Map);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Map).call(this, olMap));

    _defineProperty(_assertThisInitialized(_this), "id", mapId++);

    _defineProperty(_assertThisInitialized(_this), "olMap", void 0);

    _defineProperty(_assertThisInitialized(_this), "olView", void 0);

    _defineProperty(_assertThisInitialized(_this), "mapConfig", void 0);

    _defineProperty(_assertThisInitialized(_this), "interactions", {});

    _defineProperty(_assertThisInitialized(_this), "controls", {});

    _defineProperty(_assertThisInitialized(_this), "eventHub", new GISEvent('layerChange,checkChange,clear'));

    _defineProperty(_assertThisInitialized(_this), "modules", {});

    _defineProperty(_assertThisInitialized(_this), "selectInteraction", new Select());

    _defineProperty(_assertThisInitialized(_this), "vectorSource", new VectorSource());

    _defineProperty(_assertThisInitialized(_this), "vectorLayer", new VectorLayer({
      source: _this.vectorSource,
      zIndex: 99999
    }));

    _defineProperty(_assertThisInitialized(_this), "selectedFeatures", void 0);

    _this.olMap = olMap;
    olMap.addInteraction(_this.selectInteraction);
    olMap.addLayer(_this.vectorLayer);
    _this.selectedFeatures = _this.selectInteraction.getFeatures();

    _this.toggleControls(showControls, controls);

    return _this;
  }

  _createClass(Map, [{
    key: "init",
    value: function init(_ref2) {
      var _this2 = this;

      var serviceCode = _ref2.serviceCode,
          showLayers = _ref2.showLayers,
          modules = _ref2.modules;
      return GISConfig.create(serviceCode).then(function (mapConfig) {
        _this2.mapConfig = mapConfig;

        _this2.initView();

        _this2.createLayerTree(mapConfig.groupLayers, showLayers);

        _this2.interactions = {
          zoom: new Zoom(_this2),
          dragPan: new DragPan(_this2),
          boxSelection: new BoxSelection(_this2),
          draw: new Draw(_this2),
          dragZoom: new DragZoom(_this2)
        };
        return _this2.initModules(modules).then(function () {
          return _this2;
        });
      }).catch(errorMessage);
    }
  }, {
    key: "initView",
    value: function initView() {
      var mapConfig = this.mapConfig;
      var projection = new Projection({
        code: mapConfig.epsg,
        axisOrientation: 'neu'
      });
      projection.setExtent(mapConfig.extent);
      this.olMap.setView(this.olView = new OlView({
        center: mapConfig.center,
        extent: mapConfig.extent,
        zoom: mapConfig.zoom,
        projection: projection,
        resolutions: mapConfig.resolutions
      }));
    }
  }, {
    key: "initModules",
    value: function initModules(modules) {
      var _this3 = this;

      this.modules = {};
      return Promise.all(Array.from(modules).map(function (moduleName) {
        return getModule(moduleName).then(function (module) {
          _this3.modules[camelCase(moduleName)] = new module(_this3);
        });
      }));
    }
  }], [{
    key: "create",
    value: function create(_ref3) {
      var target = _ref3.target,
          _ref3$serviceCode = _ref3.serviceCode,
          serviceCode = _ref3$serviceCode === void 0 ? [] : _ref3$serviceCode,
          _ref3$aliasMap = _ref3.aliasMap,
          aliasMap = _ref3$aliasMap === void 0 ? {} : _ref3$aliasMap,
          _ref3$showLayers = _ref3.showLayers,
          showLayers = _ref3$showLayers === void 0 ? [] : _ref3$showLayers,
          _ref3$modules = _ref3.modules,
          modules = _ref3$modules === void 0 ? [] : _ref3$modules,
          _ref3$showControls = _ref3.showControls,
          showControls = _ref3$showControls === void 0 ? true : _ref3$showControls,
          _ref3$controls = _ref3.controls,
          controls = _ref3$controls === void 0 ? [] : _ref3$controls,
          _ref3$defaultVisibleS = _ref3.defaultVisibleService,
          defaultVisibleService = _ref3$defaultVisibleS === void 0 ? {} : _ref3$defaultVisibleS,
          _ref3$epsgConfig = _ref3.epsgConfig,
          epsgConfig = _ref3$epsgConfig === void 0 ? {} : _ref3$epsgConfig,
          _ref3$defaultLayerCon = _ref3.defaultLayerConfig,
          defaultLayerConfig = _ref3$defaultLayerCon === void 0 ? {} : _ref3$defaultLayerCon;

      if (!target) {
        return Promise.reject('[target] is null!');
      }

      return promiseQueue(target, function () {
        var viewport = target.querySelectorAll('.ol-viewport');

        if (checkValidArray(viewport)) {
          viewport.forEach(function (item) {
            return item.remove();
          });
        }

        setAliasMap(aliasMap);
        setDefaultVisibleService(defaultVisibleService);
        registerEPSG(epsgConfig);
        setDefaultLayerConfig(defaultLayerConfig);
        var olMap = new OlMap({
          target: target,
          controls: defaults({
            attribution: false,
            zoom: false
          }),
          interactions: defaults$1({
            dragPan: false
          })
        });
        var map = new Map({
          olMap: olMap,
          showControls: showControls,
          controls: controls
        });
        return map.init({
          serviceCode: serviceCode,
          showLayers: showLayers,
          modules: modules
        });
      });
    }
  }]);

  return Map;
}(classMixin(LayerTree, GISUtils));

var script = {
  name: 'WebGISMap',
  mixins: [webgisProps],
  data: function data() {
    return {
      requireModules: ['HistoryRecord', 'FeatureSelect', 'Measure', 'LayerSwipe']
    };
  },
  computed: {
    webgisConfig: function webgisConfig() {
      return _objectSpread({}, this.options, {
        target: this.$refs.map,
        modules: new Set([].concat(_toConsumableArray(this.modules), _toConsumableArray(this.requireModules))),
        showControls: this.showControls,
        controls: this.controls
      });
    }
  },
  methods: {
    initMap: function initMap() {
      var _this = this;

      this.$_initWebgisPromise = promiseQueue(this, function () {
        return Map.create(_this.webgisConfig).then(function (webgis) {
          _this.$webgis = webgis;

          _this.$emit('init', webgis);
        }, function (error) {
          _this.$emit('init', false, error);
        }).catch(errorMessage);
      });
    }
  },
  mounted: function mounted() {
    this.initMap();
  },
  watch: {
    'options.showLayers': function optionsShowLayers(newVal) {
      var _this2 = this;

      this.$_initWebgisPromise.then(function () {
        var webgis = _this2.$webgis;
        webgis.clear();
        webgis.layerChange(newVal);
      });
    },
    showControls: function showControls() {
      var _this3 = this;

      this.$_initWebgisPromise.then(function () {
        _this3.$webgis.toggleControls(_this3.showControls, _this3.controls);
      });
    }
  }
};

var css$1 = ".webgis-map[data-v-dece0d76]{height:100%;background:#f2f2f2}";
styleInject(css$1);

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  }

  var options = typeof script === 'function' ? script.options : script;

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }

  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    hook = function hook(context) {
      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      }

      if (style) {
        style.call(this, createInjectorSSR(context));
      }

      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };

    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

/* script */
const __vue_script__ = script;
/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:"map",staticClass:"webgis-map"})};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = "data-v-dece0d76";
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var WebGISMap = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

var script$1 = {
  props: {
    visible: Boolean,
    defaultValue: {
      type: Number,
      default: 100
    }
  },
  data: function data() {
    return {
      opacity: this.defaultValue
    };
  }
};

var css$2 = ".webgis-opacity-set[data-v-4e3d68a9]{-webkit-box-shadow:0 2px 12px 0 rgba(0,0,0,.1);box-shadow:0 2px 12px 0 rgba(0,0,0,.1);border-radius:4px;padding:0 8px;background:#fff}";
styleInject(css$2);

/* script */
const __vue_script__$1 = script$1;
/* template */
var __vue_render__$1 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-opacity-set",on:{"click":function($event){$event.stopPropagation();}}},[_c('el-slider',{staticClass:"webgis-opacity-set__slider",attrs:{"min":0,"max":100},on:{"input":function($event){return _vm.$emit('change', _vm.opacity)}},model:{value:(_vm.opacity),callback:function ($$v) {_vm.opacity=$$v;},expression:"opacity"}})],1)};
var __vue_staticRenderFns__$1 = [];

  /* style */
  const __vue_inject_styles__$1 = undefined;
  /* scoped */
  const __vue_scope_id__$1 = "data-v-4e3d68a9";
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var AsideOpacitySet = normalizeComponent_1(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    undefined,
    undefined
  );

var webgisInitCommon = {
  data: function data() {
    return {
      webgisReady: false
    };
  },
  created: function created() {
    this.$webgis = null;
  },
  methods: {
    _afterInitWebgis: function _afterInitWebgis(webgis) {
      this.webgisReady = true;

      if (webgis) {
        this.$webgis = webgis;

        if (this.afterInitWebgis instanceof Function) {
          this.afterInitWebgis();
        }
      }
    }
  }
};

var privateEventHubProvide = {
  provide: function provide() {
    return {
      $_eventHub: this.$eventHub
    };
  },
  beforeCreate: function beforeCreate() {
    if (this.$eventHub) {
      return warnMessage('私有的事件中心在一个范围内仅能存在一个!');
    }

    this.$eventHub = new Vue();
  }
};
var privateEventHubInject = {
  inject: {
    $_eventHub: {
      type: Object,
      default: null
    }
  },
  created: function created() {
    this.$eventHub = this.$_eventHub || this.$data.$evenHub;
  }
};

var eventName = 'privateWebgisReady';
var webgisProvide = {
  mixins: [webgisInitCommon, privateEventHubProvide],
  methods: {
    initWebgis: function initWebgis(webgis) {
      this.$emit('init', webgis);
      this.$eventHub.$emit(eventName, webgis);
      this.$eventHub.$webgis = webgis;

      this._afterInitWebgis(webgis);
    }
  }
};
var webgisInject = {
  mixins: [webgisInitCommon, privateEventHubInject],
  methods: {
    _initWebgis: function _initWebgis(webgis) {
      this.$eventHub.$off(eventName, this._initWebgis);

      this._afterInitWebgis(webgis);
    }
  },
  created: function created() {
    var webgis = this.$eventHub.$webgis;

    if (webgis) {
      this.$webgis = webgis;

      this._initWebgis(webgis);
    } else {
      this.$eventHub.$on(eventName, this._initWebgis);
    }
  }
};

var script$2 = {
  mixins: [webgisInject],
  components: {
    AsideOpacitySet: AsideOpacitySet
  },
  data: function data() {
    return {
      treeNodes: [],
      showLayers: [],
      expandedKeys: []
    };
  },
  methods: {
    afterInitWebgis: function afterInitWebgis() {
      var webgis = this.$webgis;
      this.treeNodes = webgis.treeNodes;
      this.showLayers = webgis.showLayers;
      this.expandedKeys = _toConsumableArray(this.showLayers);
      webgis.eventHub.on('layerChange', this.updateShowLayers);
    },
    onCheckChange: function onCheckChange(data, _ref) {
      var checkedKeys = _ref.checkedKeys;
      var checked = checkedKeys.includes(data.id);
      this.$webgis.checkChange(data.id, checked);
    },
    dropdownSelect: function dropdownSelect(type, data) {
      switch (type) {
        case 'zoom':
          {
            var _data$configGroup = data.configGroup,
                center = _data$configGroup.center,
                zoom = _data$configGroup.zoom;
            this.$webgis.interactions.zoom.animate({
              center: center,
              zoom: zoom
            });
          }
          break;

        case 'opacity':
          break;

        case 'move-up':
          this.$webgis.setLayerSort(data.id, 'up');
          this.treeNodes = _toConsumableArray(this.$webgis.treeNodes);
          break;

        case 'move-down':
          this.$webgis.setLayerSort(data.id, 'down');
          this.treeNodes = _toConsumableArray(this.$webgis.treeNodes);
          break;

        default:
      }
    },
    opacitySet: function opacitySet(data, opacity) {
      data.opacity = opacity;
      this.$webgis.setLayerOpacity(data.id, opacity / 100);
    },
    updateShowLayers: function updateShowLayers(showLayers) {
      this.showLayers = showLayers;
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.$webgis.eventHub.off('layerChange', this.updateShowLayers);
  }
};

var css$3 = ".webgis-aside[data-v-3e4d0703]{overflow:hidden auto;width:250px;height:100%}.webgis-aside .el-tree[data-v-3e4d0703]{padding:8px;min-height:100%}.webgis-aside .el-tree-node__content[data-v-3e4d0703]{height:36px}.webgis-aside .el-tree-node__content:hover .webgis-aside__tree-tools[data-v-3e4d0703]{display:block}.webgis-aside .el-tree-node__content:hover .webgis-aside__tree-item.is-layer[data-v-3e4d0703]{padding-right:28px}.webgis-aside .el-tree-node__children .el-tree-node__content[data-v-3e4d0703]{height:30px}.webgis-aside__tree-item[data-v-3e4d0703]{width:100%;line-height:1;padding-right:8px;position:relative;overflow:hidden;text-overflow:ellipsis}.webgis-aside__tree-tools.el-dropdown[data-v-3e4d0703]{display:none;position:absolute;top:0;right:10px}.webgis-aside__tree-select-toggle[data-v-3e4d0703]:hover{color:#409eff}.webgis-aside__tree-select-item[data-v-3e4d0703]{position:relative}.webgis-aside__tree-select-item:hover .webgis-opacity-set[data-v-3e4d0703]{display:block}.webgis-aside__tree-select-item .webgis-opacity-set[data-v-3e4d0703]{display:none;position:absolute;left:100%;top:0;width:130px}";
styleInject(css$3);

/* script */
const __vue_script__$2 = script$2;
/* template */
var __vue_render__$2 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-aside scrollbar-default"},[_c('el-tree',{ref:"elTree",attrs:{"default-checked-keys":_vm.showLayers,"default-expanded-keys":_vm.expandedKeys,"data":_vm.treeNodes,"show-checkbox":"","node-key":"id"},on:{"check":_vm.onCheckChange},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var node = ref.node;
var data = ref.data;
return _c('div',{staticClass:"webgis-aside__tree-item",class:{ 'is-layer': data.nodeType === 'layer' }},[_c('label',{attrs:{"title":data.name}},[_vm._v(_vm._s(data.name))]),(data.nodeType === 'layer')?_c('el-dropdown',{staticClass:"webgis-aside__tree-tools",attrs:{"size":"medium"},on:{"command":function($event){return _vm.dropdownSelect($event, data)}}},[_c('span',{staticClass:"webgis-aside__tree-select-toggle"},[_c('i',{staticClass:"el-icon-setting"})]),_c('el-dropdown-menu',{attrs:{"slot":"dropdown"},slot:"dropdown"},[_c('el-dropdown-item',{attrs:{"command":"zoom"}},[_c('i',{staticClass:"el-icon-zoom-in"}),_vm._v("缩放至\n          ")]),_c('el-dropdown-item',{staticClass:"webgis-aside__tree-select-item",attrs:{"command":"opacity"}},[_c('i',{staticClass:"el-icon-brush"}),_vm._v("透明度\n            "),_c('AsideOpacitySet',{attrs:{"default-value":data.opacity},on:{"change":function($event){return _vm.opacitySet(data, $event)}}})],1),(node.previousSibling)?_c('el-dropdown-item',{attrs:{"command":"move-up"}},[_c('i',{staticClass:"el-icon-top"}),_vm._v("上移\n          ")]):_vm._e(),(node.nextSibling)?_c('el-dropdown-item',{attrs:{"command":"move-down"}},[_c('i',{staticClass:"el-icon-bottom"}),_vm._v("下移\n          ")]):_vm._e()],1)],1):_vm._e()],1)}}])})],1)};
var __vue_staticRenderFns__$2 = [];

  /* style */
  const __vue_inject_styles__$2 = undefined;
  /* scoped */
  const __vue_scope_id__$2 = "data-v-3e4d0703";
  /* module identifier */
  const __vue_module_identifier__$2 = undefined;
  /* functional template */
  const __vue_is_functional_template__$2 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var Aside = normalizeComponent_1(
    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    undefined,
    undefined
  );

var script$3 = {
  name: 'WebGISAsideTools',
  mixins: [webgisInject, privateEventHubInject],
  components: {
    SvgIcon: SvgIcon
  },
  data: function data() {
    return {
      dragPanActive: true,
      dragZoomActive: ''
    };
  },
  methods: {
    toggleDragPan: function toggleDragPan() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.dragPanActive;
      this.dragPanActive = state;
      this.$webgis.interactions.dragPan.toggleActive(state);
    },
    toggleAside: function toggleAside() {
      this.$eventHub.$emit('toggleAside');
    },
    zoomRevert: function zoomRevert() {
      this.$webgis.interactions.zoom.change('revert');
    },
    toggleDragZoom: function toggleDragZoom(type) {
      this.dragZoomActive = this.dragZoomActive && this.dragZoomActive === type ? '' : type;
      this.$webgis.interactions.dragZoom.toggleActive(!!this.dragZoomActive, type);
    },
    closeDragZoom: function closeDragZoom() {
      this.toggleDragZoom();
    },
    historyRecordChange: function historyRecordChange(direction) {
      this.$webgis.modules.historyRecord.change(direction);
    },
    afterInitWebgis: function afterInitWebgis() {
      var dragZoom = this.$webgis.interactions.dragZoom;
      dragZoom.on('boxend', this.closeDragZoom);
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.$webgis.interactions.dragZoom.offAll('boxend', this.closeDragZoom);
  }
};

var css$4 = ".webgis-aside-tools[data-v-7ef8617a]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;top:60px;left:10px}.webgis-aside-tools .el-button[data-v-7ef8617a]{-webkit-transition:all .3s;transition:all .3s;font-size:20px;margin:5px 0 0!important;padding:0;width:35px;height:35px;border:none;color:grey;-webkit-box-shadow:0 2px 4px rgba(0,0,0,.12),0 0 6px rgba(0,0,0,.04);box-shadow:0 2px 4px rgba(0,0,0,.12),0 0 6px rgba(0,0,0,.04)}.webgis-aside-tools .el-button[data-v-7ef8617a]:focus{border:1px solid #c6e2ff}.webgis-aside-tools .el-button.active[data-v-7ef8617a],.webgis-aside-tools .el-button[data-v-7ef8617a]:active{border:1px solid #409eff;color:#409eff}.webgis-aside-tools .spacer[data-v-7ef8617a]{height:15px}";
styleInject(css$4);

/* script */
const __vue_script__$3 = script$3;
/* template */
var __vue_render__$3 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-aside-tools webgis-absolute-layer"},[_c('el-button',{on:{"click":function($event){return _vm.historyRecordChange(-1)}}},[_c('SvgIcon',{attrs:{"name":"long-arrow-alt-left"}})],1),_c('el-button',{on:{"click":function($event){return _vm.historyRecordChange(1)}}},[_c('SvgIcon',{attrs:{"name":"long-arrow-alt-right"}})],1),_c('div',{staticClass:"spacer"}),_c('el-button',{class:{ active: _vm.dragZoomActive === 'zoom-in' },on:{"click":function($event){return _vm.toggleDragZoom('zoom-in')}}},[_c('SvgIcon',{attrs:{"name":"search-plus"}})],1),_c('el-button',{class:{ active: _vm.dragZoomActive === 'zoom-out' },on:{"click":function($event){return _vm.toggleDragZoom('zoom-out')}}},[_c('SvgIcon',{attrs:{"name":"search-minus"}})],1),_c('el-button',{on:{"click":function($event){return _vm.zoomRevert()}}},[_c('SvgIcon',{attrs:{"name":"globe-americas"}})],1),_c('div',{staticClass:"spacer"}),_c('el-button',{on:{"click":function($event){return _vm.toggleDragPan()}}},[_c('SvgIcon',{attrs:{"name":_vm.dragPanActive ? 'arrows-alt' : 'lock'}})],1),_c('el-button',{on:{"click":function($event){return _vm.toggleAside()}}},[_c('SvgIcon',{attrs:{"name":"layer-group"}})],1)],1)};
var __vue_staticRenderFns__$3 = [];

  /* style */
  const __vue_inject_styles__$3 = undefined;
  /* scoped */
  const __vue_scope_id__$3 = "data-v-7ef8617a";
  /* module identifier */
  const __vue_module_identifier__$3 = undefined;
  /* functional template */
  const __vue_is_functional_template__$3 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var AsideTools = normalizeComponent_1(
    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
    __vue_inject_styles__$3,
    __vue_script__$3,
    __vue_scope_id__$3,
    __vue_is_functional_template__$3,
    __vue_module_identifier__$3,
    undefined,
    undefined
  );

var regionListFeatureHash = {};
var script$4 = {
  name: 'WebGISRegionList',
  mixins: [webgisInject, webgisPropsInject],
  computed: {
    jurisdictionTreeData: function jurisdictionTreeData() {
      return this.webgisConfig.options.jurisdictionTreeData || [];
    }
  },
  methods: {
    targetToView: function targetToView(id) {
      var _this = this;

      var feature = regionListFeatureHash[id];

      if (feature) {
        this.$webgis.focusFeature(feature);
        setTimeout(function () {
          _this.$webgis.removeFeature(feature);
        }, 1500);
      } else {
        warnMessage('未获取到要素');
      }
    },
    afterInitWebgis: function afterInitWebgis() {
      var _this2 = this;

      var webgis = this.$webgis;
      var treeLayers = webgis.treeLayers;

      if (checkValidArray(treeLayers)) {
        var layer = treeLayers.slice(-1)[0];
        var config = layer.config,
            configGroup = layer.configGroup;
        webgis.getLayerInfo({
          serviceCode: config.serviceCode,
          layerId: config.serverId,
          epsgNum: configGroup.wkid,
          extent: configGroup.extent
        }).then(function (res) {
          _this2.$webgis.formatEsriJSON.readFeatures(res).map(function (item) {
            var properties = item.getProperties();
            var key = properties.XZQDM || properties.DJQDM;

            if (key) {
              regionListFeatureHash[key] = item;
            }
          });

          return regionListFeatureHash;
        });
      }
    }
  }
};

var css$5 = ".webgis-region-list[data-v-164f0b5d]{width:300px;max-height:380px;overflow-y:auto}.webgis-region-list_item[data-v-164f0b5d]{display:-webkit-box;display:-ms-flexbox;display:flex;margin-bottom:8px}.webgis-region-list_item .el-button[data-v-164f0b5d]{padding:0}.webgis-region-list_item-left[data-v-164f0b5d]{-webkit-box-flex:0;-ms-flex:none;flex:none;width:60px;margin-right:8px}.webgis-region-list_item-left .el-button[data-v-164f0b5d]{font-weight:700;font-size:13px;white-space:normal;width:100%;line-height:1.3;text-align:left}.webgis-region-list_item-right[data-v-164f0b5d]{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.webgis-region-list_item-right-item[data-v-164f0b5d]{margin:0 4px 4px 0}.webgis-region-list_item__empty[data-v-164f0b5d]{text-align:center;padding:24px;color:#909399}";
styleInject(css$5);

/* script */
const __vue_script__$4 = script$4;
/* template */
var __vue_render__$4 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"webgis-region-list webgis-list-unstyled webgis-scrollbar-default"},[_vm._l((_vm.jurisdictionTreeData),function(city){return _c('li',{key:city.id,staticClass:"webgis-region-list_item"},[_c('div',{staticClass:"webgis-region-list_item-left"},[_c('el-button',{attrs:{"type":"text"},on:{"click":function($event){return _vm.targetToView(city.id)}}},[_vm._v(_vm._s(city.name)+"：")])],1),_c('ul',{staticClass:"webgis-region-list_item-right webgis-list-unstyled"},_vm._l((city.children),function(area){return _c('li',{key:area.id,staticClass:"webgis-region-list_item-right-item"},[_c('el-button',{attrs:{"type":"text"},on:{"click":function($event){return _vm.targetToView(area.id)}}},[_vm._v(_vm._s(area.name))])],1)}),0)])}),(!_vm.jurisdictionTreeData.length)?_c('li',{staticClass:"webgis-region-list_item__empty"},[_vm._v("\n    暂无数据\n  ")]):_vm._e()],2)};
var __vue_staticRenderFns__$4 = [];

  /* style */
  const __vue_inject_styles__$4 = undefined;
  /* scoped */
  const __vue_scope_id__$4 = "data-v-164f0b5d";
  /* module identifier */
  const __vue_module_identifier__$4 = undefined;
  /* functional template */
  const __vue_is_functional_template__$4 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var RegionList = normalizeComponent_1(
    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
    __vue_inject_styles__$4,
    __vue_script__$4,
    __vue_scope_id__$4,
    __vue_is_functional_template__$4,
    __vue_module_identifier__$4,
    undefined,
    undefined
  );

var controlsClean = {
  mixins: [privateEventHubInject, webgisInject],
  methods: {
    clear: function clear() {
      this.$eventHub.$emit('clear');
    }
  }
};

var controlsFeatureSelect = {
  mixins: [privateEventHubInject, webgisInject],
  data: function data() {
    return {
      featureSelectActive: false
    };
  },
  methods: {
    featureSelectToggle: function featureSelectToggle() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.featureSelectActive;
      this.featureSelectActive = state;
      this.$webgis.modules.featureSelect.toggleActive(state);
    },
    afterInitWebgis: function afterInitWebgis() {
      var _this = this;

      var featureSelect = this.$webgis.modules.featureSelect;
      featureSelect.on('end', function (res) {
        if (res.state) {
          var featureData = res.data;

          if (featureData.length) {
            _this.featureSelectToggle(false);

            _this.$eventHub.$emit('changeModal', 'attribute-info', featureData);
          } else {
            _this.$message.info('暂无数据');

            _this.$eventHub.$emit('changeModal');
          }
        } else {
          errorMessage(res.message);

          _this.$eventHub.$emit('changeModal');
        }
      });
      featureSelect.on('select', function (BSM) {
        return _this.$eventHub.$emit('featureSelectItem', BSM);
      });
    }
  },
  created: function created() {
    this.$eventHub.$on('featureSelectToggle', this.featureSelectToggle);
  },
  beforeDestroy: function beforeDestroy() {
    this.$eventHub.$off('featureSelectToggle', this.featureSelectToggle);

    if (this.$webgis) {
      var featureSelect = this.$webgis.modules.featureSelect;
      featureSelect.offAll();
    }
  }
};

var eventHub = new Vue();

var splitScreenToggle = {
  methods: {
    splitScreenToggle: function splitScreenToggle() {
      eventHub.$emit('splitScreenToggle');
    }
  }
};

var script$5 = {
  name: 'WebGISTopTools',
  mixins: [webgisInject, controlsClean, controlsFeatureSelect, splitScreenToggle, privateEventHubInject],
  components: {
    RegionList: RegionList
  },
  methods: {
    toolsHandle: function toolsHandle(command) {
      switch (command) {
        case 'measure':
          this.$eventHub.$emit('changeModal', 'measure-select');
          break;

        case 'screenshots':
          this.$webgis.exportImage();
          break;

        case 'rolling-screen':
          this.$eventHub.$emit('changeModal', 'layer-swipe');
          break;

        default:
      }
    }
  }
};

var css$6 = ".webgis-top-tools[data-v-2a1c6d03]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;top:10px;right:10px;background:#fff;border-radius:4px;height:32px}.webgis-top-tools__item[data-v-2a1c6d03]{font-size:13px;padding:8px;border:none;background-color:transparent;color:inherit}.webgis-top-tools__item.active[data-v-2a1c6d03],.webgis-top-tools__item[data-v-2a1c6d03]:active,.webgis-top-tools__item[data-v-2a1c6d03]:hover{color:#409eff}.webgis-top-tools__divider[data-v-2a1c6d03]{height:1em;border-left:1px dashed #ddd}";
styleInject(css$6);

/* script */
const __vue_script__$5 = script$5;
/* template */
var __vue_render__$5 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-top-tools webgis-box-shadow-default webgis-absolute-layer flex-center-justify"},[_c('el-popover',{attrs:{"placement":"bottom-start","trigger":"click"}},[_c('RegionList'),_c('el-button',{staticClass:"webgis-top-tools__item",attrs:{"slot":"reference","icon":"el-icon-s-grid"},slot:"reference"},[_vm._v("\n      辖区\n    ")])],1),_c('span',{staticClass:"webgis-top-tools__divider"}),_c('el-button',{staticClass:"webgis-top-tools__item",class:{ active: _vm.featureSelectActive },attrs:{"icon":"el-icon-place"},on:{"click":function($event){return _vm.featureSelectToggle()}}},[_vm._v("\n    要素拾取\n  ")]),_c('span',{staticClass:"webgis-top-tools__divider"}),_c('el-dropdown',{attrs:{"trigger":"click","size":"small"},on:{"command":_vm.toolsHandle}},[_c('el-button',{staticClass:"webgis-top-tools__item",attrs:{"icon":"el-icon-setting"}},[_vm._v("\n      工具\n    ")]),_c('el-dropdown-menu',{attrs:{"slot":"dropdown"},slot:"dropdown"},[_c('el-dropdown-item',{attrs:{"command":"measure","icon":"el-icon-place"}},[_vm._v("\n        测量\n      ")]),_c('el-dropdown-item',{attrs:{"command":"screenshots","icon":"el-icon-crop"}},[_vm._v("\n        截屏\n      ")]),_c('el-dropdown-item',{attrs:{"command":"rolling-screen","icon":"el-icon-ice-cream-square"}},[_vm._v("\n        卷帘\n      ")])],1)],1),_c('span',{staticClass:"webgis-top-tools__divider"}),_c('el-button',{staticClass:"webgis-top-tools__item",attrs:{"icon":"el-icon-menu"},on:{"click":function($event){return _vm.splitScreenToggle()}}},[_vm._v("\n    分屏\n  ")]),_c('span',{staticClass:"webgis-top-tools__divider"}),_c('el-button',{staticClass:"webgis-top-tools__item",attrs:{"icon":"el-icon-delete"},on:{"click":function($event){_vm.clear();
      _vm.$webgis.clear();}}},[_vm._v("\n    清理\n  ")])],1)};
var __vue_staticRenderFns__$5 = [];

  /* style */
  const __vue_inject_styles__$5 = undefined;
  /* scoped */
  const __vue_scope_id__$5 = "data-v-2a1c6d03";
  /* module identifier */
  const __vue_module_identifier__$5 = undefined;
  /* functional template */
  const __vue_is_functional_template__$5 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var TopTools = normalizeComponent_1(
    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
    __vue_inject_styles__$5,
    __vue_script__$5,
    __vue_scope_id__$5,
    __vue_is_functional_template__$5,
    __vue_module_identifier__$5,
    undefined,
    undefined
  );

var script$6 = {
  name: 'WebGISCombinedSearchList',
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    keyword: String,
    height: {
      type: String,
      default: '60px'
    },
    value: [String, Number]
  },
  computed: {
    visibleData: function visibleData() {
      var keyword = this.keyword;

      if (keyword) {
        return this.data.filter(function (item) {
          return item.label.includes(keyword);
        });
      } else {
        return this.data;
      }
    }
  }
};

var css$7 = ".webgis-combined-search-list[data-v-43f55b60]{border:1px solid #dcdfe6;border-radius:4px;padding:4px;overflow-y:auto}.webgis-combined-search-list>li[data-v-43f55b60]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;height:16px;line-height:16px;padding:0 4px;border-radius:inherit;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.webgis-combined-search-list>li[data-v-43f55b60]:hover{background-color:rgba(0,0,0,.05)}.webgis-combined-search-list>li.active[data-v-43f55b60]{background-color:rgba(0,0,0,.1)}.webgis-combined-search-list>li.is-empty[data-v-43f55b60]{color:#909399}.webgis-combined-search-list>li.is-empty[data-v-43f55b60]:hover{background-color:inherit}";
styleInject(css$7);

/* script */
const __vue_script__$6 = script$6;
/* template */
var __vue_render__$6 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{staticClass:"webgis-combined-search-list webgis-list-unstyled webgis-scrollbar-default",style:({ height: _vm.height })},[_vm._l((_vm.visibleData),function(item){return _c('li',{key:item.value,class:{ active: _vm.value === item.value },on:{"click":function($event){_vm.value !== item.value && _vm.$emit('change', item.value);}}},[_vm._v("\n    "+_vm._s(item.label)+"\n  ")])}),(!_vm.data.length)?_c('li',{staticClass:"is-empty"},[_vm._v("（无数据）")]):_vm._e()],2)};
var __vue_staticRenderFns__$6 = [];

  /* style */
  const __vue_inject_styles__$6 = undefined;
  /* scoped */
  const __vue_scope_id__$6 = "data-v-43f55b60";
  /* module identifier */
  const __vue_module_identifier__$6 = undefined;
  /* functional template */
  const __vue_is_functional_template__$6 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var CombinedSearchList = normalizeComponent_1(
    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
    __vue_inject_styles__$6,
    __vue_script__$6,
    __vue_scope_id__$6,
    __vue_is_functional_template__$6,
    __vue_module_identifier__$6,
    undefined,
    undefined
  );

var script$7 = {
  name: 'WebgisCombinedSearchKeyboard',
  data: function data() {
    return {
      keyboardData: ['=', '<>', 'Like', '>', '>=', 'And', '<', '<=', 'Or', ['?', '*'], '()', 'Not', 'Is']
    };
  }
};

var css$8 = ".webgis-combined-search-keyboard[data-v-b895e448]{margin-right:12px;width:40%;-webkit-box-flex:0;-ms-flex:none;flex:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-ms-flex-wrap:wrap;flex-wrap:wrap}.webgis-combined-search-keyboard .el-button[data-v-b895e448]{width:28%;height:20px;padding:0;margin:0 0 8px}.webgis-combined-search-keyboard .el-button.extra-mini[data-v-b895e448]{width:13%}.webgis-combined-search-keyboard .keyboard-group-wrap[data-v-b895e448]{width:28%;height:20px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.webgis-combined-search-keyboard .keyboard-group-wrap .el-button[data-v-b895e448]{width:45%;height:100%}";
styleInject(css$8);

/* script */
const __vue_script__$7 = script$7;
/* template */
var __vue_render__$7 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-combined-search-keyboard"},[_vm._l((_vm.keyboardData),function(item,index){return [(Array.isArray(item))?_c('span',{key:index,staticClass:"keyboard-group-wrap"},_vm._l((item),function(subItem){return _c('el-button',{key:subItem,attrs:{"size":"mini"},on:{"click":function($event){return _vm.$emit('input', subItem)}}},[_vm._v(_vm._s(subItem))])}),1):_c('el-button',{key:index,attrs:{"size":"mini"},on:{"click":function($event){return _vm.$emit('input', item)}}},[_vm._v(_vm._s(item))])]})],2)};
var __vue_staticRenderFns__$7 = [];

  /* style */
  const __vue_inject_styles__$7 = undefined;
  /* scoped */
  const __vue_scope_id__$7 = "data-v-b895e448";
  /* module identifier */
  const __vue_module_identifier__$7 = undefined;
  /* functional template */
  const __vue_is_functional_template__$7 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var CombinedSearchKeyboard = normalizeComponent_1(
    { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
    __vue_inject_styles__$7,
    __vue_script__$7,
    __vue_scope_id__$7,
    __vue_is_functional_template__$7,
    __vue_module_identifier__$7,
    undefined,
    undefined
  );

var script$8 = {
  name: 'WebGISCombinedSearch',
  mixins: [webgisInject],
  components: {
    ElSelectTree: ElSelectTree,
    CombinedSearchList: CombinedSearchList,
    CombinedSearchKeyboard: CombinedSearchKeyboard
  },
  data: function data() {
    return {
      loading: false,
      layer: '',
      field: '',
      value: '',
      valueKeyword: '',
      SQLWhere: '',
      treeNodes: [],
      treeNodesProps: {
        value: 'id',
        label: 'name',
        children: 'children'
      },
      fieldData: [],
      valueData: []
    };
  },
  computed: {
    selectedLayer: function selectedLayer() {
      var _this = this;

      return this.$webgis.treeLayers.find(function (item) {
        return item.id === _this.layer;
      }) || {};
    },
    checkParams: function checkParams() {
      return this.layer && this.SQLWhere;
    }
  },
  methods: {
    afterInitWebgis: function afterInitWebgis() {
      this.treeNodes = this.$webgis.treeNodes;
    },
    layerChange: function layerChange(layer) {
      var _this2 = this;

      this.field = '';
      this.value = '';
      this.valueData = [];
      this.loading = true;
      this.$webgis.getLayerField(layer).then(function (res) {
        return _this2.fieldData = res;
      }).finally(function () {
        return _this2.loading = false;
      });
    },
    fieldChange: function fieldChange(field) {
      var _this3 = this;

      this.updateSQLWhere(field);
      this.value = '';
      this.loading = true;
      this.$webgis.getLayerFieldValue(this.layer, field).then(function (res) {
        return _this3.valueData = res;
      }).finally(function () {
        return _this3.loading = false;
      });
    },
    valueChange: function valueChange(value) {
      this.updateSQLWhere(value);
    },
    updateSQLWhere: function updateSQLWhere(text) {
      this.SQLWhere += (this.SQLWhere ? ' ' : '') + text;
    },
    reset: function reset() {
      this.layer = '';
      this.field = '';
      this.fieldData = [];
      this.value = '';
      this.valueData = [];
      this.valueKeyword = '';
      this.SQLWhere = '';
    },
    checkSQLWhere: function checkSQLWhere() {
      var _this4 = this;

      this.loading = true;
      this.$webgis.getLayerInfo(this.$webgis.getLayerInfoParams(this.layer, {
        where: this.SQLWhere
      })).then(function () {
        return _this4.$message.success('校验成功！');
      }, function () {
        return _this4.$message.error('校验失败！');
      }).finally(function () {
        return _this4.loading = false;
      });
    },
    enter: function enter() {
      var _this5 = this;

      this.loading = true;
      return this.$webgis.searchFeature({
        where: this.SQLWhere,
        layerIds: [this.layer]
      }).then(function (_ref) {
        var features = _ref.features,
            data = _ref.data;

        if (checkValidArray(features) && checkValidArray(data)) {
          _this5.$webgis.modules.featureSelect.updateFeatures(features);

          _this5.$eventHub.$emit('changeModal', 'attribute-info', data);
        } else {
          _this5.$message.info('暂无数据');

          _this5.$eventHub.$emit('changeModal');
        }
      }, function () {
        return _this5.$message.error('获取数据失败！');
      }).finally(function () {
        return _this5.loading = false;
      });
    },
    close: function close() {
      this.$emit('close');
    }
  }
};

var css$9 = ".webgis-combined-search[data-v-ab699f8c]{font-size:12px}.webgis-combined-search__block[data-v-ab699f8c]{margin-bottom:8px}.webgis-combined-search__block[data-v-ab699f8c]:last-of-type{margin-bottom:0}.webgis-combined-search__layer[data-v-ab699f8c]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.webgis-combined-search__field .webgis-combined-search-list[data-v-ab699f8c]{margin-top:8px}.webgis-combined-search__value[data-v-ab699f8c]{display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-combined-search__value-list-wrap[data-v-ab699f8c]{-webkit-box-flex:1;-ms-flex:1;flex:1;overflow:hidden}.webgis-combined-search__value-filter[data-v-ab699f8c]{margin-top:5.3333333333px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.webgis-combined-search__value-filter .el-input[data-v-ab699f8c]{-webkit-box-flex:1;-ms-flex:1;flex:1}.webgis-combined-search__where[data-v-ab699f8c]{text-align:left}.webgis-combined-search__where .el-textarea[data-v-ab699f8c]{margin-top:2px}.webgis-combined-search__btn[data-v-ab699f8c]{margin-bottom:0;text-align:right}.webgis-combined-search__btn .el-button[data-v-ab699f8c]{padding:6px 10px;text-align:center}";
styleInject(css$9);

/* script */
const __vue_script__$8 = script$8;
/* template */
var __vue_render__$8 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"loading",rawName:"v-loading",value:(_vm.loading),expression:"loading"}],staticClass:"webgis-combined-search"},[_c('div',{staticClass:"webgis-combined-search__layer webgis-combined-search__block"},[_c('label',[_vm._v("图层：")]),_c('ElSelectTree',{attrs:{"placeholder":"请选择图层","popover-min-width":174,"props":_vm.treeNodesProps,"data":_vm.treeNodes},on:{"change":_vm.layerChange},model:{value:(_vm.layer),callback:function ($$v) {_vm.layer=$$v;},expression:"layer"}})],1),_c('div',{staticClass:"webgis-combined-search__field webgis-combined-search__block"},[_c('label',[_vm._v("字段：")]),_c('CombinedSearchList',{attrs:{"data":_vm.fieldData},on:{"change":_vm.fieldChange},model:{value:(_vm.field),callback:function ($$v) {_vm.field=$$v;},expression:"field"}})],1),_c('div',{staticClass:"webgis-combined-search__value webgis-combined-search__block"},[_c('CombinedSearchKeyboard',{on:{"input":_vm.updateSQLWhere}}),_c('div',{staticClass:"webgis-combined-search__value-list-wrap"},[_c('CombinedSearchList',{attrs:{"height":"104px","keyword":_vm.valueKeyword,"data":_vm.valueData},on:{"change":_vm.valueChange},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v;},expression:"value"}}),_c('div',{staticClass:"webgis-combined-search__value-filter"},[_c('label',[_vm._v("查找：")]),_c('el-input',{attrs:{"clearable":"","size":"mini","placeholder":"关键字"},model:{value:(_vm.valueKeyword),callback:function ($$v) {_vm.valueKeyword=$$v;},expression:"valueKeyword"}})],1)],1)],1),_c('div',{staticClass:"webgis-combined-search__where webgis-combined-search__block"},[_c('label',[_vm._v("SELECT * FROM "+_vm._s(_vm.selectedLayer.letter || '[LAYER]')+" WHERE")]),_c('el-input',{attrs:{"resize":"none","size":"mini","type":"textarea"},model:{value:(_vm.SQLWhere),callback:function ($$v) {_vm.SQLWhere=$$v;},expression:"SQLWhere"}})],1),_c('div',{staticClass:"webgis-combined-search__btn webgis-combined-search__block"},[_c('el-button',{attrs:{"size":"mini","disabled":!_vm.SQLWhere},on:{"click":function($event){return _vm.reset()}}},[_vm._v("重置")]),_c('el-button',{attrs:{"size":"mini","disabled":!_vm.checkParams},on:{"click":function($event){return _vm.checkSQLWhere()}}},[_vm._v("校验")]),_c('el-button',{attrs:{"type":"primary","disabled":!_vm.checkParams,"size":"mini"},on:{"click":function($event){return _vm.enter()}}},[_vm._v("确认")]),_c('el-button',{attrs:{"size":"mini"},on:{"click":function($event){return _vm.close()}}},[_vm._v("关闭")])],1)])};
var __vue_staticRenderFns__$8 = [];

  /* style */
  const __vue_inject_styles__$8 = undefined;
  /* scoped */
  const __vue_scope_id__$8 = "data-v-ab699f8c";
  /* module identifier */
  const __vue_module_identifier__$8 = undefined;
  /* functional template */
  const __vue_is_functional_template__$8 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var CombinedSearch = normalizeComponent_1(
    { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
    __vue_inject_styles__$8,
    __vue_script__$8,
    __vue_scope_id__$8,
    __vue_is_functional_template__$8,
    __vue_module_identifier__$8,
    undefined,
    undefined
  );

var script$9 = {
  name: 'WebGISTopSearch',
  mixins: [webgisInject, webgisPropsInject],
  components: {
    CombinedSearch: CombinedSearch
  },
  data: function data() {
    return {
      loading: false,
      keyword: '',
      combinedSearchVisible: false
    };
  },
  computed: {
    keywordSQL: function keywordSQL() {
      var _this = this;

      var fields = this.searchRange.fields || [];
      return fields.map(function (item) {
        return "".concat(item, " LIKE '%").concat(_this.keyword, "%'");
      }).join(' OR ');
    },
    searchRange: function searchRange() {
      return this.webgisConfig.options.searchRange || {};
    },
    searchIcon: function searchIcon() {
      return "el-icon-".concat(this.loading ? 'loading' : 'search');
    }
  },
  methods: {
    search: function search() {
      var _this2 = this;

      this.loading = true;
      this.$webgis.searchFeature({
        where: this.keywordSQL,
        layerIds: this.searchRange.layers || []
      }).then(function (_ref) {
        var features = _ref.features,
            data = _ref.data;

        if (checkValidArray(features) && checkValidArray(data)) {
          _this2.$webgis.modules.featureSelect.updateFeatures(features);

          _this2.$eventHub.$emit('changeModal', 'attribute-info', data);
        } else {
          _this2.$message.info('暂无数据');

          _this2.$eventHub.$emit('changeModal');
        }
      }).finally(function () {
        return _this2.loading = false;
      });
    }
  }
};

var css$a = ".webgis-top-search input{border-radius:0;border:0}";
styleInject(css$a);

var css$b = ".webgis-top-search[data-v-e7c2a888]{display:-webkit-box;display:-ms-flexbox;display:flex;top:10px;left:10px}.webgis-top-search__left[data-v-e7c2a888]{margin-right:16px}.webgis-top-search .el-input[data-v-e7c2a888]{width:180px}.webgis-top-search .el-button[data-v-e7c2a888]{border-radius:0;border:0;height:32px;vertical-align:top}";
styleInject(css$b);

/* script */
const __vue_script__$9 = script$9;
/* template */
var __vue_render__$9 = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-top-search webgis-absolute-layer"},[_c('div',{staticClass:"webgis-top-search__left webgis-box-shadow-default"},[_c('el-input',{attrs:{"disabled":_vm.loading,"size":"small","clearable":"","placeholder":"请输入关键字"},nativeOn:{"keyup":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,"enter",13,$event.key,"Enter")){ return null; }return _vm.search($event)}},model:{value:(_vm.keyword),callback:function ($$v) {_vm.keyword=$$v;},expression:"keyword"}}),_c('el-button',{attrs:{"disabled":_vm.loading,"size":"small","type":"primary","icon":_vm.searchIcon},on:{"click":_vm.search}})],1),_c('el-popover',{attrs:{"placement":"bottom-end","width":"270"},model:{value:(_vm.combinedSearchVisible),callback:function ($$v) {_vm.combinedSearchVisible=$$v;},expression:"combinedSearchVisible"}},[_c('CombinedSearch',{on:{"close":function($event){_vm.combinedSearchVisible = false;}}}),_c('el-button',{staticClass:"webgis-box-shadow-default",attrs:{"slot":"reference","size":"small"},slot:"reference"},[_vm._v("\n      组合查询\n    ")])],1)],1)};
var __vue_staticRenderFns__$9 = [];

  /* style */
  const __vue_inject_styles__$9 = undefined;
  /* scoped */
  const __vue_scope_id__$9 = "data-v-e7c2a888";
  /* module identifier */
  const __vue_module_identifier__$9 = undefined;
  /* functional template */
  const __vue_is_functional_template__$9 = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var TopSearch = normalizeComponent_1(
    { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
    __vue_inject_styles__$9,
    __vue_script__$9,
    __vue_scope_id__$9,
    __vue_is_functional_template__$9,
    __vue_module_identifier__$9,
    undefined,
    undefined
  );

var script$a = {
  name: 'WebGISControls',
  mixins: [webgisInject],
  components: {
    AsideTools: AsideTools,
    TopTools: TopTools,
    TopSearch: TopSearch
  }
};

var css$c = "";
styleInject(css$c);

/* script */
const __vue_script__$a = script$a;
/* template */
var __vue_render__$a = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-controls"},[_c('TopSearch'),_c('TopTools'),_c('AsideTools')],1)};
var __vue_staticRenderFns__$a = [];

  /* style */
  const __vue_inject_styles__$a = undefined;
  /* scoped */
  const __vue_scope_id__$a = "data-v-63bc4961";
  /* module identifier */
  const __vue_module_identifier__$a = undefined;
  /* functional template */
  const __vue_is_functional_template__$a = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var Controls = normalizeComponent_1(
    { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
    __vue_inject_styles__$a,
    __vue_script__$a,
    __vue_scope_id__$a,
    __vue_is_functional_template__$a,
    __vue_module_identifier__$a,
    undefined,
    undefined
  );

var script$b = {
  name: 'WebGISModalsContainer',
  mixins: [controlsClean],
  props: {
    title: {
      type: String,
      default: '标题'
    }
  }
};

var css$d = ".webgis-modals-container[data-v-66245ad0]{width:50%;height:80%;max-width:502px;max-height:602px;border:1px solid #dcdfe6;background-color:#fff;right:10px;top:60px;font-size:13px;white-space:nowrap;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;overflow:hidden}.webgis-modals-header[data-v-66245ad0]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding:5px 8px;border-bottom:1px solid #dcdfe6}.webgis-modals-header__title[data-v-66245ad0]{padding-left:5px;line-height:1;border-left:3px solid #409eff}.webgis-modals-header__close.el-button[data-v-66245ad0]{font-size:18px;padding:0}";
styleInject(css$d);

/* script */
const __vue_script__$b = script$b;
/* template */
var __vue_render__$b = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-modals-container webgis-box-shadow-default webgis-absolute-layer"},[_c('div',{staticClass:"webgis-modals-header"},[_c('span',{staticClass:"webgis-modals-header__title"},[_vm._v(_vm._s(_vm.title))]),_c('el-button',{staticClass:"webgis-modals-header__close",attrs:{"type":"text","icon":"el-icon-close"},on:{"click":_vm.clear}})],1),_vm._t("default")],2)};
var __vue_staticRenderFns__$b = [];

  /* style */
  const __vue_inject_styles__$b = undefined;
  /* scoped */
  const __vue_scope_id__$b = "data-v-66245ad0";
  /* module identifier */
  const __vue_module_identifier__$b = undefined;
  /* functional template */
  const __vue_is_functional_template__$b = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ModalsContainer = normalizeComponent_1(
    { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
    __vue_inject_styles__$b,
    __vue_script__$b,
    __vue_scope_id__$b,
    __vue_is_functional_template__$b,
    __vue_module_identifier__$b,
    undefined,
    undefined
  );

var script$c = {
  name: 'WebGISModalsAttributeInfo',
  mixins: [webgisInject, privateEventHubInject],
  components: {
    ModalsContainer: ModalsContainer
  },
  props: {
    data: Array
  },
  data: function data() {
    return {
      filter: 'all',
      filterData: [{
        value: 'all',
        label: '全部'
      }],
      defaultProps: {
        children: 'children'
      },
      selectedNode: {}
    };
  },
  computed: {
    selectedTotal: function selectedTotal() {
      var count = 0;
      this.data.forEach(function (item) {
        item.children.forEach(function () {
          count++;
        });
      });
      return count;
    }
  },
  methods: {
    selectItem: function selectItem(data) {
      var _this = this;

      if (data && data.properties) {
        this.selectedNode = data;
        this.$webgis.modules.featureSelect.selectFeature(data.properties.BSM);
        this.$nextTick(function () {
          return _this.$refs.tree.setCurrentKey(data.id);
        });
      }
    },
    selectFirst: function selectFirst() {
      if (checkValidArray(this.data)) {
        this.selectItem(this.data[0].children[0]);
      }
    },
    featureSelectItem: function featureSelectItem(BSM) {
      var _this2 = this;

      this.data.forEach(function (item) {
        return _this2.selectItem(item.children.find(function (item) {
          return item.properties.BSM === BSM;
        }));
      });
    }
  },
  watch: {
    data: function data() {
      this.selectFirst();
    }
  },
  activated: function activated() {
    this.selectFirst();
  },
  deactivated: function deactivated() {
    var featureSelect = this.$webgis.modules.featureSelect;
    featureSelect.deactivate();
    this.$webgis.clearFeature();
  },
  created: function created() {
    this.$eventHub.$on('featureSelectItem', this.featureSelectItem);
  },
  beforeDestroy: function beforeDestroy() {
    this.$eventHub.$off('featureSelectItem', this.featureSelectItem);
  }
};

var css$e = ".webgis-attribute-info[data-v-4dd3495a]{width:50%;height:80%;max-width:402px;max-height:602px}.webgis-attribute-info__filter[data-v-4dd3495a]{padding:5px 15px;background-color:#eee;border-bottom:1px solid #dcdfe6;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.webgis-attribute-info__select[data-v-4dd3495a]{margin-left:8px}.webgis-attribute-info__body[data-v-4dd3495a]{-webkit-box-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;overflow:auto;padding-top:33px}.webgis-attribute-info__content[data-v-4dd3495a]{-webkit-box-flex:1;-ms-flex:1;flex:1;height:100%;margin-top:-33px}.webgis-attribute-info__content[data-v-4dd3495a],.webgis-attribute-info__footer[data-v-4dd3495a]{width:400px}.webgis-attribute-info__list[data-v-4dd3495a],.webgis-attribute-info__tree[data-v-4dd3495a]{height:100%;overflow-y:auto}.webgis-attribute-info__list[data-v-4dd3495a]{line-height:30px}.webgis-attribute-info__list-item[data-v-4dd3495a]{border-bottom:1px solid #dcdfe6;display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-attribute-info__list-label[data-v-4dd3495a],.webgis-attribute-info__list-text[data-v-4dd3495a]{padding:0 10px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.webgis-attribute-info__list-label[data-v-4dd3495a]{width:40%;font-weight:700;color:#4384d4;background:#eff5fc;border-right:1px solid #dcdfe6}.webgis-attribute-info__list-text[data-v-4dd3495a]{width:60%}.webgis-attribute-info__tree[data-v-4dd3495a]{border-right:1px solid #dcdfe6}.webgis-attribute-info__tree-node[data-v-4dd3495a]{font-size:13px;overflow:hidden;text-overflow:ellipsis}.webgis-attribute-info__footer[data-v-4dd3495a]{padding:0 8px;height:33px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:#eee;border-top:1px solid #dcdfe6;overflow:hidden;text-overflow:ellipsis}.webgis-attribute-info__total-number[data-v-4dd3495a]{color:green;font-weight:700;font-size:medium}";
styleInject(css$e);

/* script */
const __vue_script__$c = script$c;
/* template */
var __vue_render__$c = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ModalsContainer',{staticClass:"webgis-attribute-info",attrs:{"title":"属性信息"}},[_c('div',{staticClass:"webgis-attribute-info__filter"},[_c('label',[_vm._v("筛选条件")]),_c('el-select',{staticClass:"webgis-attribute-info__select",attrs:{"value":_vm.filter,"size":"mini","placeholder":"请选择"}},_vm._l((_vm.filterData),function(item){return _c('el-option',{key:item.value,attrs:{"label":item.label,"value":item.value}})}),1)],1),(_vm.selectedNode.id)?_c('div',{staticClass:"webgis-attribute-info__body"},[_c('el-row',{staticClass:"webgis-attribute-info__content"},[_c('el-col',{staticClass:"webgis-attribute-info__tree",attrs:{"span":6}},[_c('el-tree',{ref:"tree",attrs:{"data":_vm.data,"props":_vm.defaultProps,"current-node-key":_vm.selectedNode.id,"node-key":"id","default-expand-all":"","highlight-current":""},on:{"node-click":_vm.selectItem},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var node = ref.node;
var data = ref.data;
return [_c('span',{staticClass:"webgis-attribute-info__tree-node"},[_vm._v("\n              "+_vm._s(data.name)+"\n            ")])]}}],null,false,2903501661)})],1),_c('el-col',{staticClass:"webgis-attribute-info__list",attrs:{"span":18}},[(_vm.selectedNode)?_c('ul',_vm._l((_vm.selectedNode.properties),function(value,key){return _c('li',{key:key,staticClass:"webgis-attribute-info__list-item"},[_c('label',{staticClass:"webgis-attribute-info__list-label",attrs:{"title":key}},[_vm._v("\n              "+_vm._s(key)+"\n            ")]),_c('span',{staticClass:"webgis-attribute-info__list-text"},[_vm._v("\n              "+_vm._s(value)+"\n            ")])])}),0):_vm._e()])],1),_c('div',{staticClass:"webgis-attribute-info__footer"},[_vm._v("\n      图元总数：\n      "),_c('span',{staticClass:"webgis-attribute-info__total-number"},[_vm._v("\n        "+_vm._s(_vm.selectedTotal)+"\n      ")])])],1):_vm._e()])};
var __vue_staticRenderFns__$c = [];

  /* style */
  const __vue_inject_styles__$c = undefined;
  /* scoped */
  const __vue_scope_id__$c = "data-v-4dd3495a";
  /* module identifier */
  const __vue_module_identifier__$c = undefined;
  /* functional template */
  const __vue_is_functional_template__$c = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var AttributeInfo = normalizeComponent_1(
    { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
    __vue_inject_styles__$c,
    __vue_script__$c,
    __vue_scope_id__$c,
    __vue_is_functional_template__$c,
    __vue_module_identifier__$c,
    undefined,
    undefined
  );

var script$d = {
  name: 'WebGISModalsRadioToggle',
  components: {
    ModalsContainer: ModalsContainer
  },
  model: {
    props: 'value',
    event: 'change'
  },
  props: {
    title: String,
    subTitle: String,
    value: [String, Number],
    options: Array
  },
  data: function data() {
    return {
      privateValue: this.value
    };
  },
  watch: {
    value: function value() {
      this.privateValue = this.value;
    }
  }
};

var css$f = ".modal-radio-toggle .el-radio__label{font-size:13px}";
styleInject(css$f);

var css$g = ".modal-radio-toggle[data-v-fbfa9332]{width:auto;height:auto;font-size:13px}.modal-radio-toggle__body[data-v-fbfa9332]{padding:0 8px}.modal-radio-toggle__form-group[data-v-fbfa9332]{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:8px 0}.modal-radio-toggle__form-group .el-radio[data-v-fbfa9332]{line-height:18px}.modal-radio-toggle__label[data-v-fbfa9332]{color:grey;margin-right:8px}";
styleInject(css$g);

/* script */
const __vue_script__$d = script$d;
/* template */
var __vue_render__$d = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ModalsContainer',{staticClass:"modal-radio-toggle",attrs:{"title":_vm.title}},[_c('div',{staticClass:"modal-radio-toggle__body"},[_c('div',{staticClass:"modal-radio-toggle__form-group"},[(_vm.subTitle)?_c('h4',{staticClass:"modal-radio-toggle__label"},[_vm._v("\n        "+_vm._s(_vm.subTitle)+"\n      ")]):_vm._e(),_c('el-radio-group',{on:{"change":function($event){return _vm.$emit('change', $event)}},model:{value:(_vm.privateValue),callback:function ($$v) {_vm.privateValue=$$v;},expression:"privateValue"}},_vm._l((_vm.options),function(item){return _c('el-radio',{key:item.label,attrs:{"label":item.label}},[_vm._v("\n          "+_vm._s(item.name)+"\n        ")])}),1)],1)])])};
var __vue_staticRenderFns__$d = [];

  /* style */
  const __vue_inject_styles__$d = undefined;
  /* scoped */
  const __vue_scope_id__$d = "data-v-fbfa9332";
  /* module identifier */
  const __vue_module_identifier__$d = undefined;
  /* functional template */
  const __vue_is_functional_template__$d = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ModalsRadioToggle = normalizeComponent_1(
    { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
    __vue_inject_styles__$d,
    __vue_script__$d,
    __vue_scope_id__$d,
    __vue_is_functional_template__$d,
    __vue_module_identifier__$d,
    undefined,
    undefined
  );

var script$e = {
  name: 'WebGISModalsMeasureSelect',
  mixins: [webgisInject],
  components: {
    ModalsRadioToggle: ModalsRadioToggle
  },
  data: function data() {
    return {
      types: [{
        label: 'LineString',
        name: '线条'
      }, {
        label: 'Polygon',
        name: '面积'
      }],
      type: 'LineString'
    };
  },
  methods: {
    typeChange: function typeChange() {
      this.$webgis.modules.measure.toggleActive(true, this.type);
    }
  },
  activated: function activated() {
    this.$webgis.modules.measure.activate(this.type);
  },
  deactivated: function deactivated() {
    this.$webgis.modules.measure.deactivate();
  }
};

/* script */
const __vue_script__$e = script$e;

/* template */
var __vue_render__$e = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ModalsRadioToggle',{staticClass:"modal-measure",attrs:{"title":"测量","sub-title":"方式：","options":_vm.types},on:{"change":_vm.typeChange},model:{value:(_vm.type),callback:function ($$v) {_vm.type=$$v;},expression:"type"}})};
var __vue_staticRenderFns__$e = [];

  /* style */
  const __vue_inject_styles__$e = undefined;
  /* scoped */
  const __vue_scope_id__$e = undefined;
  /* module identifier */
  const __vue_module_identifier__$e = undefined;
  /* functional template */
  const __vue_is_functional_template__$e = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var MeasureSelect = normalizeComponent_1(
    { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
    __vue_inject_styles__$e,
    __vue_script__$e,
    __vue_scope_id__$e,
    __vue_is_functional_template__$e,
    __vue_module_identifier__$e,
    undefined,
    undefined
  );

var script$f = {
  name: 'WebGISModalsMeasureSelect',
  mixins: [webgisInject, privateEventHubInject],
  components: {
    ModalsRadioToggle: ModalsRadioToggle
  },
  data: function data() {
    return {
      types: [{
        label: 'vertical',
        name: '横线'
      }, {
        label: 'horizontal',
        name: '纵向'
      }],
      type: 'vertical'
    };
  },
  methods: {
    typeChange: function typeChange() {
      this.$webgis.modules.layerSwipe.changeType(this.type);
      this.$eventHub.$emit('rollingScreenToggleActive', true, this.type);
    }
  },
  activated: function activated() {
    this.$webgis.modules.layerSwipe.activate(this.type);
    this.$eventHub.$emit('rollingScreenToggleActive', true, this.type);
  },
  deactivated: function deactivated() {
    this.$webgis.modules.layerSwipe.deactivate();
    this.$eventHub.$emit('rollingScreenToggleActive', false);
  }
};

/* script */
const __vue_script__$f = script$f;

/* template */
var __vue_render__$f = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ModalsRadioToggle',{staticClass:"modal-measure",attrs:{"title":"卷帘","sub-title":"方式：","options":_vm.types},on:{"change":_vm.typeChange},model:{value:(_vm.type),callback:function ($$v) {_vm.type=$$v;},expression:"type"}})};
var __vue_staticRenderFns__$f = [];

  /* style */
  const __vue_inject_styles__$f = undefined;
  /* scoped */
  const __vue_scope_id__$f = undefined;
  /* module identifier */
  const __vue_module_identifier__$f = undefined;
  /* functional template */
  const __vue_is_functional_template__$f = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var LayerSwipe = normalizeComponent_1(
    { render: __vue_render__$f, staticRenderFns: __vue_staticRenderFns__$f },
    __vue_inject_styles__$f,
    __vue_script__$f,
    __vue_scope_id__$f,
    __vue_is_functional_template__$f,
    __vue_module_identifier__$f,
    undefined,
    undefined
  );

var modals = {
  'attribute-info': AttributeInfo,
  'measure-select': MeasureSelect,
  'layer-swipe': LayerSwipe
};
var script$g = {
  name: 'WebGISModals',
  mixins: [privateEventHubInject],
  components: _objectSpread({}, modals),
  data: function data() {
    return {
      data: null,
      modal: ''
    };
  },
  methods: {
    changeModal: function changeModal(modal, data) {
      this.data = data;
      this.modal = modal;
    }
  },
  created: function created() {
    this.$eventHub.$on(['changeModal', 'clear'], this.changeModal);
  },
  beforeDestroy: function beforeDestroy() {
    this.$eventHub.$off(['changeModal', 'clear'], this.changeModal);
  }
};

/* script */
const __vue_script__$g = script$g;

/* template */
var __vue_render__$g = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"webgis-transition-fade"}},[_c('keep-alive',[_c(_vm.modal,{tag:"component",attrs:{"data":_vm.data}})],1)],1)};
var __vue_staticRenderFns__$g = [];

  /* style */
  const __vue_inject_styles__$g = undefined;
  /* scoped */
  const __vue_scope_id__$g = undefined;
  /* module identifier */
  const __vue_module_identifier__$g = undefined;
  /* functional template */
  const __vue_is_functional_template__$g = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var Modals = normalizeComponent_1(
    { render: __vue_render__$g, staticRenderFns: __vue_staticRenderFns__$g },
    __vue_inject_styles__$g,
    __vue_script__$g,
    __vue_scope_id__$g,
    __vue_is_functional_template__$g,
    __vue_module_identifier__$g,
    undefined,
    undefined
  );

var script$h = {
  name: 'WebGISRollingScreen',
  props: {
    type: String,
    value: Number
  },
  data: function data() {
    return {
      privateValue: this.value
    };
  },
  computed: {
    lineStyle: function lineStyle() {
      var value = this.privateValue + '%';
      return this.type === 'vertical' ? {
        left: value
      } : {
        bottom: value
      };
    }
  },
  watch: {
    value: function value() {
      this.privateValue = this.value;
    }
  }
};

var css$h = ".webgis-rolling-screen__slider .el-slider__bar,.webgis-rolling-screen__slider .el-slider__runway{margin:0;height:0;background:0 0}";
styleInject(css$h);

var css$i = ".webgis-rolling-screen__line[data-v-e382b30a]{height:100%;width:1px;background:#409eff;z-index:0;left:0}.webgis-rolling-screen__slider[data-v-e382b30a]{position:absolute!important;width:100%;top:50%;left:0;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:0}.webgis-rolling-screen.webgis-rolling-screen_horizontal .webgis-rolling-screen__line[data-v-e382b30a]{height:1px;width:100%}.webgis-rolling-screen.webgis-rolling-screen_horizontal .webgis-rolling-screen__slider[data-v-e382b30a]{width:auto;height:100%;top:0;left:50%;-webkit-transform:translate(-50%);transform:translate(-50%)}";
styleInject(css$i);

/* script */
const __vue_script__$h = script$h;
/* template */
var __vue_render__$h = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-rolling-screen",class:{ 'webgis-rolling-screen_horizontal': _vm.type === 'horizontal' }},[_c('div',{staticClass:"webgis-rolling-screen__line webgis-absolute-layer",style:(_vm.lineStyle)}),_c('el-slider',{staticClass:"webgis-rolling-screen__slider webgis-absolute-layer",attrs:{"vertical":_vm.type === 'horizontal',"show-tooltip":false},on:{"input":function($event){return _vm.$emit('input', _vm.privateValue)}},model:{value:(_vm.privateValue),callback:function ($$v) {_vm.privateValue=$$v;},expression:"privateValue"}})],1)};
var __vue_staticRenderFns__$h = [];

  /* style */
  const __vue_inject_styles__$h = undefined;
  /* scoped */
  const __vue_scope_id__$h = "data-v-e382b30a";
  /* module identifier */
  const __vue_module_identifier__$h = undefined;
  /* functional template */
  const __vue_is_functional_template__$h = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var RollingScreen = normalizeComponent_1(
    { render: __vue_render__$h, staticRenderFns: __vue_staticRenderFns__$h },
    __vue_inject_styles__$h,
    __vue_script__$h,
    __vue_scope_id__$h,
    __vue_is_functional_template__$h,
    __vue_module_identifier__$h,
    undefined,
    undefined
  );

var script$i = {
  name: 'WebGIS',
  mixins: [webgisProvide, webgisPropsInject, privateEventHubProvide],
  components: {
    Map: WebGISMap,
    Aside: Aside,
    Controls: Controls,
    Modals: Modals,
    RollingScreen: RollingScreen
  },
  data: function data() {
    return {
      showAside: false,
      rollingScreen: {
        active: false,
        type: 'vertical',
        value: 50
      }
    };
  },
  methods: {
    toggleAside: function toggleAside() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.webgisConfig.showAside;
      this.webgisConfig.showAside = state;
    },
    rollingScreenToggleActive: function rollingScreenToggleActive() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.rollingScreen.active;
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'vertical';
      this.rollingScreen.active = state;
      this.rollingScreen.type = type;

      if (state) {
        this.rollingScreenChange();
      }
    },
    afterInitWebgis: function afterInitWebgis() {
      var _this = this;

      this.$eventHub.$on('rollingScreenToggleActive', this.rollingScreenToggleActive);
      this.$eventHub.$on('clear', function () {
        return _this.rollingScreenToggleActive(false);
      });
    },
    rollingScreenChange: function rollingScreenChange() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rollingScreen.value;
      this.rollingScreen.value = value;
      this.$webgis.modules.layerSwipe.changeValue(value);
    }
  },
  activated: function activated() {
    this.$webgis && this.$webgis.updateSize();
  },
  mounted: function mounted() {
    this.$eventHub.$on('toggleAside', this.toggleAside);
  },
  beforeDestroy: function beforeDestroy() {
    this.$eventHub.$off('toggleAside', this.toggleAside);
    this.$eventHub.$off('rollingScreenToggleActive', this.rollingScreenToggleActive);
  }
};

var css$j = ".webgis-container[data-v-241a6f50]{position:relative;overflow:hidden;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-map[data-v-241a6f50]{position:absolute;width:100%;height:100%}.webgis-aside[data-v-241a6f50],.webgis-slot[data-v-241a6f50]{position:relative;-webkit-box-flex:0;-ms-flex:none;flex:none}.webgis-main[data-v-241a6f50]{position:relative;height:0;-webkit-box-flex:1;-ms-flex:1;flex:1}";
styleInject(css$j);

/* script */
const __vue_script__$i = script$i;
/* template */
var __vue_render__$i = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"loading",rawName:"v-loading",value:(!_vm.webgisReady),expression:"!webgisReady"}],staticClass:"webgis-container"},[_c('Map',{attrs:{"modules":_vm.webgisConfig.modules,"options":_vm.webgisConfig.options,"show-controls":_vm.webgisConfig.showControls,"controls":_vm.webgisConfig.controls},on:{"init":_vm.initWebgis}}),(_vm.$slots.aside)?_c('div',{staticClass:"webgis-slot"},[_vm._t("aside")],2):_vm._e(),_c('div',{staticClass:"webgis-aside-wrapper"},[_c('transition',{attrs:{"name":"webgis-transition-slide"}},[(_vm.webgisConfig.showAside)?_c('Aside'):_vm._e()],1)],1),_c('div',{staticClass:"webgis-main"},[_c('transition',{attrs:{"name":"webgis-transition-fade"}},[_c('keep-alive',[(_vm.webgisConfig.showControls && _vm.$webgis)?_c('Controls'):_vm._e()],1)],1)],1),(_vm.rollingScreen.active)?_c('RollingScreen',{attrs:{"type":_vm.rollingScreen.type,"value":_vm.rollingScreen.value},on:{"input":_vm.rollingScreenChange}}):_vm._e(),_c('Modals')],1)};
var __vue_staticRenderFns__$i = [];

  /* style */
  const __vue_inject_styles__$i = undefined;
  /* scoped */
  const __vue_scope_id__$i = "data-v-241a6f50";
  /* module identifier */
  const __vue_module_identifier__$i = undefined;
  /* functional template */
  const __vue_is_functional_template__$i = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var WebGIS = normalizeComponent_1(
    { render: __vue_render__$i, staticRenderFns: __vue_staticRenderFns__$i },
    __vue_inject_styles__$i,
    __vue_script__$i,
    __vue_scope_id__$i,
    __vue_is_functional_template__$i,
    __vue_module_identifier__$i,
    undefined,
    undefined
  );

var screenPlan = {
  1: {
    height: '100%',
    spans: [24]
  },
  2: {
    height: '100%',
    spans: [12, 12]
  },
  3: {
    height: '50%',
    spans: [12, 12, 24]
  },
  4: {
    height: '50%',
    spans: [12, 12, 12, 12]
  },
  5: {
    height: '50%',
    spans: [8, 8, 8, 12, 12]
  },
  6: {
    height: '50%',
    spans: [8, 8, 8, 8, 8, 8]
  }
};

var script$j = {
  name: 'WebGISSplitScreenCommonHeader',
  props: {
    title: String
  }
};

var css$k = ".webgis-screen-common-header[data-v-3ed1314d]{padding:0 10px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;background-color:#9db8e9}.webgis-screen-common-header__title[data-v-3ed1314d]{color:#fff;font-size:13px;-webkit-box-flex:1;-ms-flex:1;flex:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.webgis-screen-common-header .el-button[data-v-3ed1314d]{color:#fff;font-size:16px;margin-left:6px}.webgis-screen-common-header .el-button[data-v-3ed1314d]:hover{color:#409eff}";
styleInject(css$k);

/* script */
const __vue_script__$j = script$j;
/* template */
var __vue_render__$j = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-screen-common-header"},[_c('span',{staticClass:"webgis-screen-common-header__title"},[_vm._v("\n    "+_vm._s(_vm.title)+"\n  ")]),_vm._t("default")],2)};
var __vue_staticRenderFns__$j = [];

  /* style */
  const __vue_inject_styles__$j = undefined;
  /* scoped */
  const __vue_scope_id__$j = "data-v-3ed1314d";
  /* module identifier */
  const __vue_module_identifier__$j = undefined;
  /* functional template */
  const __vue_is_functional_template__$j = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var CommonHeader = normalizeComponent_1(
    { render: __vue_render__$j, staticRenderFns: __vue_staticRenderFns__$j },
    __vue_inject_styles__$j,
    __vue_script__$j,
    __vue_scope_id__$j,
    __vue_is_functional_template__$j,
    __vue_module_identifier__$j,
    undefined,
    undefined
  );

var script$k = {
  name: 'WebGISSplitScreenHeader',
  mixins: [controlsClean, controlsFeatureSelect],
  props: {
    title: String
  },
  components: {
    CommonHeader: CommonHeader
  }
};

var css$l = ".webgis-split-screen-header[data-v-7576adbc]{height:43px}";
styleInject(css$l);

/* script */
const __vue_script__$k = script$k;
/* template */
var __vue_render__$k = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('CommonHeader',{staticClass:"webgis-split-screen-header",attrs:{"title":_vm.title}},[(_vm.webgisReady && _vm.$webgis)?_c('div',{staticClass:"webgis-split-screen-header__btn-group"},[_c('el-button',{attrs:{"type":"text","icon":"el-icon-search"}}),_c('el-button',{attrs:{"type":"text","icon":"el-icon-zoom-in"},on:{"click":function($event){return _vm.$webgis.interactions.zoom.change('zoom-in')}}}),_c('el-button',{attrs:{"type":"text","icon":"el-icon-zoom-out"},on:{"click":function($event){return _vm.$webgis.interactions.zoom.change('zoom-out')}}}),_c('el-button',{attrs:{"type":"text","icon":"el-icon-refresh-right"},on:{"click":function($event){return _vm.$webgis.interactions.zoom.change('revert')}}}),_c('el-button',{attrs:{"type":"text","icon":"el-icon-thumb"},on:{"click":function($event){return _vm.featureSelectToggle()}}}),_c('el-button',{attrs:{"type":"text","icon":"el-icon-delete"},on:{"click":function($event){return _vm.clear()}}})],1):_vm._e()])};
var __vue_staticRenderFns__$k = [];

  /* style */
  const __vue_inject_styles__$k = undefined;
  /* scoped */
  const __vue_scope_id__$k = "data-v-7576adbc";
  /* module identifier */
  const __vue_module_identifier__$k = undefined;
  /* functional template */
  const __vue_is_functional_template__$k = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ScreenHeader = normalizeComponent_1(
    { render: __vue_render__$k, staticRenderFns: __vue_staticRenderFns__$k },
    __vue_inject_styles__$k,
    __vue_script__$k,
    __vue_scope_id__$k,
    __vue_is_functional_template__$k,
    __vue_module_identifier__$k,
    undefined,
    undefined
  );

var script$l = {
  name: 'WebGISSplitScreenListItem',
  mixins: [webgisProvide, privateEventHubProvide, webgisPropsInject],
  components: {
    Map: WebGISMap,
    ScreenHeader: ScreenHeader,
    Modals: Modals
  },
  props: {
    data: Object
  },
  computed: {
    currentOptions: function currentOptions() {
      var layer = this.data.layer;
      return _objectSpread({}, this.webgisConfig.options, {
        showLayers: layer.config && layer.config.name
      });
    }
  }
};

var css$m = ".webgis-screen-list-item[data-v-9a03f232]{position:relative;overflow:hidden;height:100%;padding-top:42px}.webgis-screen-list-item__header[data-v-9a03f232]{margin-top:-42px}.webgis-screen-list-item__webgis[data-v-9a03f232]{border:1px solid #dcdfe6}.webgis-screen-list-item__attribute-info[data-v-9a03f232]{top:50px}";
styleInject(css$m);

/* script */
const __vue_script__$l = script$l;
/* template */
var __vue_render__$l = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"loading",rawName:"v-loading",value:(!_vm.webgisReady),expression:"!webgisReady"}],staticClass:"webgis-screen-list-item webgis-box-shadow-base"},[_c('ScreenHeader',{staticClass:"webgis-screen-list-item__header",attrs:{"title":_vm.data.layer.name || '未选择图层'}}),_c('Map',{attrs:{"modules":_vm.webgisConfig.modules,"options":_vm.currentOptions,"show-controls":false,"controls":[]},on:{"init":_vm.initWebgis}}),_c('Modals',{staticClass:"webgis-screen-list-item__attribute-info"})],1)};
var __vue_staticRenderFns__$l = [];

  /* style */
  const __vue_inject_styles__$l = undefined;
  /* scoped */
  const __vue_scope_id__$l = "data-v-9a03f232";
  /* module identifier */
  const __vue_module_identifier__$l = undefined;
  /* functional template */
  const __vue_is_functional_template__$l = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ScreenListItem = normalizeComponent_1(
    { render: __vue_render__$l, staticRenderFns: __vue_staticRenderFns__$l },
    __vue_inject_styles__$l,
    __vue_script__$l,
    __vue_scope_id__$l,
    __vue_is_functional_template__$l,
    __vue_module_identifier__$l,
    undefined,
    undefined
  );

var script$m = {
  name: 'WebGISSplitScreenList',
  components: {
    ScreenListItem: ScreenListItem
  },
  props: {
    screenData: Array
  },
  data: function data() {
    return {
      webgisList: {}
    };
  },
  computed: {
    splitScreenData: function splitScreenData() {
      var spans = this.currentScreenPlan.spans;

      if (spans) {
        var data = this.screenActivedData;
        data.forEach(function (item, index) {
          item.span = spans[index];
        });
        return chunk(data, data.length >= 5 ? 3 : 2);
      } else {
        return [];
      }
    },
    screenActivedData: function screenActivedData() {
      return this.screenData.filter(function (item) {
        return item.show;
      });
    },
    currentScreenPlan: function currentScreenPlan() {
      return screenPlan[this.screenActivedData.length] || {};
    }
  },
  methods: {
    webgisInit: function webgisInit(id, webgis) {
      var _this = this;

      if (webgis) {
        this.webgisList[id] = webgis;
        var allReadyState = !this.screenActivedData.find(function (item) {
          return !_this.webgisList[item.id];
        });

        if (allReadyState) {
          this.$emit('webgisReady', this.webgisList);
        }

        if (!webgis._bindMoveend) {
          webgis._bindMoveend = webgis.olMap.on('moveend', function () {
            webgis.interactions.zoom.syncMapsMove(Object.values(_this.webgisList).filter(function (item) {
              return item.id !== webgis.id;
            }));
          });
        }
      }
    },
    updateSize: function updateSize() {
      this.$nextTick(function () {
        var _this2 = this;

        this.screenActivedData.forEach(function (data) {
          var webgis = _this2.webgisList[data.id];
          webgis && webgis.updateSize();
        });
      });
    }
  },
  watch: {
    screenActivedData: function screenActivedData(newVal) {
      var webgisList = this.webgisList;
      Object.keys(webgisList).forEach(function (key) {
        if (!newVal.find(function (item) {
          return item.id === +key;
        })) {
          delete webgisList[key];
        }
      });
      this.updateSize();
    }
  }
};

var css$n = ".webgis-screen-list[data-v-70fc9cce]{height:100%}.webgis-screen-list__row[data-v-70fc9cce]{padding-bottom:8px}.webgis-screen-list__col[data-v-70fc9cce]{height:100%}";
styleInject(css$n);

/* script */
const __vue_script__$m = script$m;
/* template */
var __vue_render__$m = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-screen-list"},_vm._l((_vm.splitScreenData),function(data,index1){return _c('el-row',{key:index1,staticClass:"webgis-screen-list__row",style:({ height: _vm.currentScreenPlan.height }),attrs:{"gutter":10}},_vm._l((data),function(item){return _c('el-col',{key:item.id,staticClass:"webgis-screen-list__col",attrs:{"span":item.span}},[_c('ScreenListItem',{attrs:{"data":item},on:{"init":function($event){return _vm.webgisInit(item.id, $event)}}})],1)}),1)}),1)};
var __vue_staticRenderFns__$m = [];

  /* style */
  const __vue_inject_styles__$m = undefined;
  /* scoped */
  const __vue_scope_id__$m = "data-v-70fc9cce";
  /* module identifier */
  const __vue_module_identifier__$m = undefined;
  /* functional template */
  const __vue_is_functional_template__$m = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ScreenList = normalizeComponent_1(
    { render: __vue_render__$m, staticRenderFns: __vue_staticRenderFns__$m },
    __vue_inject_styles__$m,
    __vue_script__$m,
    __vue_scope_id__$m,
    __vue_is_functional_template__$m,
    __vue_module_identifier__$m,
    undefined,
    undefined
  );

var script$n = {
  name: 'WebGISSplitScreenSetting',
  mixins: [splitScreenToggle],
  components: {
    CommonHeader: CommonHeader,
    ElSelectTree: ElSelectTree
  },
  props: {
    screenData: Array,
    layerTree: Array
  },
  data: function data() {
    return {
      number: this.screenData.length,
      numberData: 6
    };
  }
};

var css$o = ".webgis-screen-setting[data-v-578cc52d]{font-size:13px}.webgis-screen-setting__body[data-v-578cc52d]{border:1px solid #dcdfe6;-webkit-box-flex:1;-ms-flex:1;flex:1;padding:8px}.webgis-screen-setting__title[data-v-578cc52d]{margin-bottom:8px}.webgis-screen-setting__label[data-v-578cc52d]{display:inline-block;width:65px}.webgis-screen-setting__number[data-v-578cc52d]{margin-bottom:16px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.webgis-screen-setting__select[data-v-578cc52d]{-webkit-box-flex:1;-ms-flex:1;flex:1}.webgis-screen-setting__view[data-v-578cc52d]{margin-bottom:8px;display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-screen-setting__view-list[data-v-578cc52d]{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;width:129px}.webgis-screen-setting__view-list-item[data-v-578cc52d]{margin-bottom:8px;margin-right:8px}.webgis-screen-setting__view-list-item .el-button[data-v-578cc52d]{width:35px;height:35px;padding:0}.webgis-screen-setting__layer[data-v-578cc52d]{margin-bottom:24px}.webgis-screen-setting__layer-item[data-v-578cc52d]{margin-bottom:5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.webgis-screen-setting__layer-label[data-v-578cc52d]{background-color:#9db8e9;color:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:65px;margin-right:5px;border-radius:4px}.webgis-screen-setting__footer[data-v-578cc52d]{text-align:center;margin-bottom:16px}";
styleInject(css$o);

/* script */
const __vue_script__$n = script$n;
/* template */
var __vue_render__$n = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-screen-setting webgis-box-shadow-base"},[_c('CommonHeader',{attrs:{"title":"分屏展示"}},[_c('el-button',{staticClass:"webgis-screen-setting__close",attrs:{"type":"text","icon":"el-icon-close"},on:{"click":function($event){return _vm.splitScreenToggle()}}})],1),_c('div',{staticClass:"webgis-screen-setting__body"},[_c('h3',{staticClass:"webgis-screen-setting__title"},[_vm._v("设置屏数")]),_c('div',{staticClass:"webgis-screen-setting__number"},[_c('span',{staticClass:"webgis-screen-setting__label"},[_vm._v("\n        屏数选择\n      ")]),_c('el-select',{staticClass:"webgis-screen-setting__select",attrs:{"value":_vm.number,"size":"mini","placeholder":"请选择"},on:{"change":function($event){return _vm.$emit('changeScreenLen', _vm.number)}},model:{value:(_vm.number),callback:function ($$v) {_vm.number=$$v;},expression:"number"}},_vm._l((_vm.numberData),function(item){return _c('el-option',{key:item,attrs:{"label":item,"value":item}})}),1)],1),_c('div',{staticClass:"webgis-screen-setting__view"},[_c('span',{staticClass:"webgis-screen-setting__label"},[_vm._v("\n        分屏视图\n      ")]),_c('ul',{staticClass:"webgis-screen-setting__view-list webgis-list-unstyled"},_vm._l((_vm.screenData),function(item,index){return _c('li',{key:index,staticClass:"webgis-screen-setting__view-list-item"},[_c('el-button',{attrs:{"size":"mini","type":item.show ? 'primary' : ''},on:{"click":function($event){return _vm.$emit('changeScreenActive', index)}}},[_vm._v("\n            "+_vm._s(index + 1)+"\n          ")])],1)}),0)]),_c('h3',{staticClass:"webgis-screen-setting__title"},[_vm._v("选择图层")]),_c('ul',{staticClass:"webgis-screen-setting__layer webgis-list-unstyled"},_vm._l((_vm.screenData),function(data,index){return _c('li',{key:index,staticClass:"webgis-screen-setting__layer-item"},[_c('span',{staticClass:"webgis-screen-setting__layer-label"},[_vm._v("\n          第"+_vm._s(index + 1)+"屏\n        ")]),_c('el-select-tree',{staticClass:"webgis-screen-setting__layer-select",attrs:{"size":"mini","placeholder":"请选择","width":"177px","value":data.layer.id,"data":_vm.layerTree,"props":{ value: 'id', label: 'name', children: 'children' }},on:{"change":function($event){return _vm.$emit('changeScreenLayer', index, $event)}}})],1)}),0),_c('div',{staticClass:"webgis-screen-setting__footer"},[_c('el-button',{attrs:{"size":"mini","type":"primary"}},[_vm._v("分屏展示")]),_c('el-button',{attrs:{"size":"mini"},on:{"click":function($event){return _vm.splitScreenToggle()}}},[_vm._v("取消")])],1)])],1)};
var __vue_staticRenderFns__$n = [];

  /* style */
  const __vue_inject_styles__$n = undefined;
  /* scoped */
  const __vue_scope_id__$n = "data-v-578cc52d";
  /* module identifier */
  const __vue_module_identifier__$n = undefined;
  /* functional template */
  const __vue_is_functional_template__$n = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var ScreenSetting = normalizeComponent_1(
    { render: __vue_render__$n, staticRenderFns: __vue_staticRenderFns__$n },
    __vue_inject_styles__$n,
    __vue_script__$n,
    __vue_scope_id__$n,
    __vue_is_functional_template__$n,
    __vue_module_identifier__$n,
    undefined,
    undefined
  );

var script$o = {
  name: 'WebGISSplitScreen',
  components: {
    ScreenList: ScreenList,
    ScreenSetting: ScreenSetting
  },
  data: function data() {
    return {
      screenData: [{
        id: 0,
        show: true,
        layer: {}
      }],
      layerData: [],
      layerTree: []
    };
  },
  methods: {
    changeScreenLen: function changeScreenLen(number) {
      var data = this.screenData;

      while (number < data.length) {
        this.screenData.pop();
      }

      while (number > data.length) {
        data.push({
          id: data.length,
          show: true,
          layer: {}
        });
      }
    },
    changeScreenActive: function changeScreenActive(index) {
      this.screenData[index].show = !this.screenData[index].show;
    },
    changeScreenLayer: function changeScreenLayer(index, id) {
      this.screenData[index].layer = this.layerData.find(function (item) {
        return item.id === id;
      });
    },
    webgisReady: function webgisReady(webgisList) {
      if (!this.layerData.length) {
        var webgis = webgisList[this.screenData[0].id];
        this.layerTree = webgis.treeNodes;
        this.layerData = webgis.treeLayers;
      }

      this.$emit('init-split-screen', this.screenData.map(function (item) {
        return _objectSpread({}, item, {
          webgis: webgisList[item.id]
        });
      }));
    }
  },
  activated: function activated() {
    this.$refs.screenList.updateSize();
  }
};

var css$p = ".webgis-split-screen[data-v-6affe5c6]{display:-webkit-box;display:-ms-flexbox;display:flex;position:absolute;width:100%;height:100%;padding:8px 8px 0;-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.webgis-split-screen__content[data-v-6affe5c6]{-webkit-box-flex:1;-ms-flex:1;flex:1}.webgis-split-screen__setting[data-v-6affe5c6]{margin-left:8px;margin-bottom:8px;width:260px}";
styleInject(css$p);

/* script */
const __vue_script__$o = script$o;
/* template */
var __vue_render__$o = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-split-screen"},[_c('ScreenList',{ref:"screenList",staticClass:"webgis-split-screen__content",attrs:{"screen-data":_vm.screenData},on:{"webgisReady":_vm.webgisReady}}),_c('ScreenSetting',{staticClass:"webgis-split-screen__setting",attrs:{"screen-data":_vm.screenData,"layer-tree":_vm.layerTree},on:{"changeScreenLayer":_vm.changeScreenLayer,"changeScreenLen":_vm.changeScreenLen,"changeScreenActive":_vm.changeScreenActive}})],1)};
var __vue_staticRenderFns__$o = [];

  /* style */
  const __vue_inject_styles__$o = undefined;
  /* scoped */
  const __vue_scope_id__$o = "data-v-6affe5c6";
  /* module identifier */
  const __vue_module_identifier__$o = undefined;
  /* functional template */
  const __vue_is_functional_template__$o = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var SplitScreen = normalizeComponent_1(
    { render: __vue_render__$o, staticRenderFns: __vue_staticRenderFns__$o },
    __vue_inject_styles__$o,
    __vue_script__$o,
    __vue_scope_id__$o,
    __vue_is_functional_template__$o,
    __vue_module_identifier__$o,
    undefined,
    undefined
  );

var script$p = {
  name: 'WebGISMain',
  mixins: [webgisPropsProvide],
  components: {
    WebGIS: WebGIS,
    SplitScreen: SplitScreen
  },
  data: function data() {
    return {
      show: true,
      splitScreenState: this.splitScreen
    };
  },
  computed: {
    component: function component() {
      return this.splitScreenState ? SplitScreen : WebGIS;
    }
  },
  methods: {
    splitScreenToggle: function splitScreenToggle() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.splitScreenState;
      this.splitScreenState = state;
      this.$emit('splitScreenToggle', state);
    }
  },
  watch: {
    splitScreen: function splitScreen(newVal) {
      this.splitScreenState = newVal;
    },
    'options.serviceCode': function optionsServiceCode() {
      var _this = this;

      this.show = false;
      this.$nextTick(function () {
        return _this.show = true;
      });
    }
  },
  created: function created() {
    eventHub.$on('splitScreenToggle', this.splitScreenToggle);
  },
  beforeDestroy: function beforeDestroy() {
    eventHub.$off('splitScreenToggle', this.splitScreenToggle);
  }
};

/* script */
const __vue_script__$p = script$p;

/* template */
var __vue_render__$p = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.show)?_c('transition',{attrs:{"name":"webgis-transition-fade","mode":"out-in"}},[_c('keep-alive',[_c(_vm.component,{tag:"component",on:{"init":function($event){return _vm.$emit('init', $event)},"init-split-screen":function($event){return _vm.$emit('init-split-screen', $event)}},scopedSlots:_vm._u([(_vm.$slots.aside)?{key:"aside",fn:function(){return [_vm._t("aside")]},proxy:true}:null],null,true)})],1)],1):_vm._e()};
var __vue_staticRenderFns__$p = [];

  /* style */
  const __vue_inject_styles__$p = undefined;
  /* scoped */
  const __vue_scope_id__$p = undefined;
  /* module identifier */
  const __vue_module_identifier__$p = undefined;
  /* functional template */
  const __vue_is_functional_template__$p = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var WebGIS$1 = normalizeComponent_1(
    { render: __vue_render__$p, staticRenderFns: __vue_staticRenderFns__$p },
    __vue_inject_styles__$p,
    __vue_script__$p,
    __vue_scope_id__$p,
    __vue_is_functional_template__$p,
    __vue_module_identifier__$p,
    undefined,
    undefined
  );

var script$q = {
  components: {
    WebGISMap: WebGISMap
  },
  props: {
    webgisGroup: {
      type: Object,
      default: function _default() {
        return {};
      }
    }
  },
  data: function data() {
    return {
      showResult: false,
      webgis: {
        item1: null,
        item2: null
      },
      webgisResult: null
    };
  },
  computed: {
    allWebgis: function allWebgis() {
      var webgis = this.webgis;
      return [webgis.item1, webgis.item2, this.webgisResult].filter(function (item) {
        return item;
      });
    },
    webgisGroupPrivate: function webgisGroupPrivate() {
      var webgisGroup = this.webgisGroup;
      var result = {};
      var value;

      for (var key in webgisGroup) {
        if (webgisGroup.hasOwnProperty(key)) {
          value = webgisGroup[key];

          if (value) {
            result[key] = value;
          }
        }
      }

      return result;
    }
  },
  methods: {
    doAnalysis: function doAnalysis() {
      var _this = this;

      var item1 = this.webgisGroup.item1;
      var item2 = this.webgisGroup.item2;

      if (item1.id && item2.id) {
        var params = {
          inputServiceCode: item1.id,
          overlayServiceCode: item2.id
        };

        if (item1.field && item1.fieldValue) {
          params.inputFilter = "".concat(item1.field, " = '").concat(item1.fieldValue, "'");
        }

        if (item2.field && item2.fieldValue) {
          params.overlayFilter = "".concat(item2.field, " = '").concat(item2.fieldValue, "'");
        }

        return this.webgisResult.modules.diffAnalysis.doAnalysis(params).then(function (res) {
          _this.showResult = true;

          _this.updateSize();

          return res;
        });
      } else {
        var error = '对比分析：参数不全';
        errorMessage(error);
        return Promise.reject(error);
      }
    },
    updateFeature: function updateFeature(name, features) {
      var webgis = this.webgis[name];
      webgis.renderFeatureData(features);
    },
    initWebgis: function initWebgis(webgis) {
      this.webgisResult = webgis;
      this.$emit('webgisResultInit', webgis);
      this.bindMoveend(webgis);
      this.updateSize();
      webgis.setLayerOpacity(this.webgisGroup.item1.id, 0);
    },
    webgisGroupInit: function webgisGroupInit(key, webgis) {
      this.webgis[key] = webgis;
      this.$emit('webgisGroupInit', key, webgis);
      this.bindMoveend(webgis);
      this.updateSize();
    },
    updateSize: function updateSize() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.webgis.item1 && _this2.webgis.item1.interactions.zoom.resetView();

        _this2.allWebgis.forEach(function (item) {
          return item.olMap.updateSize();
        });
      });
    },
    bindMoveend: function bindMoveend(webgis) {
      var _this3 = this;

      if (!webgis._bindMoveend) {
        webgis._bindMoveend = true;
        webgis.olMap.on('moveend', function () {
          webgis.interactions.zoom.syncMapsMove(_this3.allWebgis.filter(function (item) {
            return webgis.id !== item.id;
          }));
        });
      }
    },
    syncWebgisList: function syncWebgisList() {
      var webgis = this.webgis;
      if (!this.webgisGroup.item1) webgis.item1 = null;
      if (!this.webgisGroup.item2) webgis.item2 = null;

      if (this.webgisGroup.length !== 2) {
        this.showResult = false;
      }
    }
  },
  watch: {
    webgisGroup: function webgisGroup() {
      this.updateSize();
      this.syncWebgisList();
    },
    'webgisGroup.item1': function webgisGroupItem1() {
      this.webgis.item1.interactions.zoom.resetView();
    }
  }
};

var css$q = ".webgis-diff-analysis[data-v-e09eb7ea]{height:100%;display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-diff-analysis__block[data-v-e09eb7ea]{height:100%;-webkit-box-flex:1;-ms-flex:1;flex:1}.webgis-diff-analysis__block_left[data-v-e09eb7ea]{border-right:1px solid #dcdfe6}.webgis-diff-analysis__block_left .webgis-diff-analysis__item[data-v-e09eb7ea]{height:100%}.webgis-diff-analysis__block_right[data-v-e09eb7ea]{display:-webkit-box;display:-ms-flexbox;display:flex}.webgis-diff-analysis__block_right.flex-column[data-v-e09eb7ea]{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.webgis-diff-analysis__block_right.flex-column>.webgis-diff-analysis__item[data-v-e09eb7ea]{height:50%}.webgis-diff-analysis__block_right.flex-column>.webgis-diff-analysis__item[data-v-e09eb7ea]:first-of-type{border-bottom:1px solid #dcdfe6}.webgis-diff-analysis__block_right.flex-column>.webgis-diff-analysis__item[data-v-e09eb7ea]:nth-child(2){border-left:0}.webgis-diff-analysis__block_right>.webgis-diff-analysis__item[data-v-e09eb7ea]{-webkit-box-flex:1;-ms-flex:1;flex:1}.webgis-diff-analysis__block_right>.webgis-diff-analysis__item[data-v-e09eb7ea]:nth-child(2){border-left:1px solid #dcdfe6}.webgis-diff-analysis__item[data-v-e09eb7ea]{position:relative}.webgis-diff-analysis__name[data-v-e09eb7ea]{font-size:13px;position:absolute;top:8px;right:8px;padding:6px 8px;background:#fff;z-index:1}";
styleInject(css$q);

/* script */
const __vue_script__$q = script$q;
/* template */
var __vue_render__$q = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"webgis-diff-analysis"},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showResult),expression:"showResult"}],staticClass:"webgis-diff-analysis__block webgis-diff-analysis__block_left"},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.showResult),expression:"showResult"}],staticClass:"webgis-diff-analysis__item"},[_c('h4',{staticClass:"webgis-diff-analysis__name webgis-box-shadow-base"},[_vm._v("\n        分析结果\n      ")]),_c('WebGISMap',{attrs:{"options":{ showLayers: _vm.webgisGroupPrivate.item1.id },"show-controls":false,"modules":['DiffAnalysis']},on:{"init":_vm.initWebgis}})],1)]),_c('div',{staticClass:"webgis-diff-analysis__block webgis-diff-analysis__block_right",class:{ 'flex-column': _vm.showResult }},_vm._l((_vm.webgisGroupPrivate),function(item,key){return _c('div',{key:key,staticClass:"webgis-diff-analysis__item"},[_c('h4',{staticClass:"webgis-diff-analysis__name webgis-box-shadow-base"},[_vm._v("\n        "+_vm._s(item.name)+"\n      ")]),_c('WebGISMap',{attrs:{"options":{ showLayers: item.id },"show-controls":false},on:{"init":function($event){return _vm.webgisGroupInit(key, $event)}}})],1)}),0)])};
var __vue_staticRenderFns__$q = [];

  /* style */
  const __vue_inject_styles__$q = undefined;
  /* scoped */
  const __vue_scope_id__$q = "data-v-e09eb7ea";
  /* module identifier */
  const __vue_module_identifier__$q = undefined;
  /* functional template */
  const __vue_is_functional_template__$q = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var DiffAnalysis = normalizeComponent_1(
    { render: __vue_render__$q, staticRenderFns: __vue_staticRenderFns__$q },
    __vue_inject_styles__$q,
    __vue_script__$q,
    __vue_scope_id__$q,
    __vue_is_functional_template__$q,
    __vue_module_identifier__$q,
    undefined,
    undefined
  );

DiffAnalysis.install = function (Vue) {
  Vue.component('WebGISDiffAnalysis', DiffAnalysis);
};

var css$r = "[class*=\" webgis-\"],[class^=webgis-]{-webkit-box-sizing:border-box;box-sizing:border-box}.fa-icon{width:auto;height:1em;max-width:100%;max-height:100%;vertical-align:middle}.webgis-transition-fade-enter-active,.webgis-transition-fade-leave-active{-webkit-transition:all .3s;transition:all .3s}.webgis-transition-fade-enter,.webgis-transition-fade-leave-to{opacity:0}.webgis-transition-slide-enter-active,.webgis-transition-slide-leave-active{-webkit-transition:all .3s;transition:all .3s}.webgis-transition-slide-enter,.webgis-transition-slide-leave-to{opacity:0;margin-left:-250px}.webgis-absolute-layer{position:absolute;z-index:1}.webgis-box-shadow-default{-webkit-box-shadow:0 2px 12px 0 rgba(0,0,0,.1);box-shadow:0 2px 12px 0 rgba(0,0,0,.1)}.webgis-box-shadow-base{-webkit-box-shadow:0 2px 4px rgba(0,0,0,.12),0 0 6px rgba(0,0,0,.04);box-shadow:0 2px 4px rgba(0,0,0,.12),0 0 6px rgba(0,0,0,.04)}.webgis-list-unstyled{list-style-type:none;padding-left:0}.webgis-scrollbar-default::-webkit-scrollbar-track-piece{background:#d3dce6}.webgis-scrollbar-default::-webkit-scrollbar{width:4px}.webgis-scrollbar-default::-webkit-scrollbar-thumb{background:#99a9bf}";
styleInject(css$r);

var eventHub$1 = new Vue();
var eventName$1 = 'publicWebgisReady';
var webgisProvidePublic = {
  mixins: [webgisInitCommon],
  methods: {
    initWebgis: function initWebgis(webgis) {
      eventHub$1.$emit(eventName$1, webgis);
      eventHub$1.$webgis = webgis;

      this._afterInitWebgis(webgis);
    }
  }
};
var webgisInjectPublic = {
  mixins: [webgisInitCommon],
  methods: {
    _initWebgis: function _initWebgis(webgis) {
      eventHub$1.$off(eventName$1, this._initWebgis);

      this._afterInitWebgis(webgis);
    }
  },
  created: function created() {
    var webgis = eventHub$1.$webgis;

    if (webgis) {
      this.$webgis = webgis;

      this._initWebgis(webgis);
    } else {
      eventHub$1.$on(eventName$1, this._initWebgis);
    }
  }
};

WebGIS$1.install = function (Vue) {
  Vue.component('WebGIS', WebGIS$1);
  Vue.use(DiffAnalysis);
};

export default WebGIS$1;
export { DiffAnalysis as WebGISDiffAnalysis, webgisInject as webgisInjectPrivate, webgisInjectPublic, webgisProvide as webgisProvidePrivate, webgisProvidePublic };
//# sourceMappingURL=index.js.map
