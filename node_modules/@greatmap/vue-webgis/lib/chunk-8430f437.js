/*!
 * vue-webgis v0.7.3
 */

import Vue from 'vue';
import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.string.includes';
import 'core-js/modules/es6.array.find';
import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.object.keys';

var errorAliasMap = {
  'Failed to execute query': '执行查询失败',
  'Network Error': '网络连接失败',
  'timeout of': '网络连接超时'
};
var keys = Object.keys(errorAliasMap);
function getErrorAlias(message) {
  var key = keys.find(function (item) {
    return message.includes(item);
  });
  return key ? errorAliasMap[key] : '';
}

var logMethods = {
  info: console.info,
  error: console.error,
  warning: console.warn,
  success: console.log
};
function messageBox(message) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
  var showBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var Message = Vue.prototype.$message;
  logMethods[type] && logMethods[type]("[".concat(type, "]:"), message);

  if (showBox) {
    message = formatterMessage(message);
    Message({
      message: message,
      type: type,
      duration: 6000,
      showClose: true
    });
  }
}
function errorMessage(message, showBox) {
  messageBox(message, 'error', showBox);
}
function warnMessage(message, showBox) {
  messageBox(message, 'warning', showBox);
}

function formatterMessage(msg) {
  if (msg) {
    if (msg.error) {
      msg = msg.error;
    }

    if (msg.message) {
      msg = msg.message;
    }
  }

  if (msg instanceof Object && !(msg instanceof Error)) {
    msg = JSON.stringify(msg);
  } else {
    msg = String(msg);
  }

  msg = getErrorAlias(msg) || msg;
  msg = msg.length > 80 ? msg.slice(0, 80) + '...' : msg;
  return msg;
}

export { errorMessage as e, warnMessage as w };
//# sourceMappingURL=chunk-8430f437.js.map
