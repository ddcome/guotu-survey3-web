/*!
 * vue-webgis v0.7.3
 */

import { _ as _createClass, a as _classCallCheck, b as _defineProperty } from './chunk-82f2c815.js';
import TileWMS from 'ol/source/TileWMS';
import Tile from 'ol/layer/Tile';
import XYZ from 'ol/source/XYZ';
import TileGrid from 'ol/tilegrid/TileGrid';
import ImageArcGISRest from 'ol/source/ImageArcGISRest';
import OlImageLayer from 'ol/layer/Image';
import { g as gisServerAuth, S as SERVER_CONFIG } from './chunk-bc626433.js';

var LayerManagement =
/*#__PURE__*/
function () {
  function LayerManagement(olMap) {
    _classCallCheck(this, LayerManagement);

    _defineProperty(this, "_olMap", void 0);

    this._olMap = olMap;
  }

  _createClass(LayerManagement, [{
    key: "addLayer",
    value: function addLayer(type, options) {
      var layer;

      switch (type) {
        case 'wms':
          layer = LayerManagement.createWMSLayer(options);
          break;

        case 'wmts':
          layer = LayerManagement.createWMTSLayer(options);
          break;

        case 'image':
          layer = LayerManagement.createImageLayer(options);
          break;

        default:
      }

      this._olMap.addLayer(layer);

      return layer;
    }
  }, {
    key: "removeLayer",
    value: function removeLayer(olLayerRef) {
      this._olMap.removeLayer(olLayerRef);
    }
  }], [{
    key: "createWMSLayer",
    value: function createWMSLayer(_ref) {
      var serverIdWMS = _ref.serverIdWMS,
          serviceCode = _ref.serviceCode,
          zIndex = _ref.zIndex,
          _ref$visible = _ref.visible,
          visible = _ref$visible === void 0 ? false : _ref$visible;
      var token = gisServerAuth.getToken();
      var source = new TileWMS({
        url: SERVER_CONFIG.arcgisService + serviceCode + '/MapServer/WMSServer',
        params: {
          LAYERS: serverIdWMS,
          token: token
        }
      });
      return new Tile({
        source: source,
        zIndex: zIndex,
        visible: visible
      });
    }
  }, {
    key: "createWMTSLayer",
    value: function createWMTSLayer(_ref2) {
      var serviceCode = _ref2.serviceCode,
          extent = _ref2.extent,
          zIndex = _ref2.zIndex,
          _ref2$visible = _ref2.visible,
          visible = _ref2$visible === void 0 ? false : _ref2$visible,
          resolutions = _ref2.resolutions,
          tileInfo = _ref2.tileInfo,
          projection = _ref2.projection;
      var token = gisServerAuth.getToken();
      var tileInfoOrigin = tileInfo.origin;
      var source = new XYZ({
        tileGrid: new TileGrid({
          extent: extent,
          resolutions: resolutions,
          tileSize: tileInfo.cols,
          origin: [tileInfoOrigin.x, tileInfoOrigin.y]
        }),
        projection: projection,
        url: "".concat(SERVER_CONFIG.arcgisRestService).concat(serviceCode, "/ImageServer/tile/{z}/{y}/{x}?token=").concat(token)
      });
      return new Tile({
        source: source,
        zIndex: zIndex,
        visible: visible
      });
    }
  }, {
    key: "createImageLayer",
    value: function createImageLayer(_ref3) {
      var serviceCode = _ref3.serviceCode,
          _ref3$serverType = _ref3.serverType,
          serverType = _ref3$serverType === void 0 ? 'MapServer' : _ref3$serverType,
          _ref3$serverId = _ref3.serverId,
          serverId = _ref3$serverId === void 0 ? '' : _ref3$serverId,
          zIndex = _ref3.zIndex,
          visible = _ref3.visible;
      var source = new ImageArcGISRest({
        ratio: 1,
        params: {
          LAYERS: serverId,
          token: gisServerAuth.getToken()
        },
        url: "".concat(SERVER_CONFIG.arcgis, "/server/rest/services/").concat(serviceCode, "/").concat(serverType)
      });
      return new OlImageLayer({
        source: source,
        zIndex: zIndex,
        visible: visible
      });
    }
  }]);

  return LayerManagement;
}();

export { LayerManagement as L };
//# sourceMappingURL=chunk-2b89b3e5.js.map
