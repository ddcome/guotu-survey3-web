{"version":3,"file":"intersect-analysis-760289f0.js","sources":["../src/gis/api/modules/conflict-detection.js","../src/gis/core/modules/intersect-analysis.js"],"sourcesContent":["import request from '../../utils/request';\nimport { SERVER_CONFIG } from '../../config/server';\n\n/**\n * 相交查询\n * @returns {Promise}\n */\nexport function getIntersectGeometry(sr, geometries, geometry) {\n  return request({\n    url:\n      SERVER_CONFIG.arcgisRestService +\n      'Utilities/Geometry/GeometryServer/intersect',\n    method: 'post',\n    data: {\n      f: 'json',\n      sr,\n      geometry,\n      geometries\n    },\n    analysisToken: true\n  });\n}\n","import { getIntersectGeometry } from '../../api/modules/conflict-detection';\nimport { checkValidArray } from '../../../utils/check-array';\n\nexport default class IntersectAnalysis {\n  _map;\n\n  constructor(map) {\n    this._map = map;\n  }\n\n  /**\n   * 开始分析\n   * @param {String} layerID\n   * @param {Number[]|Geometry} geometry\n   * @return {Promise<Object|null[]>}\n   */\n  doAnalysis(layerID, geometry) {\n    const params = this._map.getLayerInfoParams(layerID);\n    if (params) {\n      // 获取图层属性\n      return this._map.getLayerInfo(params).then((res) => {\n        if (!checkValidArray(res.features)) {\n          return Promise.resolve([]);\n        }\n\n        // 暂存原始的数据\n        const sourceFeaturesData = res;\n        const geometries = {\n          geometries: res.features.map((item) => item.geometry),\n          geometryType: res.geometryType\n        };\n        const geometryObject = this._map.formatGeometryObject(geometry);\n\n        return getIntersectGeometry(\n          this._map.mapConfig.wkid,\n          JSON.stringify(geometries),\n          JSON.stringify(geometryObject)\n        ).then((res) => {\n          // 先解析所有的 features（图层所有的，包括未相交的）\n          const resultData = sourceFeaturesData.features.map((item) => {\n            return {\n              ...item.attributes,\n              meta: {\n                intersectSizeStr: '',\n                intersectSizeNum: 0\n              }\n            };\n          });\n\n          // 解析相交后的数据，如果相交则给 meta 赋值\n          if (checkValidArray(res.geometries)) {\n            const features = this._map.renderFeatureData({\n              features: res.geometries.map((item) => ({\n                geometry: item\n              }))\n            });\n            features.forEach((item, index) => {\n              const area = this._map.formatGeometrySize(item.getGeometry());\n              resultData[index].meta = {\n                intersectSizeStr: area.str,\n                intersectSizeNum: area.num\n              };\n            });\n          }\n\n          return resultData;\n        });\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n\n  /**\n   * 开始分析（批量），返回二维数组（对应传入的 layerIDs 下标）\n   * @param {Array<String>} layerIDs\n   * @param {Number[]|Geometry} geometry\n   * @return {Promise<(Object|null[])[]>}\n   */\n  doAnalysisMulti(layerIDs, geometry) {\n    return Promise.all(layerIDs.map((item) => this.doAnalysis(item, geometry)));\n  }\n}\n"],"names":["getIntersectGeometry","sr","geometries","geometry","request","url","SERVER_CONFIG","arcgisRestService","method","data","f","analysisToken","IntersectAnalysis","map","_map","layerID","params","getLayerInfoParams","getLayerInfo","then","res","checkValidArray","features","Promise","resolve","sourceFeaturesData","item","geometryType","geometryObject","formatGeometryObject","mapConfig","wkid","JSON","stringify","resultData","attributes","meta","intersectSizeStr","intersectSizeNum","renderFeatureData","forEach","index","area","formatGeometrySize","getGeometry","str","num","layerIDs","all","doAnalysis"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAOO,SAASA,oBAAT,CAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,QAA9C,EAAwD;SACtDC,OAAO,CAAC;IACbC,GAAG,EACDC,aAAa,CAACC,iBAAd,GACA,6CAHW;IAIbC,MAAM,EAAE,MAJK;IAKbC,IAAI,EAAE;MACJC,CAAC,EAAE,MADC;MAEJT,EAAE,EAAFA,EAFI;MAGJE,QAAQ,EAARA,QAHI;MAIJD,UAAU,EAAVA;KATW;IAWbS,aAAa,EAAE;GAXH,CAAd;;;ICLmBC;;;6BAGPC,GAAZ,EAAiB;;;;;SACVC,IAAL,GAAYD,GAAZ;;;;;+BASSE,SAASZ,UAAU;;;UACtBa,MAAM,GAAG,KAAKF,IAAL,CAAUG,kBAAV,CAA6BF,OAA7B,CAAf;;UACIC,MAAJ,EAAY;eAEH,KAAKF,IAAL,CAAUI,YAAV,CAAuBF,MAAvB,EAA+BG,IAA/B,CAAoC,UAACC,GAAD,EAAS;cAC9C,CAACC,eAAe,CAACD,GAAG,CAACE,QAAL,CAApB,EAAoC;mBAC3BC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;;;cAIIC,kBAAkB,GAAGL,GAA3B;cACMlB,UAAU,GAAG;YACjBA,UAAU,EAAEkB,GAAG,CAACE,QAAJ,CAAaT,GAAb,CAAiB,UAACa,IAAD;qBAAUA,IAAI,CAACvB,QAAf;aAAjB,CADK;YAEjBwB,YAAY,EAAEP,GAAG,CAACO;WAFpB;;cAIMC,cAAc,GAAG,KAAI,CAACd,IAAL,CAAUe,oBAAV,CAA+B1B,QAA/B,CAAvB;;iBAEOH,oBAAoB,CACzB,KAAI,CAACc,IAAL,CAAUgB,SAAV,CAAoBC,IADK,EAEzBC,IAAI,CAACC,SAAL,CAAe/B,UAAf,CAFyB,EAGzB8B,IAAI,CAACC,SAAL,CAAeL,cAAf,CAHyB,CAApB,CAILT,IAJK,CAIA,UAACC,GAAD,EAAS;gBAERc,UAAU,GAAGT,kBAAkB,CAACH,QAAnB,CAA4BT,GAA5B,CAAgC,UAACa,IAAD,EAAU;uCAEtDA,IAAI,CAACS,UADV;gBAEEC,IAAI,EAAE;kBACJC,gBAAgB,EAAE,EADd;kBAEJC,gBAAgB,EAAE;;;aALL,CAAnB;;gBAWIjB,eAAe,CAACD,GAAG,CAAClB,UAAL,CAAnB,EAAqC;kBAC7BoB,QAAQ,GAAG,KAAI,CAACR,IAAL,CAAUyB,iBAAV,CAA4B;gBAC3CjB,QAAQ,EAAEF,GAAG,CAAClB,UAAJ,CAAeW,GAAf,CAAmB,UAACa,IAAD;yBAAW;oBACtCvB,QAAQ,EAAEuB;mBADiB;iBAAnB;eADK,CAAjB;;cAKAJ,QAAQ,CAACkB,OAAT,CAAiB,UAACd,IAAD,EAAOe,KAAP,EAAiB;oBAC1BC,IAAI,GAAG,KAAI,CAAC5B,IAAL,CAAU6B,kBAAV,CAA6BjB,IAAI,CAACkB,WAAL,EAA7B,CAAb;;gBACAV,UAAU,CAACO,KAAD,CAAV,CAAkBL,IAAlB,GAAyB;kBACvBC,gBAAgB,EAAEK,IAAI,CAACG,GADA;kBAEvBP,gBAAgB,EAAEI,IAAI,CAACI;iBAFzB;eAFF;;;mBASKZ,UAAP;WAhCK,CAAP;SAbK,CAAP;OAFF,MAkDO;eACEX,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;;;;;oCAUYuB,UAAU5C,UAAU;;;aAC3BoB,OAAO,CAACyB,GAAR,CAAYD,QAAQ,CAAClC,GAAT,CAAa,UAACa,IAAD;eAAU,MAAI,CAACuB,UAAL,CAAgBvB,IAAhB,EAAsBvB,QAAtB,CAAV;OAAb,CAAZ,CAAP;;;;;;;;;"}