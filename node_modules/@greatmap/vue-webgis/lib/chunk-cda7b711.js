/*!
 * vue-webgis v0.7.3
 */

import 'core-js/modules/web.dom.iterable';
import { a as _classCallCheck } from './chunk-82f2c815.js';
import { e as _setPrototypeOf } from './chunk-537b1685.js';
import 'core-js/modules/es7.symbol.async-iterator';
import 'core-js/modules/es6.symbol';
import 'core-js/modules/es6.reflect.own-keys';
import construct$1 from 'core-js/library/fn/reflect/construct';

var construct = construct$1;

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !construct) return false;
  if (construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function classMixin() {
  for (var _len = arguments.length, Classes = new Array(_len), _key = 0; _key < _len; _key++) {
    Classes[_key] = arguments[_key];
  }

  var Mix = function Mix() {
    _classCallCheck(this, Mix);

    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }

    for (var _i = 0, _Classes = Classes; _i < _Classes.length; _i++) {
      var Class = _Classes[_i];
      copyProperties(this, _construct(Class, params));
    }
  };

  for (var _i2 = 0, _Classes2 = Classes; _i2 < _Classes2.length; _i2++) {
    var Class = _Classes2[_i2];
    copyProperties(Mix, Class);
    copyProperties(Mix.prototype, Class.prototype);
  }

  return Mix;
}

function copyProperties(target, source) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Reflect.ownKeys(source)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (key !== 'constructor' && key !== 'prototype' && key !== 'name') {
        var desc = Object.getOwnPropertyDescriptor(source, key);
        Object.defineProperty(target, key, desc);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

export { classMixin as c };
//# sourceMappingURL=chunk-cda7b711.js.map
