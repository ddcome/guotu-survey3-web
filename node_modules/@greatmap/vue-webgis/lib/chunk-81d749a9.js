/*!
 * vue-webgis v0.7.3
 */

import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.string.includes';
import { e as errorMessage } from './chunk-8430f437.js';
import { a as analysisAuth, g as gisServerAuth, S as SERVER_CONFIG } from './chunk-bc626433.js';
import axios from 'axios';
import stringify from 'qs/lib/stringify';

function getToken() {
  return getToken.process = getToken.process ? getToken.process : createToken().then(function (res) {
    getToken.process = null;

    if (res && res.token) {
      gisServerAuth.setToken(res);
    }
  });
}
function getAnalysisToken() {
  return createToken.process = createToken.process ? createToken.process : createToken(SERVER_CONFIG.host).then(function (res) {
    createToken.process = null;

    if (res && res.token) {
      analysisAuth.setToken(res);
    }
  });
}

function createToken() {
  var referer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SERVER_CONFIG.host;
  return commonRequest({
    url: SERVER_CONFIG.arcgisToken,
    method: 'post',
    data: {
      username: SERVER_CONFIG.arcgisUsername,
      password: SERVER_CONFIG.arcgisPassword,
      referer: referer,
      client: 'referer',
      f: 'json'
    }
  });
}

var axiosInstance = axios.create({
  timeout: 20000
});
axiosInstance.interceptors.request.use(function (config) {
  if (!config.baseURL) {
    config.baseURL = SERVER_CONFIG.arcgis;
  }

  if (!config.url.includes('/generateToken')) {
    config = addToken(config);
  } else {
    config = postDataTransform(config);
  }

  return config;
}, function (error) {
  errorMessage(error);
  return Promise.reject(error);
});
axiosInstance.interceptors.response.use(function (response) {
  var data = response.data;

  if (!data || data.error) {
    if (data.error === 'TOKEN INVALID') {
      return autoGetToken(response.config.analysisToken);
    } else {
      return Promise.reject(data);
    }
  } else {
    return data;
  }
}, function (error) {
  errorMessage(error);
  return Promise.reject(error);
});

function commonRequest(config) {
  return axiosInstance(config).catch(function (error) {
    errorMessage(error);
    return Promise.reject(error);
  });
}

function addToken(config) {
  return autoGetToken(config.analysisToken).then(function (token) {
    if (config.method === 'post') {
      config.data = config.data || {};
      config.data.token = token;
      postDataTransform(config);
    } else if (config.method === 'get') {
      config.params = config.params || {};
      config.params.token = token;
    }

    return config;
  });
}

function postDataTransform(config) {
  if (config.method === 'post') {
    config.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    config.data = stringify(config.data);
  }

  return config;
}

function autoGetToken(analysisToken) {
  var isAnalysisToken = analysisToken === true;
  var token = (isAnalysisToken ? analysisAuth : gisServerAuth).getToken();

  if (token) {
    return Promise.resolve(token);
  } else {
    return (isAnalysisToken ? getAnalysisToken() : getToken()).then(function () {
      return autoGetToken(analysisToken);
    });
  }
}

function checkValidArray(data) {
  return Array.isArray(data) && data.length;
}

export { checkValidArray as c, commonRequest as r };
//# sourceMappingURL=chunk-81d749a9.js.map
