/*!
 * vue-webgis v0.7.3
 */

import 'vue';
import 'core-js/modules/es6.function.name';
import 'core-js/modules/es7.array.includes';
import 'core-js/modules/es6.string.includes';
import 'core-js/modules/es6.array.find';
import 'core-js/modules/web.dom.iterable';
import 'core-js/modules/es6.object.keys';
import './chunk-8430f437.js';
import 'core-js/library/fn/array/is-array';
import { G as GISEvent } from './chunk-2f41c7fa.js';
import 'core-js/library/fn/array/from';
import 'core-js/library/fn/is-iterable';
import 'core-js/library/fn/object/define-property';
import { a as _classCallCheck, b as _defineProperty, _ as _createClass } from './chunk-82f2c815.js';
import 'core-js/library/fn/symbol/iterator';
import { _ as _inherits, a as _possibleConstructorReturn, b as _getPrototypeOf, c as _assertThisInitialized } from './chunk-537b1685.js';
import 'core-js/library/fn/symbol';
import 'core-js/library/fn/object/get-prototype-of';
import 'core-js/library/fn/object/set-prototype-of';
import 'core-js/library/fn/object/create';
import 'core-js/modules/es7.symbol.async-iterator';
import 'core-js/modules/es6.symbol';
import 'core-js/modules/es6.regexp.split';
import { T as ToggleActive } from './chunk-dd3bd2eb.js';
import 'ol/interaction/DragBox';
import 'ol/Feature';
import 'core-js/modules/es6.reflect.own-keys';
import 'core-js/library/fn/reflect/construct';
import { c as classMixin } from './chunk-cda7b711.js';
import { B as BoxSelection } from './chunk-03adc81b.js';
import { unByKey } from 'ol/Observable';

var FeatureSelect =
/*#__PURE__*/
function (_classMixin) {
  _inherits(FeatureSelect, _classMixin);

  function FeatureSelect(map) {
    var _this;

    _classCallCheck(this, FeatureSelect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeatureSelect).call(this, 'start,select,end'));

    _defineProperty(_assertThisInitialized(_this), "_map", void 0);

    _defineProperty(_assertThisInitialized(_this), "_boxSelection", void 0);

    _defineProperty(_assertThisInitialized(_this), "_features", []);

    _defineProperty(_assertThisInitialized(_this), "_listener", {
      select: null
    });

    _this._map = map;
    _this._boxSelection = new BoxSelection(map);

    _this.toggleFeatureSelectListener();

    _this._onBoxEnd = _this._onBoxEnd.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FeatureSelect, [{
    key: "activateHandle",
    value: function activateHandle() {
      this._boxSelection.on('boxend', this._onBoxEnd);

      this._boxSelection.activate();
    }
  }, {
    key: "deactivateHandle",
    value: function deactivateHandle() {
      this._boxSelection.offAll();

      this._boxSelection.deactivate();
    }
  }, {
    key: "toggleFeatureSelectListener",
    value: function toggleFeatureSelectListener() {
      var _this2 = this;

      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this._listener.select;
      var listenerKey = this._listener.select;

      if (state) {
        if (listenerKey) {
          this.toggleFeatureSelectListener();
        }

        this._listener.select = this._map.selectInteraction.on('select', function (e) {
          var selectedFeature = e.selected;

          if (selectedFeature.length) {
            _this2.dispatch('select', selectedFeature[0].get('BSM'));
          }
        });
      } else {
        unByKey(listenerKey);
        this._listener.select = null;
      }
    }
  }, {
    key: "updateFeatures",
    value: function updateFeatures(features) {
      this._features = features;
    }
  }, {
    key: "selectFeature",
    value: function selectFeature(BSM) {
      var map = this._map;

      var feature = this._features.find(function (item) {
        return BSM === item.get('BSM');
      });

      feature && setTimeout(function () {
        return map.selectFeature(feature);
      }, 300);
    }
  }, {
    key: "_onBoxEnd",
    value: function _onBoxEnd(extent) {
      var _this3 = this;

      this.dispatch('start', extent);

      this._map.searchFeature({
        extent: extent
      }).then(function (res) {
        _this3.updateFeatures(res.features);

        _this3.dispatch('end', {
          state: true,
          data: res.data
        });
      }, function (error) {
        _this3.dispatch('end', {
          state: false,
          message: error
        });
      });
    }
  }]);

  return FeatureSelect;
}(classMixin(GISEvent, ToggleActive));

export default FeatureSelect;
//# sourceMappingURL=feature-select-4964532a.js.map
